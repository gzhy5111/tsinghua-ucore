
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 10 13 00 	lgdtl  0x131018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 10 13 c0       	mov    $0xc0131000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba c4 56 1c c0       	mov    $0xc01c56c4,%edx
c0100035:	b8 f9 23 1c c0       	mov    $0xc01c23f9,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 f9 23 1c c0 	movl   $0xc01c23f9,(%esp)
c0100051:	e8 0b d4 00 00       	call   c010d461 <memset>

    cons_init();                // init the console
c0100056:	e8 85 16 00 00       	call   c01016e0 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 00 d6 10 c0 	movl   $0xc010d600,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 1c d6 10 c0 	movl   $0xc010d61c,(%esp)
c0100070:	e8 e3 02 00 00       	call   c0100358 <cprintf>

    print_kerninfo();
c0100075:	e8 0a 09 00 00       	call   c0100984 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a2 00 00 00       	call   c0100121 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 be 55 00 00       	call   c0105642 <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 35 20 00 00       	call   c01020be <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 87 21 00 00       	call   c0102215 <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 6a 84 00 00       	call   c01084fd <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 07 c2 00 00       	call   c010c29f <sched_init>
    proc_init();                // init process table
c0100098:	e8 3f bc 00 00       	call   c010bcdc <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 6f 17 00 00       	call   c0101811 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 50 6c 00 00       	call   c0106cf7 <swap_init>

    clock_init();               // init clock interrupt
c01000a7:	e8 ea 0d 00 00       	call   c0100e96 <clock_init>
    intr_enable();              // enable irq interrupt
c01000ac:	e8 7b 1f 00 00       	call   c010202c <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b1:	e8 e5 bd 00 00       	call   c010be9b <cpu_idle>

c01000b6 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b6:	55                   	push   %ebp
c01000b7:	89 e5                	mov    %esp,%ebp
c01000b9:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c3:	00 
c01000c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cb:	00 
c01000cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d3:	e8 f0 0c 00 00       	call   c0100dc8 <mon_backtrace>
}
c01000d8:	c9                   	leave  
c01000d9:	c3                   	ret    

c01000da <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000da:	55                   	push   %ebp
c01000db:	89 e5                	mov    %esp,%ebp
c01000dd:	53                   	push   %ebx
c01000de:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e1:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000e7:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000f9:	89 04 24             	mov    %eax,(%esp)
c01000fc:	e8 b5 ff ff ff       	call   c01000b6 <grade_backtrace2>
}
c0100101:	83 c4 14             	add    $0x14,%esp
c0100104:	5b                   	pop    %ebx
c0100105:	5d                   	pop    %ebp
c0100106:	c3                   	ret    

c0100107 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100107:	55                   	push   %ebp
c0100108:	89 e5                	mov    %esp,%ebp
c010010a:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010010d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100110:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100114:	8b 45 08             	mov    0x8(%ebp),%eax
c0100117:	89 04 24             	mov    %eax,(%esp)
c010011a:	e8 bb ff ff ff       	call   c01000da <grade_backtrace1>
}
c010011f:	c9                   	leave  
c0100120:	c3                   	ret    

c0100121 <grade_backtrace>:

void
grade_backtrace(void) {
c0100121:	55                   	push   %ebp
c0100122:	89 e5                	mov    %esp,%ebp
c0100124:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100127:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c010012c:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100133:	ff 
c0100134:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100138:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010013f:	e8 c3 ff ff ff       	call   c0100107 <grade_backtrace0>
}
c0100144:	c9                   	leave  
c0100145:	c3                   	ret    

c0100146 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100146:	55                   	push   %ebp
c0100147:	89 e5                	mov    %esp,%ebp
c0100149:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010015c:	0f b7 c0             	movzwl %ax,%eax
c010015f:	83 e0 03             	and    $0x3,%eax
c0100162:	89 c2                	mov    %eax,%edx
c0100164:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c0100169:	89 54 24 08          	mov    %edx,0x8(%esp)
c010016d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100171:	c7 04 24 21 d6 10 c0 	movl   $0xc010d621,(%esp)
c0100178:	e8 db 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010017d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100181:	0f b7 d0             	movzwl %ax,%edx
c0100184:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c0100189:	89 54 24 08          	mov    %edx,0x8(%esp)
c010018d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100191:	c7 04 24 2f d6 10 c0 	movl   $0xc010d62f,(%esp)
c0100198:	e8 bb 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c010019d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a1:	0f b7 d0             	movzwl %ax,%edx
c01001a4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c01001a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b1:	c7 04 24 3d d6 10 c0 	movl   $0xc010d63d,(%esp)
c01001b8:	e8 9b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c1:	0f b7 d0             	movzwl %ax,%edx
c01001c4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c01001c9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d1:	c7 04 24 4b d6 10 c0 	movl   $0xc010d64b,(%esp)
c01001d8:	e8 7b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001dd:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e1:	0f b7 d0             	movzwl %ax,%edx
c01001e4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c01001e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f1:	c7 04 24 59 d6 10 c0 	movl   $0xc010d659,(%esp)
c01001f8:	e8 5b 01 00 00       	call   c0100358 <cprintf>
    round ++;
c01001fd:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c0100202:	83 c0 01             	add    $0x1,%eax
c0100205:	a3 00 24 1c c0       	mov    %eax,0xc01c2400
}
c010020a:	c9                   	leave  
c010020b:	c3                   	ret    

c010020c <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010020c:	55                   	push   %ebp
c010020d:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020f:	5d                   	pop    %ebp
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
c0100219:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010021c:	e8 25 ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100221:	c7 04 24 68 d6 10 c0 	movl   $0xc010d668,(%esp)
c0100228:	e8 2b 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_user();
c010022d:	e8 da ff ff ff       	call   c010020c <lab1_switch_to_user>
    lab1_print_cur_status();
c0100232:	e8 0f ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100237:	c7 04 24 88 d6 10 c0 	movl   $0xc010d688,(%esp)
c010023e:	e8 15 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_kernel();
c0100243:	e8 c9 ff ff ff       	call   c0100211 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100248:	e8 f9 fe ff ff       	call   c0100146 <lab1_print_cur_status>
}
c010024d:	c9                   	leave  
c010024e:	c3                   	ret    

c010024f <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010024f:	55                   	push   %ebp
c0100250:	89 e5                	mov    %esp,%ebp
c0100252:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100255:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100259:	74 13                	je     c010026e <readline+0x1f>
        cprintf("%s", prompt);
c010025b:	8b 45 08             	mov    0x8(%ebp),%eax
c010025e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100262:	c7 04 24 a7 d6 10 c0 	movl   $0xc010d6a7,(%esp)
c0100269:	e8 ea 00 00 00       	call   c0100358 <cprintf>
    }
    int i = 0, c;
c010026e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100275:	e8 66 01 00 00       	call   c01003e0 <getchar>
c010027a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010027d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100281:	79 07                	jns    c010028a <readline+0x3b>
            return NULL;
c0100283:	b8 00 00 00 00       	mov    $0x0,%eax
c0100288:	eb 79                	jmp    c0100303 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010028e:	7e 28                	jle    c01002b8 <readline+0x69>
c0100290:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100297:	7f 1f                	jg     c01002b8 <readline+0x69>
            cputchar(c);
c0100299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010029c:	89 04 24             	mov    %eax,(%esp)
c010029f:	e8 da 00 00 00       	call   c010037e <cputchar>
            buf[i ++] = c;
c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002a7:	8d 50 01             	lea    0x1(%eax),%edx
c01002aa:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b0:	88 90 20 24 1c c0    	mov    %dl,-0x3fe3dbe0(%eax)
c01002b6:	eb 46                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002b8:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002bc:	75 17                	jne    c01002d5 <readline+0x86>
c01002be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c2:	7e 11                	jle    c01002d5 <readline+0x86>
            cputchar(c);
c01002c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002c7:	89 04 24             	mov    %eax,(%esp)
c01002ca:	e8 af 00 00 00       	call   c010037e <cputchar>
            i --;
c01002cf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d3:	eb 29                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002d9:	74 06                	je     c01002e1 <readline+0x92>
c01002db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002df:	75 1d                	jne    c01002fe <readline+0xaf>
            cputchar(c);
c01002e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e4:	89 04 24             	mov    %eax,(%esp)
c01002e7:	e8 92 00 00 00       	call   c010037e <cputchar>
            buf[i] = '\0';
c01002ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ef:	05 20 24 1c c0       	add    $0xc01c2420,%eax
c01002f4:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002f7:	b8 20 24 1c c0       	mov    $0xc01c2420,%eax
c01002fc:	eb 05                	jmp    c0100303 <readline+0xb4>
        }
    }
c01002fe:	e9 72 ff ff ff       	jmp    c0100275 <readline+0x26>
}
c0100303:	c9                   	leave  
c0100304:	c3                   	ret    

c0100305 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100305:	55                   	push   %ebp
c0100306:	89 e5                	mov    %esp,%ebp
c0100308:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010030b:	8b 45 08             	mov    0x8(%ebp),%eax
c010030e:	89 04 24             	mov    %eax,(%esp)
c0100311:	e8 f6 13 00 00       	call   c010170c <cons_putc>
    (*cnt) ++;
c0100316:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100319:	8b 00                	mov    (%eax),%eax
c010031b:	8d 50 01             	lea    0x1(%eax),%edx
c010031e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100321:	89 10                	mov    %edx,(%eax)
}
c0100323:	c9                   	leave  
c0100324:	c3                   	ret    

c0100325 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100325:	55                   	push   %ebp
c0100326:	89 e5                	mov    %esp,%ebp
c0100328:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c010032b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100332:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100335:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100339:	8b 45 08             	mov    0x8(%ebp),%eax
c010033c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100340:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100343:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100347:	c7 04 24 05 03 10 c0 	movl   $0xc0100305,(%esp)
c010034e:	e8 4f c8 00 00       	call   c010cba2 <vprintfmt>
    return cnt;
c0100353:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100356:	c9                   	leave  
c0100357:	c3                   	ret    

c0100358 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100358:	55                   	push   %ebp
c0100359:	89 e5                	mov    %esp,%ebp
c010035b:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010035e:	8d 45 0c             	lea    0xc(%ebp),%eax
c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100367:	89 44 24 04          	mov    %eax,0x4(%esp)
c010036b:	8b 45 08             	mov    0x8(%ebp),%eax
c010036e:	89 04 24             	mov    %eax,(%esp)
c0100371:	e8 af ff ff ff       	call   c0100325 <vcprintf>
c0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010037c:	c9                   	leave  
c010037d:	c3                   	ret    

c010037e <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010037e:	55                   	push   %ebp
c010037f:	89 e5                	mov    %esp,%ebp
c0100381:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100384:	8b 45 08             	mov    0x8(%ebp),%eax
c0100387:	89 04 24             	mov    %eax,(%esp)
c010038a:	e8 7d 13 00 00       	call   c010170c <cons_putc>
}
c010038f:	c9                   	leave  
c0100390:	c3                   	ret    

c0100391 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c0100391:	55                   	push   %ebp
c0100392:	89 e5                	mov    %esp,%ebp
c0100394:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100397:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c010039e:	eb 13                	jmp    c01003b3 <cputs+0x22>
        cputch(c, &cnt);
c01003a0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003a4:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003ab:	89 04 24             	mov    %eax,(%esp)
c01003ae:	e8 52 ff ff ff       	call   c0100305 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01003b6:	8d 50 01             	lea    0x1(%eax),%edx
c01003b9:	89 55 08             	mov    %edx,0x8(%ebp)
c01003bc:	0f b6 00             	movzbl (%eax),%eax
c01003bf:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003c2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003c6:	75 d8                	jne    c01003a0 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003c8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003d6:	e8 2a ff ff ff       	call   c0100305 <cputch>
    return cnt;
c01003db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003de:	c9                   	leave  
c01003df:	c3                   	ret    

c01003e0 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003e0:	55                   	push   %ebp
c01003e1:	89 e5                	mov    %esp,%ebp
c01003e3:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003e6:	e8 5d 13 00 00       	call   c0101748 <cons_getc>
c01003eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003f2:	74 f2                	je     c01003e6 <getchar+0x6>
        /* do nothing */;
    return c;
c01003f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003f7:	c9                   	leave  
c01003f8:	c3                   	ret    

c01003f9 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01003f9:	55                   	push   %ebp
c01003fa:	89 e5                	mov    %esp,%ebp
c01003fc:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100402:	8b 00                	mov    (%eax),%eax
c0100404:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100407:	8b 45 10             	mov    0x10(%ebp),%eax
c010040a:	8b 00                	mov    (%eax),%eax
c010040c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010040f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100416:	e9 d2 00 00 00       	jmp    c01004ed <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c010041b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010041e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100421:	01 d0                	add    %edx,%eax
c0100423:	89 c2                	mov    %eax,%edx
c0100425:	c1 ea 1f             	shr    $0x1f,%edx
c0100428:	01 d0                	add    %edx,%eax
c010042a:	d1 f8                	sar    %eax
c010042c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010042f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100432:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100435:	eb 04                	jmp    c010043b <stab_binsearch+0x42>
            m --;
c0100437:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010043b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010043e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100441:	7c 1f                	jl     c0100462 <stab_binsearch+0x69>
c0100443:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100446:	89 d0                	mov    %edx,%eax
c0100448:	01 c0                	add    %eax,%eax
c010044a:	01 d0                	add    %edx,%eax
c010044c:	c1 e0 02             	shl    $0x2,%eax
c010044f:	89 c2                	mov    %eax,%edx
c0100451:	8b 45 08             	mov    0x8(%ebp),%eax
c0100454:	01 d0                	add    %edx,%eax
c0100456:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010045a:	0f b6 c0             	movzbl %al,%eax
c010045d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100460:	75 d5                	jne    c0100437 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100462:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100465:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100468:	7d 0b                	jge    c0100475 <stab_binsearch+0x7c>
            l = true_m + 1;
c010046a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010046d:	83 c0 01             	add    $0x1,%eax
c0100470:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100473:	eb 78                	jmp    c01004ed <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100475:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010047c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010047f:	89 d0                	mov    %edx,%eax
c0100481:	01 c0                	add    %eax,%eax
c0100483:	01 d0                	add    %edx,%eax
c0100485:	c1 e0 02             	shl    $0x2,%eax
c0100488:	89 c2                	mov    %eax,%edx
c010048a:	8b 45 08             	mov    0x8(%ebp),%eax
c010048d:	01 d0                	add    %edx,%eax
c010048f:	8b 40 08             	mov    0x8(%eax),%eax
c0100492:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100495:	73 13                	jae    c01004aa <stab_binsearch+0xb1>
            *region_left = m;
c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
c010049a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010049d:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004a2:	83 c0 01             	add    $0x1,%eax
c01004a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004a8:	eb 43                	jmp    c01004ed <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01004aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ad:	89 d0                	mov    %edx,%eax
c01004af:	01 c0                	add    %eax,%eax
c01004b1:	01 d0                	add    %edx,%eax
c01004b3:	c1 e0 02             	shl    $0x2,%eax
c01004b6:	89 c2                	mov    %eax,%edx
c01004b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01004bb:	01 d0                	add    %edx,%eax
c01004bd:	8b 40 08             	mov    0x8(%eax),%eax
c01004c0:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004c3:	76 16                	jbe    c01004db <stab_binsearch+0xe2>
            *region_right = m - 1;
c01004c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01004ce:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d3:	83 e8 01             	sub    $0x1,%eax
c01004d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004d9:	eb 12                	jmp    c01004ed <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004e1:	89 10                	mov    %edx,(%eax)
            l = m;
c01004e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004e9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004f0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01004f3:	0f 8e 22 ff ff ff    	jle    c010041b <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01004f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01004fd:	75 0f                	jne    c010050e <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01004ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100502:	8b 00                	mov    (%eax),%eax
c0100504:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100507:	8b 45 10             	mov    0x10(%ebp),%eax
c010050a:	89 10                	mov    %edx,(%eax)
c010050c:	eb 3f                	jmp    c010054d <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100511:	8b 00                	mov    (%eax),%eax
c0100513:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100516:	eb 04                	jmp    c010051c <stab_binsearch+0x123>
c0100518:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010051c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010051f:	8b 00                	mov    (%eax),%eax
c0100521:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100524:	7d 1f                	jge    c0100545 <stab_binsearch+0x14c>
c0100526:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100529:	89 d0                	mov    %edx,%eax
c010052b:	01 c0                	add    %eax,%eax
c010052d:	01 d0                	add    %edx,%eax
c010052f:	c1 e0 02             	shl    $0x2,%eax
c0100532:	89 c2                	mov    %eax,%edx
c0100534:	8b 45 08             	mov    0x8(%ebp),%eax
c0100537:	01 d0                	add    %edx,%eax
c0100539:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010053d:	0f b6 c0             	movzbl %al,%eax
c0100540:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100543:	75 d3                	jne    c0100518 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100545:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100548:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010054b:	89 10                	mov    %edx,(%eax)
    }
}
c010054d:	c9                   	leave  
c010054e:	c3                   	ret    

c010054f <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010054f:	55                   	push   %ebp
c0100550:	89 e5                	mov    %esp,%ebp
c0100552:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100555:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100558:	c7 00 ac d6 10 c0    	movl   $0xc010d6ac,(%eax)
    info->eip_line = 0;
c010055e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100568:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056b:	c7 40 08 ac d6 10 c0 	movl   $0xc010d6ac,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100572:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100575:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057f:	8b 55 08             	mov    0x8(%ebp),%edx
c0100582:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010058f:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100596:	76 21                	jbe    c01005b9 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100598:	c7 45 f4 00 03 11 c0 	movl   $0xc0110300,-0xc(%ebp)
        stab_end = __STAB_END__;
c010059f:	c7 45 f0 00 74 12 c0 	movl   $0xc0127400,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005a6:	c7 45 ec 01 74 12 c0 	movl   $0xc0127401,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005ad:	c7 45 e8 1e e2 12 c0 	movl   $0xc012e21e,-0x18(%ebp)
c01005b4:	e9 ea 00 00 00       	jmp    c01006a3 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005b9:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005c0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01005c5:	85 c0                	test   %eax,%eax
c01005c7:	74 11                	je     c01005da <debuginfo_eip+0x8b>
c01005c9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01005ce:	8b 40 18             	mov    0x18(%eax),%eax
c01005d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005d8:	75 0a                	jne    c01005e4 <debuginfo_eip+0x95>
            return -1;
c01005da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005df:	e9 9e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005ee:	00 
c01005ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01005f6:	00 
c01005f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01005fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01005fe:	89 04 24             	mov    %eax,(%esp)
c0100601:	e8 13 88 00 00       	call   c0108e19 <user_mem_check>
c0100606:	85 c0                	test   %eax,%eax
c0100608:	75 0a                	jne    c0100614 <debuginfo_eip+0xc5>
            return -1;
c010060a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010060f:	e9 6e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100617:	8b 00                	mov    (%eax),%eax
c0100619:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010061c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010061f:	8b 40 04             	mov    0x4(%eax),%eax
c0100622:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100625:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100628:	8b 40 08             	mov    0x8(%eax),%eax
c010062b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010062e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100631:	8b 40 0c             	mov    0xc(%eax),%eax
c0100634:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100637:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010063d:	29 c2                	sub    %eax,%edx
c010063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100642:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100649:	00 
c010064a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010064e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100652:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100655:	89 04 24             	mov    %eax,(%esp)
c0100658:	e8 bc 87 00 00       	call   c0108e19 <user_mem_check>
c010065d:	85 c0                	test   %eax,%eax
c010065f:	75 0a                	jne    c010066b <debuginfo_eip+0x11c>
            return -1;
c0100661:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100666:	e9 17 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010066b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010066e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100671:	29 c2                	sub    %eax,%edx
c0100673:	89 d0                	mov    %edx,%eax
c0100675:	89 c2                	mov    %eax,%edx
c0100677:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010067a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100681:	00 
c0100682:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010068a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010068d:	89 04 24             	mov    %eax,(%esp)
c0100690:	e8 84 87 00 00       	call   c0108e19 <user_mem_check>
c0100695:	85 c0                	test   %eax,%eax
c0100697:	75 0a                	jne    c01006a3 <debuginfo_eip+0x154>
            return -1;
c0100699:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010069e:	e9 df 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006a9:	76 0d                	jbe    c01006b8 <debuginfo_eip+0x169>
c01006ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ae:	83 e8 01             	sub    $0x1,%eax
c01006b1:	0f b6 00             	movzbl (%eax),%eax
c01006b4:	84 c0                	test   %al,%al
c01006b6:	74 0a                	je     c01006c2 <debuginfo_eip+0x173>
        return -1;
c01006b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006bd:	e9 c0 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006cf:	29 c2                	sub    %eax,%edx
c01006d1:	89 d0                	mov    %edx,%eax
c01006d3:	c1 f8 02             	sar    $0x2,%eax
c01006d6:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006dc:	83 e8 01             	sub    $0x1,%eax
c01006df:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01006e5:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006e9:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01006f0:	00 
c01006f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01006f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01006f8:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01006fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100702:	89 04 24             	mov    %eax,(%esp)
c0100705:	e8 ef fc ff ff       	call   c01003f9 <stab_binsearch>
    if (lfile == 0)
c010070a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010070d:	85 c0                	test   %eax,%eax
c010070f:	75 0a                	jne    c010071b <debuginfo_eip+0x1cc>
        return -1;
c0100711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100716:	e9 67 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c010071b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010071e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100721:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100724:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100727:	8b 45 08             	mov    0x8(%ebp),%eax
c010072a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010072e:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100735:	00 
c0100736:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100739:	89 44 24 08          	mov    %eax,0x8(%esp)
c010073d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100740:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100747:	89 04 24             	mov    %eax,(%esp)
c010074a:	e8 aa fc ff ff       	call   c01003f9 <stab_binsearch>

    if (lfun <= rfun) {
c010074f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100752:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100755:	39 c2                	cmp    %eax,%edx
c0100757:	7f 7c                	jg     c01007d5 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100759:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010075c:	89 c2                	mov    %eax,%edx
c010075e:	89 d0                	mov    %edx,%eax
c0100760:	01 c0                	add    %eax,%eax
c0100762:	01 d0                	add    %edx,%eax
c0100764:	c1 e0 02             	shl    $0x2,%eax
c0100767:	89 c2                	mov    %eax,%edx
c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010076c:	01 d0                	add    %edx,%eax
c010076e:	8b 10                	mov    (%eax),%edx
c0100770:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100773:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100776:	29 c1                	sub    %eax,%ecx
c0100778:	89 c8                	mov    %ecx,%eax
c010077a:	39 c2                	cmp    %eax,%edx
c010077c:	73 22                	jae    c01007a0 <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010077e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100781:	89 c2                	mov    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	01 c0                	add    %eax,%eax
c0100787:	01 d0                	add    %edx,%eax
c0100789:	c1 e0 02             	shl    $0x2,%eax
c010078c:	89 c2                	mov    %eax,%edx
c010078e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100791:	01 d0                	add    %edx,%eax
c0100793:	8b 10                	mov    (%eax),%edx
c0100795:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100798:	01 c2                	add    %eax,%edx
c010079a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010079d:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007a3:	89 c2                	mov    %eax,%edx
c01007a5:	89 d0                	mov    %edx,%eax
c01007a7:	01 c0                	add    %eax,%eax
c01007a9:	01 d0                	add    %edx,%eax
c01007ab:	c1 e0 02             	shl    $0x2,%eax
c01007ae:	89 c2                	mov    %eax,%edx
c01007b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007b3:	01 d0                	add    %edx,%eax
c01007b5:	8b 50 08             	mov    0x8(%eax),%edx
c01007b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007bb:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007c1:	8b 40 10             	mov    0x10(%eax),%eax
c01007c4:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007d3:	eb 15                	jmp    c01007ea <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d8:	8b 55 08             	mov    0x8(%ebp),%edx
c01007db:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007ed:	8b 40 08             	mov    0x8(%eax),%eax
c01007f0:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01007f7:	00 
c01007f8:	89 04 24             	mov    %eax,(%esp)
c01007fb:	e8 d5 ca 00 00       	call   c010d2d5 <strfind>
c0100800:	89 c2                	mov    %eax,%edx
c0100802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100805:	8b 40 08             	mov    0x8(%eax),%eax
c0100808:	29 c2                	sub    %eax,%edx
c010080a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010080d:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100810:	8b 45 08             	mov    0x8(%ebp),%eax
c0100813:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100817:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010081e:	00 
c010081f:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100822:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100826:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100829:	89 44 24 04          	mov    %eax,0x4(%esp)
c010082d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100830:	89 04 24             	mov    %eax,(%esp)
c0100833:	e8 c1 fb ff ff       	call   c01003f9 <stab_binsearch>
    if (lline <= rline) {
c0100838:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010083b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010083e:	39 c2                	cmp    %eax,%edx
c0100840:	7f 24                	jg     c0100866 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100842:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100845:	89 c2                	mov    %eax,%edx
c0100847:	89 d0                	mov    %edx,%eax
c0100849:	01 c0                	add    %eax,%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	c1 e0 02             	shl    $0x2,%eax
c0100850:	89 c2                	mov    %eax,%edx
c0100852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100855:	01 d0                	add    %edx,%eax
c0100857:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c010085b:	0f b7 d0             	movzwl %ax,%edx
c010085e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100861:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100864:	eb 13                	jmp    c0100879 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100866:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010086b:	e9 12 01 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100870:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100873:	83 e8 01             	sub    $0x1,%eax
c0100876:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100879:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010087c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010087f:	39 c2                	cmp    %eax,%edx
c0100881:	7c 56                	jl     c01008d9 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100883:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100886:	89 c2                	mov    %eax,%edx
c0100888:	89 d0                	mov    %edx,%eax
c010088a:	01 c0                	add    %eax,%eax
c010088c:	01 d0                	add    %edx,%eax
c010088e:	c1 e0 02             	shl    $0x2,%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100896:	01 d0                	add    %edx,%eax
c0100898:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010089c:	3c 84                	cmp    $0x84,%al
c010089e:	74 39                	je     c01008d9 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008a3:	89 c2                	mov    %eax,%edx
c01008a5:	89 d0                	mov    %edx,%eax
c01008a7:	01 c0                	add    %eax,%eax
c01008a9:	01 d0                	add    %edx,%eax
c01008ab:	c1 e0 02             	shl    $0x2,%eax
c01008ae:	89 c2                	mov    %eax,%edx
c01008b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008b3:	01 d0                	add    %edx,%eax
c01008b5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008b9:	3c 64                	cmp    $0x64,%al
c01008bb:	75 b3                	jne    c0100870 <debuginfo_eip+0x321>
c01008bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008c0:	89 c2                	mov    %eax,%edx
c01008c2:	89 d0                	mov    %edx,%eax
c01008c4:	01 c0                	add    %eax,%eax
c01008c6:	01 d0                	add    %edx,%eax
c01008c8:	c1 e0 02             	shl    $0x2,%eax
c01008cb:	89 c2                	mov    %eax,%edx
c01008cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008d0:	01 d0                	add    %edx,%eax
c01008d2:	8b 40 08             	mov    0x8(%eax),%eax
c01008d5:	85 c0                	test   %eax,%eax
c01008d7:	74 97                	je     c0100870 <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008df:	39 c2                	cmp    %eax,%edx
c01008e1:	7c 46                	jl     c0100929 <debuginfo_eip+0x3da>
c01008e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008e6:	89 c2                	mov    %eax,%edx
c01008e8:	89 d0                	mov    %edx,%eax
c01008ea:	01 c0                	add    %eax,%eax
c01008ec:	01 d0                	add    %edx,%eax
c01008ee:	c1 e0 02             	shl    $0x2,%eax
c01008f1:	89 c2                	mov    %eax,%edx
c01008f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008f6:	01 d0                	add    %edx,%eax
c01008f8:	8b 10                	mov    (%eax),%edx
c01008fa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100900:	29 c1                	sub    %eax,%ecx
c0100902:	89 c8                	mov    %ecx,%eax
c0100904:	39 c2                	cmp    %eax,%edx
c0100906:	73 21                	jae    c0100929 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100908:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090b:	89 c2                	mov    %eax,%edx
c010090d:	89 d0                	mov    %edx,%eax
c010090f:	01 c0                	add    %eax,%eax
c0100911:	01 d0                	add    %edx,%eax
c0100913:	c1 e0 02             	shl    $0x2,%eax
c0100916:	89 c2                	mov    %eax,%edx
c0100918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091b:	01 d0                	add    %edx,%eax
c010091d:	8b 10                	mov    (%eax),%edx
c010091f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100922:	01 c2                	add    %eax,%edx
c0100924:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100927:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100929:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010092c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010092f:	39 c2                	cmp    %eax,%edx
c0100931:	7d 4a                	jge    c010097d <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100936:	83 c0 01             	add    $0x1,%eax
c0100939:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010093c:	eb 18                	jmp    c0100956 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100941:	8b 40 14             	mov    0x14(%eax),%eax
c0100944:	8d 50 01             	lea    0x1(%eax),%edx
c0100947:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094a:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c010094d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100950:	83 c0 01             	add    $0x1,%eax
c0100953:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100956:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100959:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c010095c:	39 c2                	cmp    %eax,%edx
c010095e:	7d 1d                	jge    c010097d <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100960:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100963:	89 c2                	mov    %eax,%edx
c0100965:	89 d0                	mov    %edx,%eax
c0100967:	01 c0                	add    %eax,%eax
c0100969:	01 d0                	add    %edx,%eax
c010096b:	c1 e0 02             	shl    $0x2,%eax
c010096e:	89 c2                	mov    %eax,%edx
c0100970:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100973:	01 d0                	add    %edx,%eax
c0100975:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100979:	3c a0                	cmp    $0xa0,%al
c010097b:	74 c1                	je     c010093e <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c010097d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100982:	c9                   	leave  
c0100983:	c3                   	ret    

c0100984 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100984:	55                   	push   %ebp
c0100985:	89 e5                	mov    %esp,%ebp
c0100987:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c010098a:	c7 04 24 b6 d6 10 c0 	movl   $0xc010d6b6,(%esp)
c0100991:	e8 c2 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100996:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c010099d:	c0 
c010099e:	c7 04 24 cf d6 10 c0 	movl   $0xc010d6cf,(%esp)
c01009a5:	e8 ae f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009aa:	c7 44 24 04 ea d5 10 	movl   $0xc010d5ea,0x4(%esp)
c01009b1:	c0 
c01009b2:	c7 04 24 e7 d6 10 c0 	movl   $0xc010d6e7,(%esp)
c01009b9:	e8 9a f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009be:	c7 44 24 04 f9 23 1c 	movl   $0xc01c23f9,0x4(%esp)
c01009c5:	c0 
c01009c6:	c7 04 24 ff d6 10 c0 	movl   $0xc010d6ff,(%esp)
c01009cd:	e8 86 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009d2:	c7 44 24 04 c4 56 1c 	movl   $0xc01c56c4,0x4(%esp)
c01009d9:	c0 
c01009da:	c7 04 24 17 d7 10 c0 	movl   $0xc010d717,(%esp)
c01009e1:	e8 72 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009e6:	b8 c4 56 1c c0       	mov    $0xc01c56c4,%eax
c01009eb:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009f1:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c01009f6:	29 c2                	sub    %eax,%edx
c01009f8:	89 d0                	mov    %edx,%eax
c01009fa:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a00:	85 c0                	test   %eax,%eax
c0100a02:	0f 48 c2             	cmovs  %edx,%eax
c0100a05:	c1 f8 0a             	sar    $0xa,%eax
c0100a08:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a0c:	c7 04 24 30 d7 10 c0 	movl   $0xc010d730,(%esp)
c0100a13:	e8 40 f9 ff ff       	call   c0100358 <cprintf>
}
c0100a18:	c9                   	leave  
c0100a19:	c3                   	ret    

c0100a1a <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a1a:	55                   	push   %ebp
c0100a1b:	89 e5                	mov    %esp,%ebp
c0100a1d:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a23:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a2d:	89 04 24             	mov    %eax,(%esp)
c0100a30:	e8 1a fb ff ff       	call   c010054f <debuginfo_eip>
c0100a35:	85 c0                	test   %eax,%eax
c0100a37:	74 15                	je     c0100a4e <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a40:	c7 04 24 5a d7 10 c0 	movl   $0xc010d75a,(%esp)
c0100a47:	e8 0c f9 ff ff       	call   c0100358 <cprintf>
c0100a4c:	eb 6d                	jmp    c0100abb <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a55:	eb 1c                	jmp    c0100a73 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a5d:	01 d0                	add    %edx,%eax
c0100a5f:	0f b6 00             	movzbl (%eax),%eax
c0100a62:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100a6b:	01 ca                	add    %ecx,%edx
c0100a6d:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a79:	7f dc                	jg     c0100a57 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a7b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a84:	01 d0                	add    %edx,%eax
c0100a86:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100a8f:	89 d1                	mov    %edx,%ecx
c0100a91:	29 c1                	sub    %eax,%ecx
c0100a93:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100a96:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a99:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100a9d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100aa3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100aa7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100aab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100aaf:	c7 04 24 76 d7 10 c0 	movl   $0xc010d776,(%esp)
c0100ab6:	e8 9d f8 ff ff       	call   c0100358 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100abb:	c9                   	leave  
c0100abc:	c3                   	ret    

c0100abd <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100abd:	55                   	push   %ebp
c0100abe:	89 e5                	mov    %esp,%ebp
c0100ac0:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100ac3:	8b 45 04             	mov    0x4(%ebp),%eax
c0100ac6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100acc:	c9                   	leave  
c0100acd:	c3                   	ret    

c0100ace <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ace:	55                   	push   %ebp
c0100acf:	89 e5                	mov    %esp,%ebp
c0100ad1:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ad4:	89 e8                	mov    %ebp,%eax
c0100ad6:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100ad9:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
	uint32_t ebp = read_ebp();
c0100adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t eip = read_eip();
c0100adf:	e8 d9 ff ff ff       	call   c0100abd <read_eip>
c0100ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	// 循环打印，直到 STACKFRAME_DEPTH 栈的深度已经最大，并且还要满足ebp ！= 0
	int i;
	for (i = 0; i < STACKFRAME_DEPTH && ebp != 0; i++) {
c0100ae7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100aee:	e9 88 00 00 00       	jmp    c0100b7b <print_stackframe+0xad>
		cprintf("ebp: 0x%08x eip: 0x%08x args: ", ebp, eip);
c0100af3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100af6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100afd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b01:	c7 04 24 88 d7 10 c0 	movl   $0xc010d788,(%esp)
c0100b08:	e8 4b f8 ff ff       	call   c0100358 <cprintf>

		// ebp + 2才是第一个参数的地址，具体可以看笔记
		uint32_t *args = (uint32_t *)ebp + 2;
c0100b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b10:	83 c0 08             	add    $0x8,%eax
c0100b13:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		// 循环打印4个args
		int j;
		for (j = 0; j < 4; j++) {
c0100b16:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b1d:	eb 25                	jmp    c0100b44 <print_stackframe+0x76>
			cprintf("0x%08x ", args[j]);
c0100b1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b22:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100b29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100b2c:	01 d0                	add    %edx,%eax
c0100b2e:	8b 00                	mov    (%eax),%eax
c0100b30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b34:	c7 04 24 a7 d7 10 c0 	movl   $0xc010d7a7,(%esp)
c0100b3b:	e8 18 f8 ff ff       	call   c0100358 <cprintf>
		// ebp + 2才是第一个参数的地址，具体可以看笔记
		uint32_t *args = (uint32_t *)ebp + 2;

		// 循环打印4个args
		int j;
		for (j = 0; j < 4; j++) {
c0100b40:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100b44:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100b48:	7e d5                	jle    c0100b1f <print_stackframe+0x51>
			cprintf("0x%08x ", args[j]);
		}
		cprintf("\n");
c0100b4a:	c7 04 24 af d7 10 c0 	movl   $0xc010d7af,(%esp)
c0100b51:	e8 02 f8 ff ff       	call   c0100358 <cprintf>

		// 打印 kern/debug/kdebug.c:305: print_stackframe+22 类似这行的东西，应该是调试信息
		print_debuginfo(eip-1);
c0100b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b59:	83 e8 01             	sub    $0x1,%eax
c0100b5c:	89 04 24             	mov    %eax,(%esp)
c0100b5f:	e8 b6 fe ff ff       	call   c0100a1a <print_debuginfo>

		// 先把eip指向ebp+1的位置，即函数的返回地址（Return Address）
		eip = *((uint32_t *)ebp + 1);
c0100b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b67:	83 c0 04             	add    $0x4,%eax
c0100b6a:	8b 00                	mov    (%eax),%eax
c0100b6c:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// ebp的内容给ebp回到上层调用函数
		ebp = *((uint32_t *)ebp);
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	8b 00                	mov    (%eax),%eax
c0100b74:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t ebp = read_ebp();
	uint32_t eip = read_eip();

	// 循环打印，直到 STACKFRAME_DEPTH 栈的深度已经最大，并且还要满足ebp ！= 0
	int i;
	for (i = 0; i < STACKFRAME_DEPTH && ebp != 0; i++) {
c0100b77:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100b7b:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b7f:	7f 0a                	jg     c0100b8b <print_stackframe+0xbd>
c0100b81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100b85:	0f 85 68 ff ff ff    	jne    c0100af3 <print_stackframe+0x25>
		eip = *((uint32_t *)ebp + 1);

		// ebp的内容给ebp回到上层调用函数
		ebp = *((uint32_t *)ebp);
	}
}
c0100b8b:	c9                   	leave  
c0100b8c:	c3                   	ret    

c0100b8d <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b8d:	55                   	push   %ebp
c0100b8e:	89 e5                	mov    %esp,%ebp
c0100b90:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100b93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b9a:	eb 0c                	jmp    c0100ba8 <parse+0x1b>
            *buf ++ = '\0';
c0100b9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b9f:	8d 50 01             	lea    0x1(%eax),%edx
c0100ba2:	89 55 08             	mov    %edx,0x8(%ebp)
c0100ba5:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bab:	0f b6 00             	movzbl (%eax),%eax
c0100bae:	84 c0                	test   %al,%al
c0100bb0:	74 1d                	je     c0100bcf <parse+0x42>
c0100bb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bb5:	0f b6 00             	movzbl (%eax),%eax
c0100bb8:	0f be c0             	movsbl %al,%eax
c0100bbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bbf:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0100bc6:	e8 d7 c6 00 00       	call   c010d2a2 <strchr>
c0100bcb:	85 c0                	test   %eax,%eax
c0100bcd:	75 cd                	jne    c0100b9c <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bd2:	0f b6 00             	movzbl (%eax),%eax
c0100bd5:	84 c0                	test   %al,%al
c0100bd7:	75 02                	jne    c0100bdb <parse+0x4e>
            break;
c0100bd9:	eb 67                	jmp    c0100c42 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100bdb:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100bdf:	75 14                	jne    c0100bf5 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100be1:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100be8:	00 
c0100be9:	c7 04 24 39 d8 10 c0 	movl   $0xc010d839,(%esp)
c0100bf0:	e8 63 f7 ff ff       	call   c0100358 <cprintf>
        }
        argv[argc ++] = buf;
c0100bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf8:	8d 50 01             	lea    0x1(%eax),%edx
c0100bfb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100bfe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c05:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c08:	01 c2                	add    %eax,%edx
c0100c0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c0d:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c0f:	eb 04                	jmp    c0100c15 <parse+0x88>
            buf ++;
c0100c11:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c15:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c18:	0f b6 00             	movzbl (%eax),%eax
c0100c1b:	84 c0                	test   %al,%al
c0100c1d:	74 1d                	je     c0100c3c <parse+0xaf>
c0100c1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c22:	0f b6 00             	movzbl (%eax),%eax
c0100c25:	0f be c0             	movsbl %al,%eax
c0100c28:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c2c:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0100c33:	e8 6a c6 00 00       	call   c010d2a2 <strchr>
c0100c38:	85 c0                	test   %eax,%eax
c0100c3a:	74 d5                	je     c0100c11 <parse+0x84>
            buf ++;
        }
    }
c0100c3c:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c3d:	e9 66 ff ff ff       	jmp    c0100ba8 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c45:	c9                   	leave  
c0100c46:	c3                   	ret    

c0100c47 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c47:	55                   	push   %ebp
c0100c48:	89 e5                	mov    %esp,%ebp
c0100c4a:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c4d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c54:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c57:	89 04 24             	mov    %eax,(%esp)
c0100c5a:	e8 2e ff ff ff       	call   c0100b8d <parse>
c0100c5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c66:	75 0a                	jne    c0100c72 <runcmd+0x2b>
        return 0;
c0100c68:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c6d:	e9 85 00 00 00       	jmp    c0100cf7 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c79:	eb 5c                	jmp    c0100cd7 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c7b:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c81:	89 d0                	mov    %edx,%eax
c0100c83:	01 c0                	add    %eax,%eax
c0100c85:	01 d0                	add    %edx,%eax
c0100c87:	c1 e0 02             	shl    $0x2,%eax
c0100c8a:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100c8f:	8b 00                	mov    (%eax),%eax
c0100c91:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100c95:	89 04 24             	mov    %eax,(%esp)
c0100c98:	e8 66 c5 00 00       	call   c010d203 <strcmp>
c0100c9d:	85 c0                	test   %eax,%eax
c0100c9f:	75 32                	jne    c0100cd3 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100ca1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ca4:	89 d0                	mov    %edx,%eax
c0100ca6:	01 c0                	add    %eax,%eax
c0100ca8:	01 d0                	add    %edx,%eax
c0100caa:	c1 e0 02             	shl    $0x2,%eax
c0100cad:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100cb2:	8b 40 08             	mov    0x8(%eax),%eax
c0100cb5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100cb8:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100cbb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100cbe:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100cc2:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100cc5:	83 c2 04             	add    $0x4,%edx
c0100cc8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100ccc:	89 0c 24             	mov    %ecx,(%esp)
c0100ccf:	ff d0                	call   *%eax
c0100cd1:	eb 24                	jmp    c0100cf7 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100cd3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cda:	83 f8 02             	cmp    $0x2,%eax
c0100cdd:	76 9c                	jbe    c0100c7b <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cdf:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100ce2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ce6:	c7 04 24 57 d8 10 c0 	movl   $0xc010d857,(%esp)
c0100ced:	e8 66 f6 ff ff       	call   c0100358 <cprintf>
    return 0;
c0100cf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100cf7:	c9                   	leave  
c0100cf8:	c3                   	ret    

c0100cf9 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100cf9:	55                   	push   %ebp
c0100cfa:	89 e5                	mov    %esp,%ebp
c0100cfc:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100cff:	c7 04 24 70 d8 10 c0 	movl   $0xc010d870,(%esp)
c0100d06:	e8 4d f6 ff ff       	call   c0100358 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d0b:	c7 04 24 98 d8 10 c0 	movl   $0xc010d898,(%esp)
c0100d12:	e8 41 f6 ff ff       	call   c0100358 <cprintf>

    if (tf != NULL) {
c0100d17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100d1b:	74 0b                	je     c0100d28 <kmonitor+0x2f>
        print_trapframe(tf);
c0100d1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d20:	89 04 24             	mov    %eax,(%esp)
c0100d23:	e8 a2 16 00 00       	call   c01023ca <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d28:	c7 04 24 bd d8 10 c0 	movl   $0xc010d8bd,(%esp)
c0100d2f:	e8 1b f5 ff ff       	call   c010024f <readline>
c0100d34:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d3b:	74 18                	je     c0100d55 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100d3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d40:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d47:	89 04 24             	mov    %eax,(%esp)
c0100d4a:	e8 f8 fe ff ff       	call   c0100c47 <runcmd>
c0100d4f:	85 c0                	test   %eax,%eax
c0100d51:	79 02                	jns    c0100d55 <kmonitor+0x5c>
                break;
c0100d53:	eb 02                	jmp    c0100d57 <kmonitor+0x5e>
            }
        }
    }
c0100d55:	eb d1                	jmp    c0100d28 <kmonitor+0x2f>
}
c0100d57:	c9                   	leave  
c0100d58:	c3                   	ret    

c0100d59 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d59:	55                   	push   %ebp
c0100d5a:	89 e5                	mov    %esp,%ebp
c0100d5c:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d66:	eb 3f                	jmp    c0100da7 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6b:	89 d0                	mov    %edx,%eax
c0100d6d:	01 c0                	add    %eax,%eax
c0100d6f:	01 d0                	add    %edx,%eax
c0100d71:	c1 e0 02             	shl    $0x2,%eax
c0100d74:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100d79:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d7f:	89 d0                	mov    %edx,%eax
c0100d81:	01 c0                	add    %eax,%eax
c0100d83:	01 d0                	add    %edx,%eax
c0100d85:	c1 e0 02             	shl    $0x2,%eax
c0100d88:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100d8d:	8b 00                	mov    (%eax),%eax
c0100d8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100d93:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d97:	c7 04 24 c1 d8 10 c0 	movl   $0xc010d8c1,(%esp)
c0100d9e:	e8 b5 f5 ff ff       	call   c0100358 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100da3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100daa:	83 f8 02             	cmp    $0x2,%eax
c0100dad:	76 b9                	jbe    c0100d68 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100daf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100db4:	c9                   	leave  
c0100db5:	c3                   	ret    

c0100db6 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100db6:	55                   	push   %ebp
c0100db7:	89 e5                	mov    %esp,%ebp
c0100db9:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100dbc:	e8 c3 fb ff ff       	call   c0100984 <print_kerninfo>
    return 0;
c0100dc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dc6:	c9                   	leave  
c0100dc7:	c3                   	ret    

c0100dc8 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100dc8:	55                   	push   %ebp
c0100dc9:	89 e5                	mov    %esp,%ebp
c0100dcb:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100dce:	e8 fb fc ff ff       	call   c0100ace <print_stackframe>
    return 0;
c0100dd3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd8:	c9                   	leave  
c0100dd9:	c3                   	ret    

c0100dda <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100dda:	55                   	push   %ebp
c0100ddb:	89 e5                	mov    %esp,%ebp
c0100ddd:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100de0:	a1 20 28 1c c0       	mov    0xc01c2820,%eax
c0100de5:	85 c0                	test   %eax,%eax
c0100de7:	74 02                	je     c0100deb <__panic+0x11>
        goto panic_dead;
c0100de9:	eb 48                	jmp    c0100e33 <__panic+0x59>
    }
    is_panic = 1;
c0100deb:	c7 05 20 28 1c c0 01 	movl   $0x1,0xc01c2820
c0100df2:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100df5:	8d 45 14             	lea    0x14(%ebp),%eax
c0100df8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100dfb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100dfe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e02:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e09:	c7 04 24 ca d8 10 c0 	movl   $0xc010d8ca,(%esp)
c0100e10:	e8 43 f5 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e18:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e1c:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e1f:	89 04 24             	mov    %eax,(%esp)
c0100e22:	e8 fe f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e27:	c7 04 24 e6 d8 10 c0 	movl   $0xc010d8e6,(%esp)
c0100e2e:	e8 25 f5 ff ff       	call   c0100358 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100e33:	e8 fa 11 00 00       	call   c0102032 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e38:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e3f:	e8 b5 fe ff ff       	call   c0100cf9 <kmonitor>
    }
c0100e44:	eb f2                	jmp    c0100e38 <__panic+0x5e>

c0100e46 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e46:	55                   	push   %ebp
c0100e47:	89 e5                	mov    %esp,%ebp
c0100e49:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e4c:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e55:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e59:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e60:	c7 04 24 e8 d8 10 c0 	movl   $0xc010d8e8,(%esp)
c0100e67:	e8 ec f4 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e73:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e76:	89 04 24             	mov    %eax,(%esp)
c0100e79:	e8 a7 f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e7e:	c7 04 24 e6 d8 10 c0 	movl   $0xc010d8e6,(%esp)
c0100e85:	e8 ce f4 ff ff       	call   c0100358 <cprintf>
    va_end(ap);
}
c0100e8a:	c9                   	leave  
c0100e8b:	c3                   	ret    

c0100e8c <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100e8c:	55                   	push   %ebp
c0100e8d:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100e8f:	a1 20 28 1c c0       	mov    0xc01c2820,%eax
}
c0100e94:	5d                   	pop    %ebp
c0100e95:	c3                   	ret    

c0100e96 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100e96:	55                   	push   %ebp
c0100e97:	89 e5                	mov    %esp,%ebp
c0100e99:	83 ec 28             	sub    $0x28,%esp
c0100e9c:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100ea2:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ea6:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100eaa:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100eae:	ee                   	out    %al,(%dx)
c0100eaf:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100eb5:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100eb9:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100ebd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100ec1:	ee                   	out    %al,(%dx)
c0100ec2:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100ec8:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100ecc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100ed0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ed4:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ed5:	c7 05 d8 54 1c c0 00 	movl   $0x0,0xc01c54d8
c0100edc:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100edf:	c7 04 24 06 d9 10 c0 	movl   $0xc010d906,(%esp)
c0100ee6:	e8 6d f4 ff ff       	call   c0100358 <cprintf>
    pic_enable(IRQ_TIMER);
c0100eeb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100ef2:	e8 99 11 00 00       	call   c0102090 <pic_enable>
}
c0100ef7:	c9                   	leave  
c0100ef8:	c3                   	ret    

c0100ef9 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ef9:	55                   	push   %ebp
c0100efa:	89 e5                	mov    %esp,%ebp
c0100efc:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100eff:	9c                   	pushf  
c0100f00:	58                   	pop    %eax
c0100f01:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100f07:	25 00 02 00 00       	and    $0x200,%eax
c0100f0c:	85 c0                	test   %eax,%eax
c0100f0e:	74 0c                	je     c0100f1c <__intr_save+0x23>
        intr_disable();
c0100f10:	e8 1d 11 00 00       	call   c0102032 <intr_disable>
        return 1;
c0100f15:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f1a:	eb 05                	jmp    c0100f21 <__intr_save+0x28>
    }
    return 0;
c0100f1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f21:	c9                   	leave  
c0100f22:	c3                   	ret    

c0100f23 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f23:	55                   	push   %ebp
c0100f24:	89 e5                	mov    %esp,%ebp
c0100f26:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f2d:	74 05                	je     c0100f34 <__intr_restore+0x11>
        intr_enable();
c0100f2f:	e8 f8 10 00 00       	call   c010202c <intr_enable>
    }
}
c0100f34:	c9                   	leave  
c0100f35:	c3                   	ret    

c0100f36 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f36:	55                   	push   %ebp
c0100f37:	89 e5                	mov    %esp,%ebp
c0100f39:	83 ec 10             	sub    $0x10,%esp
c0100f3c:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f42:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0100f46:	89 c2                	mov    %eax,%edx
c0100f48:	ec                   	in     (%dx),%al
c0100f49:	88 45 fd             	mov    %al,-0x3(%ebp)
c0100f4c:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0100f52:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f56:	89 c2                	mov    %eax,%edx
c0100f58:	ec                   	in     (%dx),%al
c0100f59:	88 45 f9             	mov    %al,-0x7(%ebp)
c0100f5c:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0100f62:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f66:	89 c2                	mov    %eax,%edx
c0100f68:	ec                   	in     (%dx),%al
c0100f69:	88 45 f5             	mov    %al,-0xb(%ebp)
c0100f6c:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0100f72:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0100f76:	89 c2                	mov    %eax,%edx
c0100f78:	ec                   	in     (%dx),%al
c0100f79:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100f7c:	c9                   	leave  
c0100f7d:	c3                   	ret    

c0100f7e <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100f7e:	55                   	push   %ebp
c0100f7f:	89 e5                	mov    %esp,%ebp
c0100f81:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100f84:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0100f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f8e:	0f b7 00             	movzwl (%eax),%eax
c0100f91:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100f95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f98:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100f9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fa0:	0f b7 00             	movzwl (%eax),%eax
c0100fa3:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100fa7:	74 12                	je     c0100fbb <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fa9:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0100fb0:	66 c7 05 46 28 1c c0 	movw   $0x3b4,0xc01c2846
c0100fb7:	b4 03 
c0100fb9:	eb 13                	jmp    c0100fce <cga_init+0x50>
    } else {
        *cp = was;
c0100fbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fbe:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100fc2:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0100fc5:	66 c7 05 46 28 1c c0 	movw   $0x3d4,0xc01c2846
c0100fcc:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0100fce:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0100fd5:	0f b7 c0             	movzwl %ax,%eax
c0100fd8:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0100fdc:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100fe0:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fe4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fe8:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0100fe9:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0100ff0:	83 c0 01             	add    $0x1,%eax
c0100ff3:	0f b7 c0             	movzwl %ax,%eax
c0100ff6:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100ffa:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0100ffe:	89 c2                	mov    %eax,%edx
c0101000:	ec                   	in     (%dx),%al
c0101001:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101004:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101008:	0f b6 c0             	movzbl %al,%eax
c010100b:	c1 e0 08             	shl    $0x8,%eax
c010100e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101011:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0101018:	0f b7 c0             	movzwl %ax,%eax
c010101b:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010101f:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101023:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101027:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010102b:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010102c:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0101033:	83 c0 01             	add    $0x1,%eax
c0101036:	0f b7 c0             	movzwl %ax,%eax
c0101039:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010103d:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101041:	89 c2                	mov    %eax,%edx
c0101043:	ec                   	in     (%dx),%al
c0101044:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c0101047:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010104b:	0f b6 c0             	movzbl %al,%eax
c010104e:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101051:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101054:	a3 40 28 1c c0       	mov    %eax,0xc01c2840
    crt_pos = pos;
c0101059:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010105c:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
}
c0101062:	c9                   	leave  
c0101063:	c3                   	ret    

c0101064 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101064:	55                   	push   %ebp
c0101065:	89 e5                	mov    %esp,%ebp
c0101067:	83 ec 48             	sub    $0x48,%esp
c010106a:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101070:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101074:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101078:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010107c:	ee                   	out    %al,(%dx)
c010107d:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c0101083:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0101087:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010108b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010108f:	ee                   	out    %al,(%dx)
c0101090:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c0101096:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c010109a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010109e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01010a2:	ee                   	out    %al,(%dx)
c01010a3:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01010a9:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01010ad:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01010b1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01010b5:	ee                   	out    %al,(%dx)
c01010b6:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01010bc:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01010c0:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01010c4:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01010c8:	ee                   	out    %al,(%dx)
c01010c9:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01010cf:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01010d3:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01010d7:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01010db:	ee                   	out    %al,(%dx)
c01010dc:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01010e2:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01010e6:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01010ea:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01010ee:	ee                   	out    %al,(%dx)
c01010ef:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010f5:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01010f9:	89 c2                	mov    %eax,%edx
c01010fb:	ec                   	in     (%dx),%al
c01010fc:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01010ff:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101103:	3c ff                	cmp    $0xff,%al
c0101105:	0f 95 c0             	setne  %al
c0101108:	0f b6 c0             	movzbl %al,%eax
c010110b:	a3 48 28 1c c0       	mov    %eax,0xc01c2848
c0101110:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101116:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c010111a:	89 c2                	mov    %eax,%edx
c010111c:	ec                   	in     (%dx),%al
c010111d:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101120:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c0101126:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c010112a:	89 c2                	mov    %eax,%edx
c010112c:	ec                   	in     (%dx),%al
c010112d:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101130:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
c0101135:	85 c0                	test   %eax,%eax
c0101137:	74 0c                	je     c0101145 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101139:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101140:	e8 4b 0f 00 00       	call   c0102090 <pic_enable>
    }
}
c0101145:	c9                   	leave  
c0101146:	c3                   	ret    

c0101147 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101147:	55                   	push   %ebp
c0101148:	89 e5                	mov    %esp,%ebp
c010114a:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010114d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101154:	eb 09                	jmp    c010115f <lpt_putc_sub+0x18>
        delay();
c0101156:	e8 db fd ff ff       	call   c0100f36 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010115b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010115f:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c0101165:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101169:	89 c2                	mov    %eax,%edx
c010116b:	ec                   	in     (%dx),%al
c010116c:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010116f:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101173:	84 c0                	test   %al,%al
c0101175:	78 09                	js     c0101180 <lpt_putc_sub+0x39>
c0101177:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010117e:	7e d6                	jle    c0101156 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101180:	8b 45 08             	mov    0x8(%ebp),%eax
c0101183:	0f b6 c0             	movzbl %al,%eax
c0101186:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c010118c:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010118f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101193:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101197:	ee                   	out    %al,(%dx)
c0101198:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c010119e:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01011a2:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011a6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011aa:	ee                   	out    %al,(%dx)
c01011ab:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01011b1:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01011b5:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011b9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011bd:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01011be:	c9                   	leave  
c01011bf:	c3                   	ret    

c01011c0 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01011c0:	55                   	push   %ebp
c01011c1:	89 e5                	mov    %esp,%ebp
c01011c3:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01011c6:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01011ca:	74 0d                	je     c01011d9 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01011cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01011cf:	89 04 24             	mov    %eax,(%esp)
c01011d2:	e8 70 ff ff ff       	call   c0101147 <lpt_putc_sub>
c01011d7:	eb 24                	jmp    c01011fd <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01011d9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011e0:	e8 62 ff ff ff       	call   c0101147 <lpt_putc_sub>
        lpt_putc_sub(' ');
c01011e5:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01011ec:	e8 56 ff ff ff       	call   c0101147 <lpt_putc_sub>
        lpt_putc_sub('\b');
c01011f1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011f8:	e8 4a ff ff ff       	call   c0101147 <lpt_putc_sub>
    }
}
c01011fd:	c9                   	leave  
c01011fe:	c3                   	ret    

c01011ff <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01011ff:	55                   	push   %ebp
c0101200:	89 e5                	mov    %esp,%ebp
c0101202:	53                   	push   %ebx
c0101203:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101206:	8b 45 08             	mov    0x8(%ebp),%eax
c0101209:	b0 00                	mov    $0x0,%al
c010120b:	85 c0                	test   %eax,%eax
c010120d:	75 07                	jne    c0101216 <cga_putc+0x17>
        c |= 0x0700;
c010120f:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101216:	8b 45 08             	mov    0x8(%ebp),%eax
c0101219:	0f b6 c0             	movzbl %al,%eax
c010121c:	83 f8 0a             	cmp    $0xa,%eax
c010121f:	74 4c                	je     c010126d <cga_putc+0x6e>
c0101221:	83 f8 0d             	cmp    $0xd,%eax
c0101224:	74 57                	je     c010127d <cga_putc+0x7e>
c0101226:	83 f8 08             	cmp    $0x8,%eax
c0101229:	0f 85 88 00 00 00    	jne    c01012b7 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c010122f:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c0101236:	66 85 c0             	test   %ax,%ax
c0101239:	74 30                	je     c010126b <cga_putc+0x6c>
            crt_pos --;
c010123b:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c0101242:	83 e8 01             	sub    $0x1,%eax
c0101245:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c010124b:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c0101250:	0f b7 15 44 28 1c c0 	movzwl 0xc01c2844,%edx
c0101257:	0f b7 d2             	movzwl %dx,%edx
c010125a:	01 d2                	add    %edx,%edx
c010125c:	01 c2                	add    %eax,%edx
c010125e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101261:	b0 00                	mov    $0x0,%al
c0101263:	83 c8 20             	or     $0x20,%eax
c0101266:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101269:	eb 72                	jmp    c01012dd <cga_putc+0xde>
c010126b:	eb 70                	jmp    c01012dd <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c010126d:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c0101274:	83 c0 50             	add    $0x50,%eax
c0101277:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c010127d:	0f b7 1d 44 28 1c c0 	movzwl 0xc01c2844,%ebx
c0101284:	0f b7 0d 44 28 1c c0 	movzwl 0xc01c2844,%ecx
c010128b:	0f b7 c1             	movzwl %cx,%eax
c010128e:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101294:	c1 e8 10             	shr    $0x10,%eax
c0101297:	89 c2                	mov    %eax,%edx
c0101299:	66 c1 ea 06          	shr    $0x6,%dx
c010129d:	89 d0                	mov    %edx,%eax
c010129f:	c1 e0 02             	shl    $0x2,%eax
c01012a2:	01 d0                	add    %edx,%eax
c01012a4:	c1 e0 04             	shl    $0x4,%eax
c01012a7:	29 c1                	sub    %eax,%ecx
c01012a9:	89 ca                	mov    %ecx,%edx
c01012ab:	89 d8                	mov    %ebx,%eax
c01012ad:	29 d0                	sub    %edx,%eax
c01012af:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
        break;
c01012b5:	eb 26                	jmp    c01012dd <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01012b7:	8b 0d 40 28 1c c0    	mov    0xc01c2840,%ecx
c01012bd:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c01012c4:	8d 50 01             	lea    0x1(%eax),%edx
c01012c7:	66 89 15 44 28 1c c0 	mov    %dx,0xc01c2844
c01012ce:	0f b7 c0             	movzwl %ax,%eax
c01012d1:	01 c0                	add    %eax,%eax
c01012d3:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01012d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01012d9:	66 89 02             	mov    %ax,(%edx)
        break;
c01012dc:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01012dd:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c01012e4:	66 3d cf 07          	cmp    $0x7cf,%ax
c01012e8:	76 5b                	jbe    c0101345 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01012ea:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c01012ef:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01012f5:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c01012fa:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101301:	00 
c0101302:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101306:	89 04 24             	mov    %eax,(%esp)
c0101309:	e8 92 c1 00 00       	call   c010d4a0 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010130e:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101315:	eb 15                	jmp    c010132c <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101317:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c010131c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010131f:	01 d2                	add    %edx,%edx
c0101321:	01 d0                	add    %edx,%eax
c0101323:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101328:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010132c:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101333:	7e e2                	jle    c0101317 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101335:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c010133c:	83 e8 50             	sub    $0x50,%eax
c010133f:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101345:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c010134c:	0f b7 c0             	movzwl %ax,%eax
c010134f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101353:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c0101357:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010135b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010135f:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101360:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c0101367:	66 c1 e8 08          	shr    $0x8,%ax
c010136b:	0f b6 c0             	movzbl %al,%eax
c010136e:	0f b7 15 46 28 1c c0 	movzwl 0xc01c2846,%edx
c0101375:	83 c2 01             	add    $0x1,%edx
c0101378:	0f b7 d2             	movzwl %dx,%edx
c010137b:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c010137f:	88 45 ed             	mov    %al,-0x13(%ebp)
c0101382:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101386:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010138a:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c010138b:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0101392:	0f b7 c0             	movzwl %ax,%eax
c0101395:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101399:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c010139d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01013a1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01013a5:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c01013a6:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c01013ad:	0f b6 c0             	movzbl %al,%eax
c01013b0:	0f b7 15 46 28 1c c0 	movzwl 0xc01c2846,%edx
c01013b7:	83 c2 01             	add    $0x1,%edx
c01013ba:	0f b7 d2             	movzwl %dx,%edx
c01013bd:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01013c1:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01013c4:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01013c8:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01013cc:	ee                   	out    %al,(%dx)
}
c01013cd:	83 c4 34             	add    $0x34,%esp
c01013d0:	5b                   	pop    %ebx
c01013d1:	5d                   	pop    %ebp
c01013d2:	c3                   	ret    

c01013d3 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01013d3:	55                   	push   %ebp
c01013d4:	89 e5                	mov    %esp,%ebp
c01013d6:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01013e0:	eb 09                	jmp    c01013eb <serial_putc_sub+0x18>
        delay();
c01013e2:	e8 4f fb ff ff       	call   c0100f36 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013e7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01013eb:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01013f1:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01013f5:	89 c2                	mov    %eax,%edx
c01013f7:	ec                   	in     (%dx),%al
c01013f8:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01013fb:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01013ff:	0f b6 c0             	movzbl %al,%eax
c0101402:	83 e0 20             	and    $0x20,%eax
c0101405:	85 c0                	test   %eax,%eax
c0101407:	75 09                	jne    c0101412 <serial_putc_sub+0x3f>
c0101409:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101410:	7e d0                	jle    c01013e2 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101412:	8b 45 08             	mov    0x8(%ebp),%eax
c0101415:	0f b6 c0             	movzbl %al,%eax
c0101418:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c010141e:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101421:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101425:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101429:	ee                   	out    %al,(%dx)
}
c010142a:	c9                   	leave  
c010142b:	c3                   	ret    

c010142c <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c010142c:	55                   	push   %ebp
c010142d:	89 e5                	mov    %esp,%ebp
c010142f:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101432:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101436:	74 0d                	je     c0101445 <serial_putc+0x19>
        serial_putc_sub(c);
c0101438:	8b 45 08             	mov    0x8(%ebp),%eax
c010143b:	89 04 24             	mov    %eax,(%esp)
c010143e:	e8 90 ff ff ff       	call   c01013d3 <serial_putc_sub>
c0101443:	eb 24                	jmp    c0101469 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c0101445:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010144c:	e8 82 ff ff ff       	call   c01013d3 <serial_putc_sub>
        serial_putc_sub(' ');
c0101451:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101458:	e8 76 ff ff ff       	call   c01013d3 <serial_putc_sub>
        serial_putc_sub('\b');
c010145d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101464:	e8 6a ff ff ff       	call   c01013d3 <serial_putc_sub>
    }
}
c0101469:	c9                   	leave  
c010146a:	c3                   	ret    

c010146b <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c010146b:	55                   	push   %ebp
c010146c:	89 e5                	mov    %esp,%ebp
c010146e:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101471:	eb 33                	jmp    c01014a6 <cons_intr+0x3b>
        if (c != 0) {
c0101473:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101477:	74 2d                	je     c01014a6 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101479:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
c010147e:	8d 50 01             	lea    0x1(%eax),%edx
c0101481:	89 15 64 2a 1c c0    	mov    %edx,0xc01c2a64
c0101487:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010148a:	88 90 60 28 1c c0    	mov    %dl,-0x3fe3d7a0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101490:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
c0101495:	3d 00 02 00 00       	cmp    $0x200,%eax
c010149a:	75 0a                	jne    c01014a6 <cons_intr+0x3b>
                cons.wpos = 0;
c010149c:	c7 05 64 2a 1c c0 00 	movl   $0x0,0xc01c2a64
c01014a3:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c01014a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01014a9:	ff d0                	call   *%eax
c01014ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01014ae:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01014b2:	75 bf                	jne    c0101473 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01014b4:	c9                   	leave  
c01014b5:	c3                   	ret    

c01014b6 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01014b6:	55                   	push   %ebp
c01014b7:	89 e5                	mov    %esp,%ebp
c01014b9:	83 ec 10             	sub    $0x10,%esp
c01014bc:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014c2:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014c6:	89 c2                	mov    %eax,%edx
c01014c8:	ec                   	in     (%dx),%al
c01014c9:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014cc:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01014d0:	0f b6 c0             	movzbl %al,%eax
c01014d3:	83 e0 01             	and    $0x1,%eax
c01014d6:	85 c0                	test   %eax,%eax
c01014d8:	75 07                	jne    c01014e1 <serial_proc_data+0x2b>
        return -1;
c01014da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01014df:	eb 2a                	jmp    c010150b <serial_proc_data+0x55>
c01014e1:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01014eb:	89 c2                	mov    %eax,%edx
c01014ed:	ec                   	in     (%dx),%al
c01014ee:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01014f1:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01014f5:	0f b6 c0             	movzbl %al,%eax
c01014f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01014fb:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01014ff:	75 07                	jne    c0101508 <serial_proc_data+0x52>
        c = '\b';
c0101501:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101508:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010150b:	c9                   	leave  
c010150c:	c3                   	ret    

c010150d <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c010150d:	55                   	push   %ebp
c010150e:	89 e5                	mov    %esp,%ebp
c0101510:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0101513:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
c0101518:	85 c0                	test   %eax,%eax
c010151a:	74 0c                	je     c0101528 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c010151c:	c7 04 24 b6 14 10 c0 	movl   $0xc01014b6,(%esp)
c0101523:	e8 43 ff ff ff       	call   c010146b <cons_intr>
    }
}
c0101528:	c9                   	leave  
c0101529:	c3                   	ret    

c010152a <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c010152a:	55                   	push   %ebp
c010152b:	89 e5                	mov    %esp,%ebp
c010152d:	83 ec 38             	sub    $0x38,%esp
c0101530:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101536:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010153a:	89 c2                	mov    %eax,%edx
c010153c:	ec                   	in     (%dx),%al
c010153d:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101540:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101544:	0f b6 c0             	movzbl %al,%eax
c0101547:	83 e0 01             	and    $0x1,%eax
c010154a:	85 c0                	test   %eax,%eax
c010154c:	75 0a                	jne    c0101558 <kbd_proc_data+0x2e>
        return -1;
c010154e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101553:	e9 59 01 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
c0101558:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010155e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101562:	89 c2                	mov    %eax,%edx
c0101564:	ec                   	in     (%dx),%al
c0101565:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101568:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c010156c:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c010156f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101573:	75 17                	jne    c010158c <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101575:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c010157a:	83 c8 40             	or     $0x40,%eax
c010157d:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
        return 0;
c0101582:	b8 00 00 00 00       	mov    $0x0,%eax
c0101587:	e9 25 01 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c010158c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101590:	84 c0                	test   %al,%al
c0101592:	79 47                	jns    c01015db <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101594:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101599:	83 e0 40             	and    $0x40,%eax
c010159c:	85 c0                	test   %eax,%eax
c010159e:	75 09                	jne    c01015a9 <kbd_proc_data+0x7f>
c01015a0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015a4:	83 e0 7f             	and    $0x7f,%eax
c01015a7:	eb 04                	jmp    c01015ad <kbd_proc_data+0x83>
c01015a9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015ad:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01015b0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015b4:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
c01015bb:	83 c8 40             	or     $0x40,%eax
c01015be:	0f b6 c0             	movzbl %al,%eax
c01015c1:	f7 d0                	not    %eax
c01015c3:	89 c2                	mov    %eax,%edx
c01015c5:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c01015ca:	21 d0                	and    %edx,%eax
c01015cc:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
        return 0;
c01015d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01015d6:	e9 d6 00 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01015db:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c01015e0:	83 e0 40             	and    $0x40,%eax
c01015e3:	85 c0                	test   %eax,%eax
c01015e5:	74 11                	je     c01015f8 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01015e7:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01015eb:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c01015f0:	83 e0 bf             	and    $0xffffffbf,%eax
c01015f3:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
    }

    shift |= shiftcode[data];
c01015f8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015fc:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
c0101603:	0f b6 d0             	movzbl %al,%edx
c0101606:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c010160b:	09 d0                	or     %edx,%eax
c010160d:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
    shift ^= togglecode[data];
c0101612:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101616:	0f b6 80 60 11 13 c0 	movzbl -0x3feceea0(%eax),%eax
c010161d:	0f b6 d0             	movzbl %al,%edx
c0101620:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101625:	31 d0                	xor    %edx,%eax
c0101627:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68

    c = charcode[shift & (CTL | SHIFT)][data];
c010162c:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101631:	83 e0 03             	and    $0x3,%eax
c0101634:	8b 14 85 60 15 13 c0 	mov    -0x3feceaa0(,%eax,4),%edx
c010163b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010163f:	01 d0                	add    %edx,%eax
c0101641:	0f b6 00             	movzbl (%eax),%eax
c0101644:	0f b6 c0             	movzbl %al,%eax
c0101647:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c010164a:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c010164f:	83 e0 08             	and    $0x8,%eax
c0101652:	85 c0                	test   %eax,%eax
c0101654:	74 22                	je     c0101678 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101656:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c010165a:	7e 0c                	jle    c0101668 <kbd_proc_data+0x13e>
c010165c:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101660:	7f 06                	jg     c0101668 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101662:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101666:	eb 10                	jmp    c0101678 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101668:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c010166c:	7e 0a                	jle    c0101678 <kbd_proc_data+0x14e>
c010166e:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101672:	7f 04                	jg     c0101678 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101674:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101678:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c010167d:	f7 d0                	not    %eax
c010167f:	83 e0 06             	and    $0x6,%eax
c0101682:	85 c0                	test   %eax,%eax
c0101684:	75 28                	jne    c01016ae <kbd_proc_data+0x184>
c0101686:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c010168d:	75 1f                	jne    c01016ae <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c010168f:	c7 04 24 21 d9 10 c0 	movl   $0xc010d921,(%esp)
c0101696:	e8 bd ec ff ff       	call   c0100358 <cprintf>
c010169b:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c01016a1:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016a5:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01016a9:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01016ad:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01016ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016b1:	c9                   	leave  
c01016b2:	c3                   	ret    

c01016b3 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01016b3:	55                   	push   %ebp
c01016b4:	89 e5                	mov    %esp,%ebp
c01016b6:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01016b9:	c7 04 24 2a 15 10 c0 	movl   $0xc010152a,(%esp)
c01016c0:	e8 a6 fd ff ff       	call   c010146b <cons_intr>
}
c01016c5:	c9                   	leave  
c01016c6:	c3                   	ret    

c01016c7 <kbd_init>:

static void
kbd_init(void) {
c01016c7:	55                   	push   %ebp
c01016c8:	89 e5                	mov    %esp,%ebp
c01016ca:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01016cd:	e8 e1 ff ff ff       	call   c01016b3 <kbd_intr>
    pic_enable(IRQ_KBD);
c01016d2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01016d9:	e8 b2 09 00 00       	call   c0102090 <pic_enable>
}
c01016de:	c9                   	leave  
c01016df:	c3                   	ret    

c01016e0 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01016e0:	55                   	push   %ebp
c01016e1:	89 e5                	mov    %esp,%ebp
c01016e3:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01016e6:	e8 93 f8 ff ff       	call   c0100f7e <cga_init>
    serial_init();
c01016eb:	e8 74 f9 ff ff       	call   c0101064 <serial_init>
    kbd_init();
c01016f0:	e8 d2 ff ff ff       	call   c01016c7 <kbd_init>
    if (!serial_exists) {
c01016f5:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
c01016fa:	85 c0                	test   %eax,%eax
c01016fc:	75 0c                	jne    c010170a <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01016fe:	c7 04 24 2d d9 10 c0 	movl   $0xc010d92d,(%esp)
c0101705:	e8 4e ec ff ff       	call   c0100358 <cprintf>
    }
}
c010170a:	c9                   	leave  
c010170b:	c3                   	ret    

c010170c <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c010170c:	55                   	push   %ebp
c010170d:	89 e5                	mov    %esp,%ebp
c010170f:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101712:	e8 e2 f7 ff ff       	call   c0100ef9 <__intr_save>
c0101717:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c010171a:	8b 45 08             	mov    0x8(%ebp),%eax
c010171d:	89 04 24             	mov    %eax,(%esp)
c0101720:	e8 9b fa ff ff       	call   c01011c0 <lpt_putc>
        cga_putc(c);
c0101725:	8b 45 08             	mov    0x8(%ebp),%eax
c0101728:	89 04 24             	mov    %eax,(%esp)
c010172b:	e8 cf fa ff ff       	call   c01011ff <cga_putc>
        serial_putc(c);
c0101730:	8b 45 08             	mov    0x8(%ebp),%eax
c0101733:	89 04 24             	mov    %eax,(%esp)
c0101736:	e8 f1 fc ff ff       	call   c010142c <serial_putc>
    }
    local_intr_restore(intr_flag);
c010173b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010173e:	89 04 24             	mov    %eax,(%esp)
c0101741:	e8 dd f7 ff ff       	call   c0100f23 <__intr_restore>
}
c0101746:	c9                   	leave  
c0101747:	c3                   	ret    

c0101748 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101748:	55                   	push   %ebp
c0101749:	89 e5                	mov    %esp,%ebp
c010174b:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c010174e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101755:	e8 9f f7 ff ff       	call   c0100ef9 <__intr_save>
c010175a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c010175d:	e8 ab fd ff ff       	call   c010150d <serial_intr>
        kbd_intr();
c0101762:	e8 4c ff ff ff       	call   c01016b3 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101767:	8b 15 60 2a 1c c0    	mov    0xc01c2a60,%edx
c010176d:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
c0101772:	39 c2                	cmp    %eax,%edx
c0101774:	74 31                	je     c01017a7 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101776:	a1 60 2a 1c c0       	mov    0xc01c2a60,%eax
c010177b:	8d 50 01             	lea    0x1(%eax),%edx
c010177e:	89 15 60 2a 1c c0    	mov    %edx,0xc01c2a60
c0101784:	0f b6 80 60 28 1c c0 	movzbl -0x3fe3d7a0(%eax),%eax
c010178b:	0f b6 c0             	movzbl %al,%eax
c010178e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101791:	a1 60 2a 1c c0       	mov    0xc01c2a60,%eax
c0101796:	3d 00 02 00 00       	cmp    $0x200,%eax
c010179b:	75 0a                	jne    c01017a7 <cons_getc+0x5f>
                cons.rpos = 0;
c010179d:	c7 05 60 2a 1c c0 00 	movl   $0x0,0xc01c2a60
c01017a4:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01017a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017aa:	89 04 24             	mov    %eax,(%esp)
c01017ad:	e8 71 f7 ff ff       	call   c0100f23 <__intr_restore>
    return c;
c01017b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017b5:	c9                   	leave  
c01017b6:	c3                   	ret    

c01017b7 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01017b7:	55                   	push   %ebp
c01017b8:	89 e5                	mov    %esp,%ebp
c01017ba:	83 ec 14             	sub    $0x14,%esp
c01017bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01017c0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01017c4:	90                   	nop
c01017c5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01017c9:	83 c0 07             	add    $0x7,%eax
c01017cc:	0f b7 c0             	movzwl %ax,%eax
c01017cf:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01017d3:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01017d7:	89 c2                	mov    %eax,%edx
c01017d9:	ec                   	in     (%dx),%al
c01017da:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01017dd:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01017e1:	0f b6 c0             	movzbl %al,%eax
c01017e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01017e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ea:	25 80 00 00 00       	and    $0x80,%eax
c01017ef:	85 c0                	test   %eax,%eax
c01017f1:	75 d2                	jne    c01017c5 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01017f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01017f7:	74 11                	je     c010180a <ide_wait_ready+0x53>
c01017f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017fc:	83 e0 21             	and    $0x21,%eax
c01017ff:	85 c0                	test   %eax,%eax
c0101801:	74 07                	je     c010180a <ide_wait_ready+0x53>
        return -1;
c0101803:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101808:	eb 05                	jmp    c010180f <ide_wait_ready+0x58>
    }
    return 0;
c010180a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010180f:	c9                   	leave  
c0101810:	c3                   	ret    

c0101811 <ide_init>:

void
ide_init(void) {
c0101811:	55                   	push   %ebp
c0101812:	89 e5                	mov    %esp,%ebp
c0101814:	57                   	push   %edi
c0101815:	53                   	push   %ebx
c0101816:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c010181c:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0101822:	e9 d6 02 00 00       	jmp    c0101afd <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0101827:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010182b:	c1 e0 03             	shl    $0x3,%eax
c010182e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101835:	29 c2                	sub    %eax,%edx
c0101837:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c010183d:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101840:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101844:	66 d1 e8             	shr    %ax
c0101847:	0f b7 c0             	movzwl %ax,%eax
c010184a:	0f b7 04 85 4c d9 10 	movzwl -0x3fef26b4(,%eax,4),%eax
c0101851:	c0 
c0101852:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0101856:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010185a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101861:	00 
c0101862:	89 04 24             	mov    %eax,(%esp)
c0101865:	e8 4d ff ff ff       	call   c01017b7 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c010186a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010186e:	83 e0 01             	and    $0x1,%eax
c0101871:	c1 e0 04             	shl    $0x4,%eax
c0101874:	83 c8 e0             	or     $0xffffffe0,%eax
c0101877:	0f b6 c0             	movzbl %al,%eax
c010187a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010187e:	83 c2 06             	add    $0x6,%edx
c0101881:	0f b7 d2             	movzwl %dx,%edx
c0101884:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101888:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010188b:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010188f:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101893:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101894:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101898:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010189f:	00 
c01018a0:	89 04 24             	mov    %eax,(%esp)
c01018a3:	e8 0f ff ff ff       	call   c01017b7 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01018a8:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018ac:	83 c0 07             	add    $0x7,%eax
c01018af:	0f b7 c0             	movzwl %ax,%eax
c01018b2:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01018b6:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01018ba:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01018be:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01018c2:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01018c3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018ce:	00 
c01018cf:	89 04 24             	mov    %eax,(%esp)
c01018d2:	e8 e0 fe ff ff       	call   c01017b7 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01018d7:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018db:	83 c0 07             	add    $0x7,%eax
c01018de:	0f b7 c0             	movzwl %ax,%eax
c01018e1:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018e5:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01018e9:	89 c2                	mov    %eax,%edx
c01018eb:	ec                   	in     (%dx),%al
c01018ec:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01018ef:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01018f3:	84 c0                	test   %al,%al
c01018f5:	0f 84 f7 01 00 00    	je     c0101af2 <ide_init+0x2e1>
c01018fb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018ff:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101906:	00 
c0101907:	89 04 24             	mov    %eax,(%esp)
c010190a:	e8 a8 fe ff ff       	call   c01017b7 <ide_wait_ready>
c010190f:	85 c0                	test   %eax,%eax
c0101911:	0f 85 db 01 00 00    	jne    c0101af2 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101917:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010191b:	c1 e0 03             	shl    $0x3,%eax
c010191e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101925:	29 c2                	sub    %eax,%edx
c0101927:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c010192d:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101930:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101934:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101937:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010193d:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101940:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101947:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010194a:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010194d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101950:	89 cb                	mov    %ecx,%ebx
c0101952:	89 df                	mov    %ebx,%edi
c0101954:	89 c1                	mov    %eax,%ecx
c0101956:	fc                   	cld    
c0101957:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101959:	89 c8                	mov    %ecx,%eax
c010195b:	89 fb                	mov    %edi,%ebx
c010195d:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101960:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101963:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101969:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c010196c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010196f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101975:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101978:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010197b:	25 00 00 00 04       	and    $0x4000000,%eax
c0101980:	85 c0                	test   %eax,%eax
c0101982:	74 0e                	je     c0101992 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101984:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101987:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010198d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101990:	eb 09                	jmp    c010199b <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101992:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101995:	8b 40 78             	mov    0x78(%eax),%eax
c0101998:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010199b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010199f:	c1 e0 03             	shl    $0x3,%eax
c01019a2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019a9:	29 c2                	sub    %eax,%edx
c01019ab:	81 c2 80 2a 1c c0    	add    $0xc01c2a80,%edx
c01019b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01019b4:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c01019b7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019bb:	c1 e0 03             	shl    $0x3,%eax
c01019be:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019c5:	29 c2                	sub    %eax,%edx
c01019c7:	81 c2 80 2a 1c c0    	add    $0xc01c2a80,%edx
c01019cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019d0:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01019d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019d6:	83 c0 62             	add    $0x62,%eax
c01019d9:	0f b7 00             	movzwl (%eax),%eax
c01019dc:	0f b7 c0             	movzwl %ax,%eax
c01019df:	25 00 02 00 00       	and    $0x200,%eax
c01019e4:	85 c0                	test   %eax,%eax
c01019e6:	75 24                	jne    c0101a0c <ide_init+0x1fb>
c01019e8:	c7 44 24 0c 54 d9 10 	movl   $0xc010d954,0xc(%esp)
c01019ef:	c0 
c01019f0:	c7 44 24 08 97 d9 10 	movl   $0xc010d997,0x8(%esp)
c01019f7:	c0 
c01019f8:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01019ff:	00 
c0101a00:	c7 04 24 ac d9 10 c0 	movl   $0xc010d9ac,(%esp)
c0101a07:	e8 ce f3 ff ff       	call   c0100dda <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101a0c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a10:	c1 e0 03             	shl    $0x3,%eax
c0101a13:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a1a:	29 c2                	sub    %eax,%edx
c0101a1c:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101a22:	83 c0 0c             	add    $0xc,%eax
c0101a25:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101a28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a2b:	83 c0 36             	add    $0x36,%eax
c0101a2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101a31:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101a38:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101a3f:	eb 34                	jmp    c0101a75 <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101a41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a44:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a47:	01 c2                	add    %eax,%edx
c0101a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a4c:	8d 48 01             	lea    0x1(%eax),%ecx
c0101a4f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101a52:	01 c8                	add    %ecx,%eax
c0101a54:	0f b6 00             	movzbl (%eax),%eax
c0101a57:	88 02                	mov    %al,(%edx)
c0101a59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a5c:	8d 50 01             	lea    0x1(%eax),%edx
c0101a5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101a62:	01 c2                	add    %eax,%edx
c0101a64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a67:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101a6a:	01 c8                	add    %ecx,%eax
c0101a6c:	0f b6 00             	movzbl (%eax),%eax
c0101a6f:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101a71:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101a75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a78:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101a7b:	72 c4                	jb     c0101a41 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101a7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a80:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a83:	01 d0                	add    %edx,%eax
c0101a85:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101a88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a8b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101a8e:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101a91:	85 c0                	test   %eax,%eax
c0101a93:	74 0f                	je     c0101aa4 <ide_init+0x293>
c0101a95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a98:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a9b:	01 d0                	add    %edx,%eax
c0101a9d:	0f b6 00             	movzbl (%eax),%eax
c0101aa0:	3c 20                	cmp    $0x20,%al
c0101aa2:	74 d9                	je     c0101a7d <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101aa4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101aa8:	c1 e0 03             	shl    $0x3,%eax
c0101aab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ab2:	29 c2                	sub    %eax,%edx
c0101ab4:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101aba:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101abd:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ac1:	c1 e0 03             	shl    $0x3,%eax
c0101ac4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101acb:	29 c2                	sub    %eax,%edx
c0101acd:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101ad3:	8b 50 08             	mov    0x8(%eax),%edx
c0101ad6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ada:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101ade:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101ae2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ae6:	c7 04 24 be d9 10 c0 	movl   $0xc010d9be,(%esp)
c0101aed:	e8 66 e8 ff ff       	call   c0100358 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101af2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101af6:	83 c0 01             	add    $0x1,%eax
c0101af9:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101afd:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101b02:	0f 86 1f fd ff ff    	jbe    c0101827 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101b08:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101b0f:	e8 7c 05 00 00       	call   c0102090 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101b14:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101b1b:	e8 70 05 00 00       	call   c0102090 <pic_enable>
}
c0101b20:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101b26:	5b                   	pop    %ebx
c0101b27:	5f                   	pop    %edi
c0101b28:	5d                   	pop    %ebp
c0101b29:	c3                   	ret    

c0101b2a <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101b2a:	55                   	push   %ebp
c0101b2b:	89 e5                	mov    %esp,%ebp
c0101b2d:	83 ec 04             	sub    $0x4,%esp
c0101b30:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b33:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101b37:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101b3c:	77 24                	ja     c0101b62 <ide_device_valid+0x38>
c0101b3e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b42:	c1 e0 03             	shl    $0x3,%eax
c0101b45:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b4c:	29 c2                	sub    %eax,%edx
c0101b4e:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101b54:	0f b6 00             	movzbl (%eax),%eax
c0101b57:	84 c0                	test   %al,%al
c0101b59:	74 07                	je     c0101b62 <ide_device_valid+0x38>
c0101b5b:	b8 01 00 00 00       	mov    $0x1,%eax
c0101b60:	eb 05                	jmp    c0101b67 <ide_device_valid+0x3d>
c0101b62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101b67:	c9                   	leave  
c0101b68:	c3                   	ret    

c0101b69 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101b69:	55                   	push   %ebp
c0101b6a:	89 e5                	mov    %esp,%ebp
c0101b6c:	83 ec 08             	sub    $0x8,%esp
c0101b6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b72:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101b76:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b7a:	89 04 24             	mov    %eax,(%esp)
c0101b7d:	e8 a8 ff ff ff       	call   c0101b2a <ide_device_valid>
c0101b82:	85 c0                	test   %eax,%eax
c0101b84:	74 1b                	je     c0101ba1 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101b86:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b8a:	c1 e0 03             	shl    $0x3,%eax
c0101b8d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b94:	29 c2                	sub    %eax,%edx
c0101b96:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101b9c:	8b 40 08             	mov    0x8(%eax),%eax
c0101b9f:	eb 05                	jmp    c0101ba6 <ide_device_size+0x3d>
    }
    return 0;
c0101ba1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101ba6:	c9                   	leave  
c0101ba7:	c3                   	ret    

c0101ba8 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ba8:	55                   	push   %ebp
c0101ba9:	89 e5                	mov    %esp,%ebp
c0101bab:	57                   	push   %edi
c0101bac:	53                   	push   %ebx
c0101bad:	83 ec 50             	sub    $0x50,%esp
c0101bb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bb3:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101bb7:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101bbe:	77 24                	ja     c0101be4 <ide_read_secs+0x3c>
c0101bc0:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101bc5:	77 1d                	ja     c0101be4 <ide_read_secs+0x3c>
c0101bc7:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101bcb:	c1 e0 03             	shl    $0x3,%eax
c0101bce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bd5:	29 c2                	sub    %eax,%edx
c0101bd7:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101bdd:	0f b6 00             	movzbl (%eax),%eax
c0101be0:	84 c0                	test   %al,%al
c0101be2:	75 24                	jne    c0101c08 <ide_read_secs+0x60>
c0101be4:	c7 44 24 0c dc d9 10 	movl   $0xc010d9dc,0xc(%esp)
c0101beb:	c0 
c0101bec:	c7 44 24 08 97 d9 10 	movl   $0xc010d997,0x8(%esp)
c0101bf3:	c0 
c0101bf4:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101bfb:	00 
c0101bfc:	c7 04 24 ac d9 10 c0 	movl   $0xc010d9ac,(%esp)
c0101c03:	e8 d2 f1 ff ff       	call   c0100dda <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101c08:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101c0f:	77 0f                	ja     c0101c20 <ide_read_secs+0x78>
c0101c11:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c14:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101c17:	01 d0                	add    %edx,%eax
c0101c19:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101c1e:	76 24                	jbe    c0101c44 <ide_read_secs+0x9c>
c0101c20:	c7 44 24 0c 04 da 10 	movl   $0xc010da04,0xc(%esp)
c0101c27:	c0 
c0101c28:	c7 44 24 08 97 d9 10 	movl   $0xc010d997,0x8(%esp)
c0101c2f:	c0 
c0101c30:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101c37:	00 
c0101c38:	c7 04 24 ac d9 10 c0 	movl   $0xc010d9ac,(%esp)
c0101c3f:	e8 96 f1 ff ff       	call   c0100dda <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101c44:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c48:	66 d1 e8             	shr    %ax
c0101c4b:	0f b7 c0             	movzwl %ax,%eax
c0101c4e:	0f b7 04 85 4c d9 10 	movzwl -0x3fef26b4(,%eax,4),%eax
c0101c55:	c0 
c0101c56:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101c5a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c5e:	66 d1 e8             	shr    %ax
c0101c61:	0f b7 c0             	movzwl %ax,%eax
c0101c64:	0f b7 04 85 4e d9 10 	movzwl -0x3fef26b2(,%eax,4),%eax
c0101c6b:	c0 
c0101c6c:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101c70:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101c74:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101c7b:	00 
c0101c7c:	89 04 24             	mov    %eax,(%esp)
c0101c7f:	e8 33 fb ff ff       	call   c01017b7 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101c84:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101c88:	83 c0 02             	add    $0x2,%eax
c0101c8b:	0f b7 c0             	movzwl %ax,%eax
c0101c8e:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101c92:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c96:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101c9a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101c9e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101c9f:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ca2:	0f b6 c0             	movzbl %al,%eax
c0101ca5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ca9:	83 c2 02             	add    $0x2,%edx
c0101cac:	0f b7 d2             	movzwl %dx,%edx
c0101caf:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101cb3:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101cb6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101cba:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101cbe:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cc2:	0f b6 c0             	movzbl %al,%eax
c0101cc5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cc9:	83 c2 03             	add    $0x3,%edx
c0101ccc:	0f b7 d2             	movzwl %dx,%edx
c0101ccf:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101cd3:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101cd6:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101cda:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101cde:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ce2:	c1 e8 08             	shr    $0x8,%eax
c0101ce5:	0f b6 c0             	movzbl %al,%eax
c0101ce8:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cec:	83 c2 04             	add    $0x4,%edx
c0101cef:	0f b7 d2             	movzwl %dx,%edx
c0101cf2:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101cf6:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101cf9:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101cfd:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d01:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101d02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d05:	c1 e8 10             	shr    $0x10,%eax
c0101d08:	0f b6 c0             	movzbl %al,%eax
c0101d0b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d0f:	83 c2 05             	add    $0x5,%edx
c0101d12:	0f b7 d2             	movzwl %dx,%edx
c0101d15:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101d19:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101d1c:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d20:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d24:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101d25:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d29:	83 e0 01             	and    $0x1,%eax
c0101d2c:	c1 e0 04             	shl    $0x4,%eax
c0101d2f:	89 c2                	mov    %eax,%edx
c0101d31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d34:	c1 e8 18             	shr    $0x18,%eax
c0101d37:	83 e0 0f             	and    $0xf,%eax
c0101d3a:	09 d0                	or     %edx,%eax
c0101d3c:	83 c8 e0             	or     $0xffffffe0,%eax
c0101d3f:	0f b6 c0             	movzbl %al,%eax
c0101d42:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d46:	83 c2 06             	add    $0x6,%edx
c0101d49:	0f b7 d2             	movzwl %dx,%edx
c0101d4c:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d50:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d53:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d57:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d5b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101d5c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d60:	83 c0 07             	add    $0x7,%eax
c0101d63:	0f b7 c0             	movzwl %ax,%eax
c0101d66:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101d6a:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101d6e:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d72:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d76:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101d77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101d7e:	eb 5a                	jmp    c0101dda <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101d80:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d84:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101d8b:	00 
c0101d8c:	89 04 24             	mov    %eax,(%esp)
c0101d8f:	e8 23 fa ff ff       	call   c01017b7 <ide_wait_ready>
c0101d94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101d97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101d9b:	74 02                	je     c0101d9f <ide_read_secs+0x1f7>
            goto out;
c0101d9d:	eb 41                	jmp    c0101de0 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101d9f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101da3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101da6:	8b 45 10             	mov    0x10(%ebp),%eax
c0101da9:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101dac:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101db3:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101db6:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101db9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101dbc:	89 cb                	mov    %ecx,%ebx
c0101dbe:	89 df                	mov    %ebx,%edi
c0101dc0:	89 c1                	mov    %eax,%ecx
c0101dc2:	fc                   	cld    
c0101dc3:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101dc5:	89 c8                	mov    %ecx,%eax
c0101dc7:	89 fb                	mov    %edi,%ebx
c0101dc9:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101dcc:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101dcf:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101dd3:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101dda:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101dde:	75 a0                	jne    c0101d80 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101de3:	83 c4 50             	add    $0x50,%esp
c0101de6:	5b                   	pop    %ebx
c0101de7:	5f                   	pop    %edi
c0101de8:	5d                   	pop    %ebp
c0101de9:	c3                   	ret    

c0101dea <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101dea:	55                   	push   %ebp
c0101deb:	89 e5                	mov    %esp,%ebp
c0101ded:	56                   	push   %esi
c0101dee:	53                   	push   %ebx
c0101def:	83 ec 50             	sub    $0x50,%esp
c0101df2:	8b 45 08             	mov    0x8(%ebp),%eax
c0101df5:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101df9:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101e00:	77 24                	ja     c0101e26 <ide_write_secs+0x3c>
c0101e02:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101e07:	77 1d                	ja     c0101e26 <ide_write_secs+0x3c>
c0101e09:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e0d:	c1 e0 03             	shl    $0x3,%eax
c0101e10:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e17:	29 c2                	sub    %eax,%edx
c0101e19:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101e1f:	0f b6 00             	movzbl (%eax),%eax
c0101e22:	84 c0                	test   %al,%al
c0101e24:	75 24                	jne    c0101e4a <ide_write_secs+0x60>
c0101e26:	c7 44 24 0c dc d9 10 	movl   $0xc010d9dc,0xc(%esp)
c0101e2d:	c0 
c0101e2e:	c7 44 24 08 97 d9 10 	movl   $0xc010d997,0x8(%esp)
c0101e35:	c0 
c0101e36:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101e3d:	00 
c0101e3e:	c7 04 24 ac d9 10 c0 	movl   $0xc010d9ac,(%esp)
c0101e45:	e8 90 ef ff ff       	call   c0100dda <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101e4a:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101e51:	77 0f                	ja     c0101e62 <ide_write_secs+0x78>
c0101e53:	8b 45 14             	mov    0x14(%ebp),%eax
c0101e56:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101e59:	01 d0                	add    %edx,%eax
c0101e5b:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101e60:	76 24                	jbe    c0101e86 <ide_write_secs+0x9c>
c0101e62:	c7 44 24 0c 04 da 10 	movl   $0xc010da04,0xc(%esp)
c0101e69:	c0 
c0101e6a:	c7 44 24 08 97 d9 10 	movl   $0xc010d997,0x8(%esp)
c0101e71:	c0 
c0101e72:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101e79:	00 
c0101e7a:	c7 04 24 ac d9 10 c0 	movl   $0xc010d9ac,(%esp)
c0101e81:	e8 54 ef ff ff       	call   c0100dda <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101e86:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e8a:	66 d1 e8             	shr    %ax
c0101e8d:	0f b7 c0             	movzwl %ax,%eax
c0101e90:	0f b7 04 85 4c d9 10 	movzwl -0x3fef26b4(,%eax,4),%eax
c0101e97:	c0 
c0101e98:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101e9c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ea0:	66 d1 e8             	shr    %ax
c0101ea3:	0f b7 c0             	movzwl %ax,%eax
c0101ea6:	0f b7 04 85 4e d9 10 	movzwl -0x3fef26b2(,%eax,4),%eax
c0101ead:	c0 
c0101eae:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101eb2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101eb6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101ebd:	00 
c0101ebe:	89 04 24             	mov    %eax,(%esp)
c0101ec1:	e8 f1 f8 ff ff       	call   c01017b7 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101ec6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101eca:	83 c0 02             	add    $0x2,%eax
c0101ecd:	0f b7 c0             	movzwl %ax,%eax
c0101ed0:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101ed4:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ed8:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101edc:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ee0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101ee1:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ee4:	0f b6 c0             	movzbl %al,%eax
c0101ee7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101eeb:	83 c2 02             	add    $0x2,%edx
c0101eee:	0f b7 d2             	movzwl %dx,%edx
c0101ef1:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101ef5:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101ef8:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101efc:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101f00:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101f01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f04:	0f b6 c0             	movzbl %al,%eax
c0101f07:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f0b:	83 c2 03             	add    $0x3,%edx
c0101f0e:	0f b7 d2             	movzwl %dx,%edx
c0101f11:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101f15:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101f18:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101f1c:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101f20:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101f21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f24:	c1 e8 08             	shr    $0x8,%eax
c0101f27:	0f b6 c0             	movzbl %al,%eax
c0101f2a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f2e:	83 c2 04             	add    $0x4,%edx
c0101f31:	0f b7 d2             	movzwl %dx,%edx
c0101f34:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101f38:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101f3b:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101f3f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101f43:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101f44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f47:	c1 e8 10             	shr    $0x10,%eax
c0101f4a:	0f b6 c0             	movzbl %al,%eax
c0101f4d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f51:	83 c2 05             	add    $0x5,%edx
c0101f54:	0f b7 d2             	movzwl %dx,%edx
c0101f57:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101f5b:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101f5e:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101f62:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101f66:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101f67:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f6b:	83 e0 01             	and    $0x1,%eax
c0101f6e:	c1 e0 04             	shl    $0x4,%eax
c0101f71:	89 c2                	mov    %eax,%edx
c0101f73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f76:	c1 e8 18             	shr    $0x18,%eax
c0101f79:	83 e0 0f             	and    $0xf,%eax
c0101f7c:	09 d0                	or     %edx,%eax
c0101f7e:	83 c8 e0             	or     $0xffffffe0,%eax
c0101f81:	0f b6 c0             	movzbl %al,%eax
c0101f84:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f88:	83 c2 06             	add    $0x6,%edx
c0101f8b:	0f b7 d2             	movzwl %dx,%edx
c0101f8e:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101f92:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101f95:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101f99:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101f9d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101f9e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fa2:	83 c0 07             	add    $0x7,%eax
c0101fa5:	0f b7 c0             	movzwl %ax,%eax
c0101fa8:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101fac:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0101fb0:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101fb4:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101fb8:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101fb9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101fc0:	eb 5a                	jmp    c010201c <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101fc2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fc6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101fcd:	00 
c0101fce:	89 04 24             	mov    %eax,(%esp)
c0101fd1:	e8 e1 f7 ff ff       	call   c01017b7 <ide_wait_ready>
c0101fd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101fdd:	74 02                	je     c0101fe1 <ide_write_secs+0x1f7>
            goto out;
c0101fdf:	eb 41                	jmp    c0102022 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0101fe1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fe5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101fe8:	8b 45 10             	mov    0x10(%ebp),%eax
c0101feb:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101fee:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101ff5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101ff8:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101ffb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101ffe:	89 cb                	mov    %ecx,%ebx
c0102000:	89 de                	mov    %ebx,%esi
c0102002:	89 c1                	mov    %eax,%ecx
c0102004:	fc                   	cld    
c0102005:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102007:	89 c8                	mov    %ecx,%eax
c0102009:	89 f3                	mov    %esi,%ebx
c010200b:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010200e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102011:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0102015:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010201c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102020:	75 a0                	jne    c0101fc2 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102022:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102025:	83 c4 50             	add    $0x50,%esp
c0102028:	5b                   	pop    %ebx
c0102029:	5e                   	pop    %esi
c010202a:	5d                   	pop    %ebp
c010202b:	c3                   	ret    

c010202c <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c010202c:	55                   	push   %ebp
c010202d:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c010202f:	fb                   	sti    
    sti();
}
c0102030:	5d                   	pop    %ebp
c0102031:	c3                   	ret    

c0102032 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0102032:	55                   	push   %ebp
c0102033:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c0102035:	fa                   	cli    
    cli();
}
c0102036:	5d                   	pop    %ebp
c0102037:	c3                   	ret    

c0102038 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102038:	55                   	push   %ebp
c0102039:	89 e5                	mov    %esp,%ebp
c010203b:	83 ec 14             	sub    $0x14,%esp
c010203e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102041:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0102045:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102049:	66 a3 70 15 13 c0    	mov    %ax,0xc0131570
    if (did_init) {
c010204f:	a1 60 2b 1c c0       	mov    0xc01c2b60,%eax
c0102054:	85 c0                	test   %eax,%eax
c0102056:	74 36                	je     c010208e <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102058:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010205c:	0f b6 c0             	movzbl %al,%eax
c010205f:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102065:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102068:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010206c:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102070:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102071:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102075:	66 c1 e8 08          	shr    $0x8,%ax
c0102079:	0f b6 c0             	movzbl %al,%eax
c010207c:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102082:	88 45 f9             	mov    %al,-0x7(%ebp)
c0102085:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102089:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010208d:	ee                   	out    %al,(%dx)
    }
}
c010208e:	c9                   	leave  
c010208f:	c3                   	ret    

c0102090 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102090:	55                   	push   %ebp
c0102091:	89 e5                	mov    %esp,%ebp
c0102093:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0102096:	8b 45 08             	mov    0x8(%ebp),%eax
c0102099:	ba 01 00 00 00       	mov    $0x1,%edx
c010209e:	89 c1                	mov    %eax,%ecx
c01020a0:	d3 e2                	shl    %cl,%edx
c01020a2:	89 d0                	mov    %edx,%eax
c01020a4:	f7 d0                	not    %eax
c01020a6:	89 c2                	mov    %eax,%edx
c01020a8:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c01020af:	21 d0                	and    %edx,%eax
c01020b1:	0f b7 c0             	movzwl %ax,%eax
c01020b4:	89 04 24             	mov    %eax,(%esp)
c01020b7:	e8 7c ff ff ff       	call   c0102038 <pic_setmask>
}
c01020bc:	c9                   	leave  
c01020bd:	c3                   	ret    

c01020be <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01020be:	55                   	push   %ebp
c01020bf:	89 e5                	mov    %esp,%ebp
c01020c1:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01020c4:	c7 05 60 2b 1c c0 01 	movl   $0x1,0xc01c2b60
c01020cb:	00 00 00 
c01020ce:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01020d4:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01020d8:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01020dc:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01020e0:	ee                   	out    %al,(%dx)
c01020e1:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01020e7:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01020eb:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01020ef:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020f3:	ee                   	out    %al,(%dx)
c01020f4:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01020fa:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01020fe:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102102:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102106:	ee                   	out    %al,(%dx)
c0102107:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c010210d:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102111:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102115:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102119:	ee                   	out    %al,(%dx)
c010211a:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102120:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c0102124:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102128:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010212c:	ee                   	out    %al,(%dx)
c010212d:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c0102133:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102137:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010213b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010213f:	ee                   	out    %al,(%dx)
c0102140:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102146:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c010214a:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010214e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102152:	ee                   	out    %al,(%dx)
c0102153:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102159:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c010215d:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102161:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102165:	ee                   	out    %al,(%dx)
c0102166:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c010216c:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102170:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102174:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102178:	ee                   	out    %al,(%dx)
c0102179:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010217f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0102183:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102187:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010218b:	ee                   	out    %al,(%dx)
c010218c:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0102192:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0102196:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c010219a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010219e:	ee                   	out    %al,(%dx)
c010219f:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01021a5:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01021a9:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01021ad:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01021b1:	ee                   	out    %al,(%dx)
c01021b2:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01021b8:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01021bc:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01021c0:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01021c4:	ee                   	out    %al,(%dx)
c01021c5:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01021cb:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01021cf:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01021d3:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01021d7:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01021d8:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c01021df:	66 83 f8 ff          	cmp    $0xffff,%ax
c01021e3:	74 12                	je     c01021f7 <pic_init+0x139>
        pic_setmask(irq_mask);
c01021e5:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c01021ec:	0f b7 c0             	movzwl %ax,%eax
c01021ef:	89 04 24             	mov    %eax,(%esp)
c01021f2:	e8 41 fe ff ff       	call   c0102038 <pic_setmask>
    }
}
c01021f7:	c9                   	leave  
c01021f8:	c3                   	ret    

c01021f9 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021f9:	55                   	push   %ebp
c01021fa:	89 e5                	mov    %esp,%ebp
c01021fc:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021ff:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0102206:	00 
c0102207:	c7 04 24 40 da 10 c0 	movl   $0xc010da40,(%esp)
c010220e:	e8 45 e1 ff ff       	call   c0100358 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c0102213:	c9                   	leave  
c0102214:	c3                   	ret    

c0102215 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102215:	55                   	push   %ebp
c0102216:	89 e5                	mov    %esp,%ebp
c0102218:	83 ec 10             	sub    $0x10,%esp

	extern uintptr_t __vectors[];

	// 计算出有多少个IDT，依次遍历他们
	int i;
	for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i++) {
c010221b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102222:	e9 c3 00 00 00       	jmp    c01022ea <idt_init+0xd5>

		// 初始化若干IDT
		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102227:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010222a:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
c0102231:	89 c2                	mov    %eax,%edx
c0102233:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102236:	66 89 14 c5 80 2b 1c 	mov    %dx,-0x3fe3d480(,%eax,8)
c010223d:	c0 
c010223e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102241:	66 c7 04 c5 82 2b 1c 	movw   $0x8,-0x3fe3d47e(,%eax,8)
c0102248:	c0 08 00 
c010224b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010224e:	0f b6 14 c5 84 2b 1c 	movzbl -0x3fe3d47c(,%eax,8),%edx
c0102255:	c0 
c0102256:	83 e2 e0             	and    $0xffffffe0,%edx
c0102259:	88 14 c5 84 2b 1c c0 	mov    %dl,-0x3fe3d47c(,%eax,8)
c0102260:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102263:	0f b6 14 c5 84 2b 1c 	movzbl -0x3fe3d47c(,%eax,8),%edx
c010226a:	c0 
c010226b:	83 e2 1f             	and    $0x1f,%edx
c010226e:	88 14 c5 84 2b 1c c0 	mov    %dl,-0x3fe3d47c(,%eax,8)
c0102275:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102278:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c010227f:	c0 
c0102280:	83 e2 f0             	and    $0xfffffff0,%edx
c0102283:	83 ca 0e             	or     $0xe,%edx
c0102286:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c010228d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102290:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c0102297:	c0 
c0102298:	83 e2 ef             	and    $0xffffffef,%edx
c010229b:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022a5:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c01022ac:	c0 
c01022ad:	83 e2 9f             	and    $0xffffff9f,%edx
c01022b0:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022ba:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c01022c1:	c0 
c01022c2:	83 ca 80             	or     $0xffffff80,%edx
c01022c5:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022cf:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
c01022d6:	c1 e8 10             	shr    $0x10,%eax
c01022d9:	89 c2                	mov    %eax,%edx
c01022db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022de:	66 89 14 c5 86 2b 1c 	mov    %dx,-0x3fe3d47a(,%eax,8)
c01022e5:	c0 

	extern uintptr_t __vectors[];

	// 计算出有多少个IDT，依次遍历他们
	int i;
	for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i++) {
c01022e6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01022ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022ed:	3d ff 00 00 00       	cmp    $0xff,%eax
c01022f2:	0f 86 2f ff ff ff    	jbe    c0102227 <idt_init+0x12>

	// T_SWITCH_TOK 的发生时机是在用户空间的，所以对应的dpl需要修改为DPL_USER。
	//SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);

	// 用户态中断门，使用户态可以调用系统中断（从实验手册来的）
	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c01022f8:	a1 00 18 13 c0       	mov    0xc0131800,%eax
c01022fd:	66 a3 80 2f 1c c0    	mov    %ax,0xc01c2f80
c0102303:	66 c7 05 82 2f 1c c0 	movw   $0x8,0xc01c2f82
c010230a:	08 00 
c010230c:	0f b6 05 84 2f 1c c0 	movzbl 0xc01c2f84,%eax
c0102313:	83 e0 e0             	and    $0xffffffe0,%eax
c0102316:	a2 84 2f 1c c0       	mov    %al,0xc01c2f84
c010231b:	0f b6 05 84 2f 1c c0 	movzbl 0xc01c2f84,%eax
c0102322:	83 e0 1f             	and    $0x1f,%eax
c0102325:	a2 84 2f 1c c0       	mov    %al,0xc01c2f84
c010232a:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c0102331:	83 c8 0f             	or     $0xf,%eax
c0102334:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c0102339:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c0102340:	83 e0 ef             	and    $0xffffffef,%eax
c0102343:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c0102348:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c010234f:	83 c8 60             	or     $0x60,%eax
c0102352:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c0102357:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c010235e:	83 c8 80             	or     $0xffffff80,%eax
c0102361:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c0102366:	a1 00 18 13 c0       	mov    0xc0131800,%eax
c010236b:	c1 e8 10             	shr    $0x10,%eax
c010236e:	66 a3 86 2f 1c c0    	mov    %ax,0xc01c2f86
c0102374:	c7 45 f8 80 15 13 c0 	movl   $0xc0131580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010237b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010237e:	0f 01 18             	lidtl  (%eax)

	// 加载IDT，只有特权级为0才允许执行
	lidt(&idt_pd);

}
c0102381:	c9                   	leave  
c0102382:	c3                   	ret    

c0102383 <trapname>:

static const char *
trapname(int trapno) {
c0102383:	55                   	push   %ebp
c0102384:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0102386:	8b 45 08             	mov    0x8(%ebp),%eax
c0102389:	83 f8 13             	cmp    $0x13,%eax
c010238c:	77 0c                	ja     c010239a <trapname+0x17>
        return excnames[trapno];
c010238e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102391:	8b 04 85 c0 de 10 c0 	mov    -0x3fef2140(,%eax,4),%eax
c0102398:	eb 18                	jmp    c01023b2 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c010239a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c010239e:	7e 0d                	jle    c01023ad <trapname+0x2a>
c01023a0:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01023a4:	7f 07                	jg     c01023ad <trapname+0x2a>
        return "Hardware Interrupt";
c01023a6:	b8 4a da 10 c0       	mov    $0xc010da4a,%eax
c01023ab:	eb 05                	jmp    c01023b2 <trapname+0x2f>
    }
    return "(unknown trap)";
c01023ad:	b8 5d da 10 c0       	mov    $0xc010da5d,%eax
}
c01023b2:	5d                   	pop    %ebp
c01023b3:	c3                   	ret    

c01023b4 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01023b4:	55                   	push   %ebp
c01023b5:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01023b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01023ba:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01023be:	66 83 f8 08          	cmp    $0x8,%ax
c01023c2:	0f 94 c0             	sete   %al
c01023c5:	0f b6 c0             	movzbl %al,%eax
}
c01023c8:	5d                   	pop    %ebp
c01023c9:	c3                   	ret    

c01023ca <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01023ca:	55                   	push   %ebp
c01023cb:	89 e5                	mov    %esp,%ebp
c01023cd:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01023d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01023d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01023d7:	c7 04 24 9e da 10 c0 	movl   $0xc010da9e,(%esp)
c01023de:	e8 75 df ff ff       	call   c0100358 <cprintf>
    print_regs(&tf->tf_regs);
c01023e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01023e6:	89 04 24             	mov    %eax,(%esp)
c01023e9:	e8 a1 01 00 00       	call   c010258f <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01023ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01023f1:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01023f5:	0f b7 c0             	movzwl %ax,%eax
c01023f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01023fc:	c7 04 24 af da 10 c0 	movl   $0xc010daaf,(%esp)
c0102403:	e8 50 df ff ff       	call   c0100358 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102408:	8b 45 08             	mov    0x8(%ebp),%eax
c010240b:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010240f:	0f b7 c0             	movzwl %ax,%eax
c0102412:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102416:	c7 04 24 c2 da 10 c0 	movl   $0xc010dac2,(%esp)
c010241d:	e8 36 df ff ff       	call   c0100358 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102422:	8b 45 08             	mov    0x8(%ebp),%eax
c0102425:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102429:	0f b7 c0             	movzwl %ax,%eax
c010242c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102430:	c7 04 24 d5 da 10 c0 	movl   $0xc010dad5,(%esp)
c0102437:	e8 1c df ff ff       	call   c0100358 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c010243c:	8b 45 08             	mov    0x8(%ebp),%eax
c010243f:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102443:	0f b7 c0             	movzwl %ax,%eax
c0102446:	89 44 24 04          	mov    %eax,0x4(%esp)
c010244a:	c7 04 24 e8 da 10 c0 	movl   $0xc010dae8,(%esp)
c0102451:	e8 02 df ff ff       	call   c0100358 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102456:	8b 45 08             	mov    0x8(%ebp),%eax
c0102459:	8b 40 30             	mov    0x30(%eax),%eax
c010245c:	89 04 24             	mov    %eax,(%esp)
c010245f:	e8 1f ff ff ff       	call   c0102383 <trapname>
c0102464:	8b 55 08             	mov    0x8(%ebp),%edx
c0102467:	8b 52 30             	mov    0x30(%edx),%edx
c010246a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010246e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102472:	c7 04 24 fb da 10 c0 	movl   $0xc010dafb,(%esp)
c0102479:	e8 da de ff ff       	call   c0100358 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c010247e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102481:	8b 40 34             	mov    0x34(%eax),%eax
c0102484:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102488:	c7 04 24 0d db 10 c0 	movl   $0xc010db0d,(%esp)
c010248f:	e8 c4 de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102494:	8b 45 08             	mov    0x8(%ebp),%eax
c0102497:	8b 40 38             	mov    0x38(%eax),%eax
c010249a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010249e:	c7 04 24 1c db 10 c0 	movl   $0xc010db1c,(%esp)
c01024a5:	e8 ae de ff ff       	call   c0100358 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01024aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ad:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024b1:	0f b7 c0             	movzwl %ax,%eax
c01024b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024b8:	c7 04 24 2b db 10 c0 	movl   $0xc010db2b,(%esp)
c01024bf:	e8 94 de ff ff       	call   c0100358 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01024c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01024c7:	8b 40 40             	mov    0x40(%eax),%eax
c01024ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024ce:	c7 04 24 3e db 10 c0 	movl   $0xc010db3e,(%esp)
c01024d5:	e8 7e de ff ff       	call   c0100358 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01024da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01024e1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01024e8:	eb 3e                	jmp    c0102528 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01024ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ed:	8b 50 40             	mov    0x40(%eax),%edx
c01024f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01024f3:	21 d0                	and    %edx,%eax
c01024f5:	85 c0                	test   %eax,%eax
c01024f7:	74 28                	je     c0102521 <print_trapframe+0x157>
c01024f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024fc:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
c0102503:	85 c0                	test   %eax,%eax
c0102505:	74 1a                	je     c0102521 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0102507:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010250a:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
c0102511:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102515:	c7 04 24 4d db 10 c0 	movl   $0xc010db4d,(%esp)
c010251c:	e8 37 de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102521:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102525:	d1 65 f0             	shll   -0x10(%ebp)
c0102528:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010252b:	83 f8 17             	cmp    $0x17,%eax
c010252e:	76 ba                	jbe    c01024ea <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102530:	8b 45 08             	mov    0x8(%ebp),%eax
c0102533:	8b 40 40             	mov    0x40(%eax),%eax
c0102536:	25 00 30 00 00       	and    $0x3000,%eax
c010253b:	c1 e8 0c             	shr    $0xc,%eax
c010253e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102542:	c7 04 24 51 db 10 c0 	movl   $0xc010db51,(%esp)
c0102549:	e8 0a de ff ff       	call   c0100358 <cprintf>

    if (!trap_in_kernel(tf)) {
c010254e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102551:	89 04 24             	mov    %eax,(%esp)
c0102554:	e8 5b fe ff ff       	call   c01023b4 <trap_in_kernel>
c0102559:	85 c0                	test   %eax,%eax
c010255b:	75 30                	jne    c010258d <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c010255d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102560:	8b 40 44             	mov    0x44(%eax),%eax
c0102563:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102567:	c7 04 24 5a db 10 c0 	movl   $0xc010db5a,(%esp)
c010256e:	e8 e5 dd ff ff       	call   c0100358 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102573:	8b 45 08             	mov    0x8(%ebp),%eax
c0102576:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c010257a:	0f b7 c0             	movzwl %ax,%eax
c010257d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102581:	c7 04 24 69 db 10 c0 	movl   $0xc010db69,(%esp)
c0102588:	e8 cb dd ff ff       	call   c0100358 <cprintf>
    }
}
c010258d:	c9                   	leave  
c010258e:	c3                   	ret    

c010258f <print_regs>:

void
print_regs(struct pushregs *regs) {
c010258f:	55                   	push   %ebp
c0102590:	89 e5                	mov    %esp,%ebp
c0102592:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102595:	8b 45 08             	mov    0x8(%ebp),%eax
c0102598:	8b 00                	mov    (%eax),%eax
c010259a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010259e:	c7 04 24 7c db 10 c0 	movl   $0xc010db7c,(%esp)
c01025a5:	e8 ae dd ff ff       	call   c0100358 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01025aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ad:	8b 40 04             	mov    0x4(%eax),%eax
c01025b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b4:	c7 04 24 8b db 10 c0 	movl   $0xc010db8b,(%esp)
c01025bb:	e8 98 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01025c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01025c3:	8b 40 08             	mov    0x8(%eax),%eax
c01025c6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ca:	c7 04 24 9a db 10 c0 	movl   $0xc010db9a,(%esp)
c01025d1:	e8 82 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01025d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d9:	8b 40 0c             	mov    0xc(%eax),%eax
c01025dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025e0:	c7 04 24 a9 db 10 c0 	movl   $0xc010dba9,(%esp)
c01025e7:	e8 6c dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01025ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ef:	8b 40 10             	mov    0x10(%eax),%eax
c01025f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025f6:	c7 04 24 b8 db 10 c0 	movl   $0xc010dbb8,(%esp)
c01025fd:	e8 56 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102602:	8b 45 08             	mov    0x8(%ebp),%eax
c0102605:	8b 40 14             	mov    0x14(%eax),%eax
c0102608:	89 44 24 04          	mov    %eax,0x4(%esp)
c010260c:	c7 04 24 c7 db 10 c0 	movl   $0xc010dbc7,(%esp)
c0102613:	e8 40 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102618:	8b 45 08             	mov    0x8(%ebp),%eax
c010261b:	8b 40 18             	mov    0x18(%eax),%eax
c010261e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102622:	c7 04 24 d6 db 10 c0 	movl   $0xc010dbd6,(%esp)
c0102629:	e8 2a dd ff ff       	call   c0100358 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010262e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102631:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102634:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102638:	c7 04 24 e5 db 10 c0 	movl   $0xc010dbe5,(%esp)
c010263f:	e8 14 dd ff ff       	call   c0100358 <cprintf>
}
c0102644:	c9                   	leave  
c0102645:	c3                   	ret    

c0102646 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102646:	55                   	push   %ebp
c0102647:	89 e5                	mov    %esp,%ebp
c0102649:	53                   	push   %ebx
c010264a:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c010264d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102650:	8b 40 34             	mov    0x34(%eax),%eax
c0102653:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102656:	85 c0                	test   %eax,%eax
c0102658:	74 07                	je     c0102661 <print_pgfault+0x1b>
c010265a:	b9 f4 db 10 c0       	mov    $0xc010dbf4,%ecx
c010265f:	eb 05                	jmp    c0102666 <print_pgfault+0x20>
c0102661:	b9 05 dc 10 c0       	mov    $0xc010dc05,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102666:	8b 45 08             	mov    0x8(%ebp),%eax
c0102669:	8b 40 34             	mov    0x34(%eax),%eax
c010266c:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010266f:	85 c0                	test   %eax,%eax
c0102671:	74 07                	je     c010267a <print_pgfault+0x34>
c0102673:	ba 57 00 00 00       	mov    $0x57,%edx
c0102678:	eb 05                	jmp    c010267f <print_pgfault+0x39>
c010267a:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c010267f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102682:	8b 40 34             	mov    0x34(%eax),%eax
c0102685:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102688:	85 c0                	test   %eax,%eax
c010268a:	74 07                	je     c0102693 <print_pgfault+0x4d>
c010268c:	b8 55 00 00 00       	mov    $0x55,%eax
c0102691:	eb 05                	jmp    c0102698 <print_pgfault+0x52>
c0102693:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102698:	0f 20 d3             	mov    %cr2,%ebx
c010269b:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c010269e:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01026a1:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01026a5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01026a9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01026ad:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01026b1:	c7 04 24 14 dc 10 c0 	movl   $0xc010dc14,(%esp)
c01026b8:	e8 9b dc ff ff       	call   c0100358 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01026bd:	83 c4 34             	add    $0x34,%esp
c01026c0:	5b                   	pop    %ebx
c01026c1:	5d                   	pop    %ebp
c01026c2:	c3                   	ret    

c01026c3 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01026c3:	55                   	push   %ebp
c01026c4:	89 e5                	mov    %esp,%ebp
c01026c6:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01026c9:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c01026ce:	85 c0                	test   %eax,%eax
c01026d0:	74 0b                	je     c01026dd <pgfault_handler+0x1a>
            print_pgfault(tf);
c01026d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d5:	89 04 24             	mov    %eax,(%esp)
c01026d8:	e8 69 ff ff ff       	call   c0102646 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01026dd:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c01026e2:	85 c0                	test   %eax,%eax
c01026e4:	74 3d                	je     c0102723 <pgfault_handler+0x60>
        assert(current == idleproc);
c01026e6:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c01026ec:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c01026f1:	39 c2                	cmp    %eax,%edx
c01026f3:	74 24                	je     c0102719 <pgfault_handler+0x56>
c01026f5:	c7 44 24 0c 37 dc 10 	movl   $0xc010dc37,0xc(%esp)
c01026fc:	c0 
c01026fd:	c7 44 24 08 4b dc 10 	movl   $0xc010dc4b,0x8(%esp)
c0102704:	c0 
c0102705:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c010270c:	00 
c010270d:	c7 04 24 60 dc 10 c0 	movl   $0xc010dc60,(%esp)
c0102714:	e8 c1 e6 ff ff       	call   c0100dda <__panic>
        mm = check_mm_struct;
c0102719:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c010271e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102721:	eb 46                	jmp    c0102769 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0102723:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102728:	85 c0                	test   %eax,%eax
c010272a:	75 32                	jne    c010275e <pgfault_handler+0x9b>
            print_trapframe(tf);
c010272c:	8b 45 08             	mov    0x8(%ebp),%eax
c010272f:	89 04 24             	mov    %eax,(%esp)
c0102732:	e8 93 fc ff ff       	call   c01023ca <print_trapframe>
            print_pgfault(tf);
c0102737:	8b 45 08             	mov    0x8(%ebp),%eax
c010273a:	89 04 24             	mov    %eax,(%esp)
c010273d:	e8 04 ff ff ff       	call   c0102646 <print_pgfault>
            panic("unhandled page fault.\n");
c0102742:	c7 44 24 08 71 dc 10 	movl   $0xc010dc71,0x8(%esp)
c0102749:	c0 
c010274a:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0102751:	00 
c0102752:	c7 04 24 60 dc 10 c0 	movl   $0xc010dc60,(%esp)
c0102759:	e8 7c e6 ff ff       	call   c0100dda <__panic>
        }
        mm = current->mm;
c010275e:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102763:	8b 40 18             	mov    0x18(%eax),%eax
c0102766:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102769:	0f 20 d0             	mov    %cr2,%eax
c010276c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c010276f:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102772:	89 c2                	mov    %eax,%edx
c0102774:	8b 45 08             	mov    0x8(%ebp),%eax
c0102777:	8b 40 34             	mov    0x34(%eax),%eax
c010277a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010277e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102782:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102785:	89 04 24             	mov    %eax,(%esp)
c0102788:	e8 81 64 00 00       	call   c0108c0e <do_pgfault>
}
c010278d:	c9                   	leave  
c010278e:	c3                   	ret    

c010278f <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c010278f:	55                   	push   %ebp
c0102790:	89 e5                	mov    %esp,%ebp
c0102792:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c0102795:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c010279c:	8b 45 08             	mov    0x8(%ebp),%eax
c010279f:	8b 40 30             	mov    0x30(%eax),%eax
c01027a2:	83 f8 2f             	cmp    $0x2f,%eax
c01027a5:	77 38                	ja     c01027df <trap_dispatch+0x50>
c01027a7:	83 f8 2e             	cmp    $0x2e,%eax
c01027aa:	0f 83 da 01 00 00    	jae    c010298a <trap_dispatch+0x1fb>
c01027b0:	83 f8 20             	cmp    $0x20,%eax
c01027b3:	0f 84 07 01 00 00    	je     c01028c0 <trap_dispatch+0x131>
c01027b9:	83 f8 20             	cmp    $0x20,%eax
c01027bc:	77 0a                	ja     c01027c8 <trap_dispatch+0x39>
c01027be:	83 f8 0e             	cmp    $0xe,%eax
c01027c1:	74 3e                	je     c0102801 <trap_dispatch+0x72>
c01027c3:	e9 7a 01 00 00       	jmp    c0102942 <trap_dispatch+0x1b3>
c01027c8:	83 f8 21             	cmp    $0x21,%eax
c01027cb:	0f 84 2f 01 00 00    	je     c0102900 <trap_dispatch+0x171>
c01027d1:	83 f8 24             	cmp    $0x24,%eax
c01027d4:	0f 84 fd 00 00 00    	je     c01028d7 <trap_dispatch+0x148>
c01027da:	e9 63 01 00 00       	jmp    c0102942 <trap_dispatch+0x1b3>
c01027df:	83 f8 78             	cmp    $0x78,%eax
c01027e2:	0f 82 5a 01 00 00    	jb     c0102942 <trap_dispatch+0x1b3>
c01027e8:	83 f8 79             	cmp    $0x79,%eax
c01027eb:	0f 86 35 01 00 00    	jbe    c0102926 <trap_dispatch+0x197>
c01027f1:	3d 80 00 00 00       	cmp    $0x80,%eax
c01027f6:	0f 84 ba 00 00 00    	je     c01028b6 <trap_dispatch+0x127>
c01027fc:	e9 41 01 00 00       	jmp    c0102942 <trap_dispatch+0x1b3>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102801:	8b 45 08             	mov    0x8(%ebp),%eax
c0102804:	89 04 24             	mov    %eax,(%esp)
c0102807:	e8 b7 fe ff ff       	call   c01026c3 <pgfault_handler>
c010280c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010280f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102813:	0f 84 98 00 00 00    	je     c01028b1 <trap_dispatch+0x122>
            print_trapframe(tf);
c0102819:	8b 45 08             	mov    0x8(%ebp),%eax
c010281c:	89 04 24             	mov    %eax,(%esp)
c010281f:	e8 a6 fb ff ff       	call   c01023ca <print_trapframe>
            if (current == NULL) {
c0102824:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102829:	85 c0                	test   %eax,%eax
c010282b:	75 23                	jne    c0102850 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c010282d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102830:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102834:	c7 44 24 08 88 dc 10 	movl   $0xc010dc88,0x8(%esp)
c010283b:	c0 
c010283c:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
c0102843:	00 
c0102844:	c7 04 24 60 dc 10 c0 	movl   $0xc010dc60,(%esp)
c010284b:	e8 8a e5 ff ff       	call   c0100dda <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102850:	8b 45 08             	mov    0x8(%ebp),%eax
c0102853:	89 04 24             	mov    %eax,(%esp)
c0102856:	e8 59 fb ff ff       	call   c01023b4 <trap_in_kernel>
c010285b:	85 c0                	test   %eax,%eax
c010285d:	74 23                	je     c0102882 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c010285f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102862:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102866:	c7 44 24 08 a8 dc 10 	movl   $0xc010dca8,0x8(%esp)
c010286d:	c0 
c010286e:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
c0102875:	00 
c0102876:	c7 04 24 60 dc 10 c0 	movl   $0xc010dc60,(%esp)
c010287d:	e8 58 e5 ff ff       	call   c0100dda <__panic>
                }
                cprintf("killed by kernel.\n");
c0102882:	c7 04 24 d6 dc 10 c0 	movl   $0xc010dcd6,(%esp)
c0102889:	e8 ca da ff ff       	call   c0100358 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c010288e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102891:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102895:	c7 44 24 08 ec dc 10 	movl   $0xc010dcec,0x8(%esp)
c010289c:	c0 
c010289d:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01028a4:	00 
c01028a5:	c7 04 24 60 dc 10 c0 	movl   $0xc010dc60,(%esp)
c01028ac:	e8 29 e5 ff ff       	call   c0100dda <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01028b1:	e9 d5 00 00 00       	jmp    c010298b <trap_dispatch+0x1fc>
    case T_SYSCALL:
        syscall();
c01028b6:	e8 31 a0 00 00       	call   c010c8ec <syscall>
        break;
c01028bb:	e9 cb 00 00 00       	jmp    c010298b <trap_dispatch+0x1fc>
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */

		ticks++;
c01028c0:	a1 d8 54 1c c0       	mov    0xc01c54d8,%eax
c01028c5:	83 c0 01             	add    $0x1,%eax
c01028c8:	a3 d8 54 1c c0       	mov    %eax,0xc01c54d8
		run_timer_list();
c01028cd:	e8 63 9d 00 00       	call   c010c635 <run_timer_list>
//			// 每次滴答，你应该更新系统时间，迭代计时器，并触发计时器结束调用调度器。
//			// 你可以用一个函数来完成所有这些事情。
//
//		}

        break;
c01028d2:	e9 b4 00 00 00       	jmp    c010298b <trap_dispatch+0x1fc>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c01028d7:	e8 6c ee ff ff       	call   c0101748 <cons_getc>
c01028dc:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c01028df:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c01028e3:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01028e7:	89 54 24 08          	mov    %edx,0x8(%esp)
c01028eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01028ef:	c7 04 24 15 dd 10 c0 	movl   $0xc010dd15,(%esp)
c01028f6:	e8 5d da ff ff       	call   c0100358 <cprintf>
        break;
c01028fb:	e9 8b 00 00 00       	jmp    c010298b <trap_dispatch+0x1fc>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102900:	e8 43 ee ff ff       	call   c0101748 <cons_getc>
c0102905:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102908:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c010290c:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102910:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102914:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102918:	c7 04 24 27 dd 10 c0 	movl   $0xc010dd27,(%esp)
c010291f:	e8 34 da ff ff       	call   c0100358 <cprintf>
        break;
c0102924:	eb 65                	jmp    c010298b <trap_dispatch+0x1fc>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102926:	c7 44 24 08 36 dd 10 	movl   $0xc010dd36,0x8(%esp)
c010292d:	c0 
c010292e:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0102935:	00 
c0102936:	c7 04 24 60 dc 10 c0 	movl   $0xc010dc60,(%esp)
c010293d:	e8 98 e4 ff ff       	call   c0100dda <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102942:	8b 45 08             	mov    0x8(%ebp),%eax
c0102945:	89 04 24             	mov    %eax,(%esp)
c0102948:	e8 7d fa ff ff       	call   c01023ca <print_trapframe>
        if (current != NULL) {
c010294d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102952:	85 c0                	test   %eax,%eax
c0102954:	74 18                	je     c010296e <trap_dispatch+0x1df>
            cprintf("unhandled trap.\n");
c0102956:	c7 04 24 46 dd 10 c0 	movl   $0xc010dd46,(%esp)
c010295d:	e8 f6 d9 ff ff       	call   c0100358 <cprintf>
            do_exit(-E_KILLED);
c0102962:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102969:	e8 94 85 00 00       	call   c010af02 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c010296e:	c7 44 24 08 57 dd 10 	movl   $0xc010dd57,0x8(%esp)
c0102975:	c0 
c0102976:	c7 44 24 04 26 01 00 	movl   $0x126,0x4(%esp)
c010297d:	00 
c010297e:	c7 04 24 60 dc 10 c0 	movl   $0xc010dc60,(%esp)
c0102985:	e8 50 e4 ff ff       	call   c0100dda <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c010298a:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c010298b:	c9                   	leave  
c010298c:	c3                   	ret    

c010298d <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c010298d:	55                   	push   %ebp
c010298e:	89 e5                	mov    %esp,%ebp
c0102990:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102993:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102998:	85 c0                	test   %eax,%eax
c010299a:	75 0d                	jne    c01029a9 <trap+0x1c>
        trap_dispatch(tf);
c010299c:	8b 45 08             	mov    0x8(%ebp),%eax
c010299f:	89 04 24             	mov    %eax,(%esp)
c01029a2:	e8 e8 fd ff ff       	call   c010278f <trap_dispatch>
c01029a7:	eb 6c                	jmp    c0102a15 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c01029a9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01029ae:	8b 40 3c             	mov    0x3c(%eax),%eax
c01029b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c01029b4:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01029b9:	8b 55 08             	mov    0x8(%ebp),%edx
c01029bc:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c01029bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01029c2:	89 04 24             	mov    %eax,(%esp)
c01029c5:	e8 ea f9 ff ff       	call   c01023b4 <trap_in_kernel>
c01029ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c01029cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01029d0:	89 04 24             	mov    %eax,(%esp)
c01029d3:	e8 b7 fd ff ff       	call   c010278f <trap_dispatch>
    
        current->tf = otf;
c01029d8:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01029dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01029e0:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c01029e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01029e7:	75 2c                	jne    c0102a15 <trap+0x88>
            if (current->flags & PF_EXITING) {
c01029e9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01029ee:	8b 40 44             	mov    0x44(%eax),%eax
c01029f1:	83 e0 01             	and    $0x1,%eax
c01029f4:	85 c0                	test   %eax,%eax
c01029f6:	74 0c                	je     c0102a04 <trap+0x77>
                do_exit(-E_KILLED);
c01029f8:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c01029ff:	e8 fe 84 00 00       	call   c010af02 <do_exit>
            }
            if (current->need_resched) {
c0102a04:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102a09:	8b 40 10             	mov    0x10(%eax),%eax
c0102a0c:	85 c0                	test   %eax,%eax
c0102a0e:	74 05                	je     c0102a15 <trap+0x88>
                schedule();
c0102a10:	e8 93 99 00 00       	call   c010c3a8 <schedule>
            }
        }
    }
}
c0102a15:	c9                   	leave  
c0102a16:	c3                   	ret    

c0102a17 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102a17:	1e                   	push   %ds
    pushl %es
c0102a18:	06                   	push   %es
    pushl %fs
c0102a19:	0f a0                	push   %fs
    pushl %gs
c0102a1b:	0f a8                	push   %gs
    pushal
c0102a1d:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102a1e:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102a23:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102a25:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102a27:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102a28:	e8 60 ff ff ff       	call   c010298d <trap>

    # pop the pushed stack pointer
    popl %esp
c0102a2d:	5c                   	pop    %esp

c0102a2e <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102a2e:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102a2f:	0f a9                	pop    %gs
    popl %fs
c0102a31:	0f a1                	pop    %fs
    popl %es
c0102a33:	07                   	pop    %es
    popl %ds
c0102a34:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102a35:	83 c4 08             	add    $0x8,%esp
    iret
c0102a38:	cf                   	iret   

c0102a39 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102a39:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102a3d:	e9 ec ff ff ff       	jmp    c0102a2e <__trapret>

c0102a42 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102a42:	6a 00                	push   $0x0
  pushl $0
c0102a44:	6a 00                	push   $0x0
  jmp __alltraps
c0102a46:	e9 cc ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a4b <vector1>:
.globl vector1
vector1:
  pushl $0
c0102a4b:	6a 00                	push   $0x0
  pushl $1
c0102a4d:	6a 01                	push   $0x1
  jmp __alltraps
c0102a4f:	e9 c3 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a54 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102a54:	6a 00                	push   $0x0
  pushl $2
c0102a56:	6a 02                	push   $0x2
  jmp __alltraps
c0102a58:	e9 ba ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a5d <vector3>:
.globl vector3
vector3:
  pushl $0
c0102a5d:	6a 00                	push   $0x0
  pushl $3
c0102a5f:	6a 03                	push   $0x3
  jmp __alltraps
c0102a61:	e9 b1 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a66 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102a66:	6a 00                	push   $0x0
  pushl $4
c0102a68:	6a 04                	push   $0x4
  jmp __alltraps
c0102a6a:	e9 a8 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a6f <vector5>:
.globl vector5
vector5:
  pushl $0
c0102a6f:	6a 00                	push   $0x0
  pushl $5
c0102a71:	6a 05                	push   $0x5
  jmp __alltraps
c0102a73:	e9 9f ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a78 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102a78:	6a 00                	push   $0x0
  pushl $6
c0102a7a:	6a 06                	push   $0x6
  jmp __alltraps
c0102a7c:	e9 96 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a81 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102a81:	6a 00                	push   $0x0
  pushl $7
c0102a83:	6a 07                	push   $0x7
  jmp __alltraps
c0102a85:	e9 8d ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a8a <vector8>:
.globl vector8
vector8:
  pushl $8
c0102a8a:	6a 08                	push   $0x8
  jmp __alltraps
c0102a8c:	e9 86 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a91 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102a91:	6a 09                	push   $0x9
  jmp __alltraps
c0102a93:	e9 7f ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a98 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102a98:	6a 0a                	push   $0xa
  jmp __alltraps
c0102a9a:	e9 78 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102a9f <vector11>:
.globl vector11
vector11:
  pushl $11
c0102a9f:	6a 0b                	push   $0xb
  jmp __alltraps
c0102aa1:	e9 71 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102aa6 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102aa6:	6a 0c                	push   $0xc
  jmp __alltraps
c0102aa8:	e9 6a ff ff ff       	jmp    c0102a17 <__alltraps>

c0102aad <vector13>:
.globl vector13
vector13:
  pushl $13
c0102aad:	6a 0d                	push   $0xd
  jmp __alltraps
c0102aaf:	e9 63 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102ab4 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102ab4:	6a 0e                	push   $0xe
  jmp __alltraps
c0102ab6:	e9 5c ff ff ff       	jmp    c0102a17 <__alltraps>

c0102abb <vector15>:
.globl vector15
vector15:
  pushl $0
c0102abb:	6a 00                	push   $0x0
  pushl $15
c0102abd:	6a 0f                	push   $0xf
  jmp __alltraps
c0102abf:	e9 53 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102ac4 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102ac4:	6a 00                	push   $0x0
  pushl $16
c0102ac6:	6a 10                	push   $0x10
  jmp __alltraps
c0102ac8:	e9 4a ff ff ff       	jmp    c0102a17 <__alltraps>

c0102acd <vector17>:
.globl vector17
vector17:
  pushl $17
c0102acd:	6a 11                	push   $0x11
  jmp __alltraps
c0102acf:	e9 43 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102ad4 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102ad4:	6a 00                	push   $0x0
  pushl $18
c0102ad6:	6a 12                	push   $0x12
  jmp __alltraps
c0102ad8:	e9 3a ff ff ff       	jmp    c0102a17 <__alltraps>

c0102add <vector19>:
.globl vector19
vector19:
  pushl $0
c0102add:	6a 00                	push   $0x0
  pushl $19
c0102adf:	6a 13                	push   $0x13
  jmp __alltraps
c0102ae1:	e9 31 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102ae6 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102ae6:	6a 00                	push   $0x0
  pushl $20
c0102ae8:	6a 14                	push   $0x14
  jmp __alltraps
c0102aea:	e9 28 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102aef <vector21>:
.globl vector21
vector21:
  pushl $0
c0102aef:	6a 00                	push   $0x0
  pushl $21
c0102af1:	6a 15                	push   $0x15
  jmp __alltraps
c0102af3:	e9 1f ff ff ff       	jmp    c0102a17 <__alltraps>

c0102af8 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102af8:	6a 00                	push   $0x0
  pushl $22
c0102afa:	6a 16                	push   $0x16
  jmp __alltraps
c0102afc:	e9 16 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102b01 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102b01:	6a 00                	push   $0x0
  pushl $23
c0102b03:	6a 17                	push   $0x17
  jmp __alltraps
c0102b05:	e9 0d ff ff ff       	jmp    c0102a17 <__alltraps>

c0102b0a <vector24>:
.globl vector24
vector24:
  pushl $0
c0102b0a:	6a 00                	push   $0x0
  pushl $24
c0102b0c:	6a 18                	push   $0x18
  jmp __alltraps
c0102b0e:	e9 04 ff ff ff       	jmp    c0102a17 <__alltraps>

c0102b13 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102b13:	6a 00                	push   $0x0
  pushl $25
c0102b15:	6a 19                	push   $0x19
  jmp __alltraps
c0102b17:	e9 fb fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b1c <vector26>:
.globl vector26
vector26:
  pushl $0
c0102b1c:	6a 00                	push   $0x0
  pushl $26
c0102b1e:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102b20:	e9 f2 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b25 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102b25:	6a 00                	push   $0x0
  pushl $27
c0102b27:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102b29:	e9 e9 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b2e <vector28>:
.globl vector28
vector28:
  pushl $0
c0102b2e:	6a 00                	push   $0x0
  pushl $28
c0102b30:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102b32:	e9 e0 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b37 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102b37:	6a 00                	push   $0x0
  pushl $29
c0102b39:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102b3b:	e9 d7 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b40 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102b40:	6a 00                	push   $0x0
  pushl $30
c0102b42:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102b44:	e9 ce fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b49 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102b49:	6a 00                	push   $0x0
  pushl $31
c0102b4b:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102b4d:	e9 c5 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b52 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102b52:	6a 00                	push   $0x0
  pushl $32
c0102b54:	6a 20                	push   $0x20
  jmp __alltraps
c0102b56:	e9 bc fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b5b <vector33>:
.globl vector33
vector33:
  pushl $0
c0102b5b:	6a 00                	push   $0x0
  pushl $33
c0102b5d:	6a 21                	push   $0x21
  jmp __alltraps
c0102b5f:	e9 b3 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b64 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102b64:	6a 00                	push   $0x0
  pushl $34
c0102b66:	6a 22                	push   $0x22
  jmp __alltraps
c0102b68:	e9 aa fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b6d <vector35>:
.globl vector35
vector35:
  pushl $0
c0102b6d:	6a 00                	push   $0x0
  pushl $35
c0102b6f:	6a 23                	push   $0x23
  jmp __alltraps
c0102b71:	e9 a1 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b76 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102b76:	6a 00                	push   $0x0
  pushl $36
c0102b78:	6a 24                	push   $0x24
  jmp __alltraps
c0102b7a:	e9 98 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b7f <vector37>:
.globl vector37
vector37:
  pushl $0
c0102b7f:	6a 00                	push   $0x0
  pushl $37
c0102b81:	6a 25                	push   $0x25
  jmp __alltraps
c0102b83:	e9 8f fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b88 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102b88:	6a 00                	push   $0x0
  pushl $38
c0102b8a:	6a 26                	push   $0x26
  jmp __alltraps
c0102b8c:	e9 86 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b91 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102b91:	6a 00                	push   $0x0
  pushl $39
c0102b93:	6a 27                	push   $0x27
  jmp __alltraps
c0102b95:	e9 7d fe ff ff       	jmp    c0102a17 <__alltraps>

c0102b9a <vector40>:
.globl vector40
vector40:
  pushl $0
c0102b9a:	6a 00                	push   $0x0
  pushl $40
c0102b9c:	6a 28                	push   $0x28
  jmp __alltraps
c0102b9e:	e9 74 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102ba3 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102ba3:	6a 00                	push   $0x0
  pushl $41
c0102ba5:	6a 29                	push   $0x29
  jmp __alltraps
c0102ba7:	e9 6b fe ff ff       	jmp    c0102a17 <__alltraps>

c0102bac <vector42>:
.globl vector42
vector42:
  pushl $0
c0102bac:	6a 00                	push   $0x0
  pushl $42
c0102bae:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102bb0:	e9 62 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102bb5 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102bb5:	6a 00                	push   $0x0
  pushl $43
c0102bb7:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102bb9:	e9 59 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102bbe <vector44>:
.globl vector44
vector44:
  pushl $0
c0102bbe:	6a 00                	push   $0x0
  pushl $44
c0102bc0:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102bc2:	e9 50 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102bc7 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102bc7:	6a 00                	push   $0x0
  pushl $45
c0102bc9:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102bcb:	e9 47 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102bd0 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102bd0:	6a 00                	push   $0x0
  pushl $46
c0102bd2:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102bd4:	e9 3e fe ff ff       	jmp    c0102a17 <__alltraps>

c0102bd9 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102bd9:	6a 00                	push   $0x0
  pushl $47
c0102bdb:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102bdd:	e9 35 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102be2 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102be2:	6a 00                	push   $0x0
  pushl $48
c0102be4:	6a 30                	push   $0x30
  jmp __alltraps
c0102be6:	e9 2c fe ff ff       	jmp    c0102a17 <__alltraps>

c0102beb <vector49>:
.globl vector49
vector49:
  pushl $0
c0102beb:	6a 00                	push   $0x0
  pushl $49
c0102bed:	6a 31                	push   $0x31
  jmp __alltraps
c0102bef:	e9 23 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102bf4 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102bf4:	6a 00                	push   $0x0
  pushl $50
c0102bf6:	6a 32                	push   $0x32
  jmp __alltraps
c0102bf8:	e9 1a fe ff ff       	jmp    c0102a17 <__alltraps>

c0102bfd <vector51>:
.globl vector51
vector51:
  pushl $0
c0102bfd:	6a 00                	push   $0x0
  pushl $51
c0102bff:	6a 33                	push   $0x33
  jmp __alltraps
c0102c01:	e9 11 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102c06 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102c06:	6a 00                	push   $0x0
  pushl $52
c0102c08:	6a 34                	push   $0x34
  jmp __alltraps
c0102c0a:	e9 08 fe ff ff       	jmp    c0102a17 <__alltraps>

c0102c0f <vector53>:
.globl vector53
vector53:
  pushl $0
c0102c0f:	6a 00                	push   $0x0
  pushl $53
c0102c11:	6a 35                	push   $0x35
  jmp __alltraps
c0102c13:	e9 ff fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c18 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102c18:	6a 00                	push   $0x0
  pushl $54
c0102c1a:	6a 36                	push   $0x36
  jmp __alltraps
c0102c1c:	e9 f6 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c21 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102c21:	6a 00                	push   $0x0
  pushl $55
c0102c23:	6a 37                	push   $0x37
  jmp __alltraps
c0102c25:	e9 ed fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c2a <vector56>:
.globl vector56
vector56:
  pushl $0
c0102c2a:	6a 00                	push   $0x0
  pushl $56
c0102c2c:	6a 38                	push   $0x38
  jmp __alltraps
c0102c2e:	e9 e4 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c33 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102c33:	6a 00                	push   $0x0
  pushl $57
c0102c35:	6a 39                	push   $0x39
  jmp __alltraps
c0102c37:	e9 db fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c3c <vector58>:
.globl vector58
vector58:
  pushl $0
c0102c3c:	6a 00                	push   $0x0
  pushl $58
c0102c3e:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102c40:	e9 d2 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c45 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102c45:	6a 00                	push   $0x0
  pushl $59
c0102c47:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102c49:	e9 c9 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c4e <vector60>:
.globl vector60
vector60:
  pushl $0
c0102c4e:	6a 00                	push   $0x0
  pushl $60
c0102c50:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102c52:	e9 c0 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c57 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102c57:	6a 00                	push   $0x0
  pushl $61
c0102c59:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102c5b:	e9 b7 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c60 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102c60:	6a 00                	push   $0x0
  pushl $62
c0102c62:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102c64:	e9 ae fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c69 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102c69:	6a 00                	push   $0x0
  pushl $63
c0102c6b:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102c6d:	e9 a5 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c72 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102c72:	6a 00                	push   $0x0
  pushl $64
c0102c74:	6a 40                	push   $0x40
  jmp __alltraps
c0102c76:	e9 9c fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c7b <vector65>:
.globl vector65
vector65:
  pushl $0
c0102c7b:	6a 00                	push   $0x0
  pushl $65
c0102c7d:	6a 41                	push   $0x41
  jmp __alltraps
c0102c7f:	e9 93 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c84 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102c84:	6a 00                	push   $0x0
  pushl $66
c0102c86:	6a 42                	push   $0x42
  jmp __alltraps
c0102c88:	e9 8a fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c8d <vector67>:
.globl vector67
vector67:
  pushl $0
c0102c8d:	6a 00                	push   $0x0
  pushl $67
c0102c8f:	6a 43                	push   $0x43
  jmp __alltraps
c0102c91:	e9 81 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c96 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102c96:	6a 00                	push   $0x0
  pushl $68
c0102c98:	6a 44                	push   $0x44
  jmp __alltraps
c0102c9a:	e9 78 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102c9f <vector69>:
.globl vector69
vector69:
  pushl $0
c0102c9f:	6a 00                	push   $0x0
  pushl $69
c0102ca1:	6a 45                	push   $0x45
  jmp __alltraps
c0102ca3:	e9 6f fd ff ff       	jmp    c0102a17 <__alltraps>

c0102ca8 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102ca8:	6a 00                	push   $0x0
  pushl $70
c0102caa:	6a 46                	push   $0x46
  jmp __alltraps
c0102cac:	e9 66 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102cb1 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102cb1:	6a 00                	push   $0x0
  pushl $71
c0102cb3:	6a 47                	push   $0x47
  jmp __alltraps
c0102cb5:	e9 5d fd ff ff       	jmp    c0102a17 <__alltraps>

c0102cba <vector72>:
.globl vector72
vector72:
  pushl $0
c0102cba:	6a 00                	push   $0x0
  pushl $72
c0102cbc:	6a 48                	push   $0x48
  jmp __alltraps
c0102cbe:	e9 54 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102cc3 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102cc3:	6a 00                	push   $0x0
  pushl $73
c0102cc5:	6a 49                	push   $0x49
  jmp __alltraps
c0102cc7:	e9 4b fd ff ff       	jmp    c0102a17 <__alltraps>

c0102ccc <vector74>:
.globl vector74
vector74:
  pushl $0
c0102ccc:	6a 00                	push   $0x0
  pushl $74
c0102cce:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102cd0:	e9 42 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102cd5 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102cd5:	6a 00                	push   $0x0
  pushl $75
c0102cd7:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102cd9:	e9 39 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102cde <vector76>:
.globl vector76
vector76:
  pushl $0
c0102cde:	6a 00                	push   $0x0
  pushl $76
c0102ce0:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102ce2:	e9 30 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102ce7 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102ce7:	6a 00                	push   $0x0
  pushl $77
c0102ce9:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102ceb:	e9 27 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102cf0 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102cf0:	6a 00                	push   $0x0
  pushl $78
c0102cf2:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102cf4:	e9 1e fd ff ff       	jmp    c0102a17 <__alltraps>

c0102cf9 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102cf9:	6a 00                	push   $0x0
  pushl $79
c0102cfb:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102cfd:	e9 15 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102d02 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102d02:	6a 00                	push   $0x0
  pushl $80
c0102d04:	6a 50                	push   $0x50
  jmp __alltraps
c0102d06:	e9 0c fd ff ff       	jmp    c0102a17 <__alltraps>

c0102d0b <vector81>:
.globl vector81
vector81:
  pushl $0
c0102d0b:	6a 00                	push   $0x0
  pushl $81
c0102d0d:	6a 51                	push   $0x51
  jmp __alltraps
c0102d0f:	e9 03 fd ff ff       	jmp    c0102a17 <__alltraps>

c0102d14 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102d14:	6a 00                	push   $0x0
  pushl $82
c0102d16:	6a 52                	push   $0x52
  jmp __alltraps
c0102d18:	e9 fa fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d1d <vector83>:
.globl vector83
vector83:
  pushl $0
c0102d1d:	6a 00                	push   $0x0
  pushl $83
c0102d1f:	6a 53                	push   $0x53
  jmp __alltraps
c0102d21:	e9 f1 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d26 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102d26:	6a 00                	push   $0x0
  pushl $84
c0102d28:	6a 54                	push   $0x54
  jmp __alltraps
c0102d2a:	e9 e8 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d2f <vector85>:
.globl vector85
vector85:
  pushl $0
c0102d2f:	6a 00                	push   $0x0
  pushl $85
c0102d31:	6a 55                	push   $0x55
  jmp __alltraps
c0102d33:	e9 df fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d38 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102d38:	6a 00                	push   $0x0
  pushl $86
c0102d3a:	6a 56                	push   $0x56
  jmp __alltraps
c0102d3c:	e9 d6 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d41 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102d41:	6a 00                	push   $0x0
  pushl $87
c0102d43:	6a 57                	push   $0x57
  jmp __alltraps
c0102d45:	e9 cd fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d4a <vector88>:
.globl vector88
vector88:
  pushl $0
c0102d4a:	6a 00                	push   $0x0
  pushl $88
c0102d4c:	6a 58                	push   $0x58
  jmp __alltraps
c0102d4e:	e9 c4 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d53 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102d53:	6a 00                	push   $0x0
  pushl $89
c0102d55:	6a 59                	push   $0x59
  jmp __alltraps
c0102d57:	e9 bb fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d5c <vector90>:
.globl vector90
vector90:
  pushl $0
c0102d5c:	6a 00                	push   $0x0
  pushl $90
c0102d5e:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102d60:	e9 b2 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d65 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102d65:	6a 00                	push   $0x0
  pushl $91
c0102d67:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102d69:	e9 a9 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d6e <vector92>:
.globl vector92
vector92:
  pushl $0
c0102d6e:	6a 00                	push   $0x0
  pushl $92
c0102d70:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102d72:	e9 a0 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d77 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102d77:	6a 00                	push   $0x0
  pushl $93
c0102d79:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102d7b:	e9 97 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d80 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102d80:	6a 00                	push   $0x0
  pushl $94
c0102d82:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102d84:	e9 8e fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d89 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102d89:	6a 00                	push   $0x0
  pushl $95
c0102d8b:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102d8d:	e9 85 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d92 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102d92:	6a 00                	push   $0x0
  pushl $96
c0102d94:	6a 60                	push   $0x60
  jmp __alltraps
c0102d96:	e9 7c fc ff ff       	jmp    c0102a17 <__alltraps>

c0102d9b <vector97>:
.globl vector97
vector97:
  pushl $0
c0102d9b:	6a 00                	push   $0x0
  pushl $97
c0102d9d:	6a 61                	push   $0x61
  jmp __alltraps
c0102d9f:	e9 73 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102da4 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102da4:	6a 00                	push   $0x0
  pushl $98
c0102da6:	6a 62                	push   $0x62
  jmp __alltraps
c0102da8:	e9 6a fc ff ff       	jmp    c0102a17 <__alltraps>

c0102dad <vector99>:
.globl vector99
vector99:
  pushl $0
c0102dad:	6a 00                	push   $0x0
  pushl $99
c0102daf:	6a 63                	push   $0x63
  jmp __alltraps
c0102db1:	e9 61 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102db6 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102db6:	6a 00                	push   $0x0
  pushl $100
c0102db8:	6a 64                	push   $0x64
  jmp __alltraps
c0102dba:	e9 58 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102dbf <vector101>:
.globl vector101
vector101:
  pushl $0
c0102dbf:	6a 00                	push   $0x0
  pushl $101
c0102dc1:	6a 65                	push   $0x65
  jmp __alltraps
c0102dc3:	e9 4f fc ff ff       	jmp    c0102a17 <__alltraps>

c0102dc8 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102dc8:	6a 00                	push   $0x0
  pushl $102
c0102dca:	6a 66                	push   $0x66
  jmp __alltraps
c0102dcc:	e9 46 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102dd1 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102dd1:	6a 00                	push   $0x0
  pushl $103
c0102dd3:	6a 67                	push   $0x67
  jmp __alltraps
c0102dd5:	e9 3d fc ff ff       	jmp    c0102a17 <__alltraps>

c0102dda <vector104>:
.globl vector104
vector104:
  pushl $0
c0102dda:	6a 00                	push   $0x0
  pushl $104
c0102ddc:	6a 68                	push   $0x68
  jmp __alltraps
c0102dde:	e9 34 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102de3 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102de3:	6a 00                	push   $0x0
  pushl $105
c0102de5:	6a 69                	push   $0x69
  jmp __alltraps
c0102de7:	e9 2b fc ff ff       	jmp    c0102a17 <__alltraps>

c0102dec <vector106>:
.globl vector106
vector106:
  pushl $0
c0102dec:	6a 00                	push   $0x0
  pushl $106
c0102dee:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102df0:	e9 22 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102df5 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102df5:	6a 00                	push   $0x0
  pushl $107
c0102df7:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102df9:	e9 19 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102dfe <vector108>:
.globl vector108
vector108:
  pushl $0
c0102dfe:	6a 00                	push   $0x0
  pushl $108
c0102e00:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102e02:	e9 10 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102e07 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102e07:	6a 00                	push   $0x0
  pushl $109
c0102e09:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102e0b:	e9 07 fc ff ff       	jmp    c0102a17 <__alltraps>

c0102e10 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102e10:	6a 00                	push   $0x0
  pushl $110
c0102e12:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102e14:	e9 fe fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e19 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102e19:	6a 00                	push   $0x0
  pushl $111
c0102e1b:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102e1d:	e9 f5 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e22 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102e22:	6a 00                	push   $0x0
  pushl $112
c0102e24:	6a 70                	push   $0x70
  jmp __alltraps
c0102e26:	e9 ec fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e2b <vector113>:
.globl vector113
vector113:
  pushl $0
c0102e2b:	6a 00                	push   $0x0
  pushl $113
c0102e2d:	6a 71                	push   $0x71
  jmp __alltraps
c0102e2f:	e9 e3 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e34 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102e34:	6a 00                	push   $0x0
  pushl $114
c0102e36:	6a 72                	push   $0x72
  jmp __alltraps
c0102e38:	e9 da fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e3d <vector115>:
.globl vector115
vector115:
  pushl $0
c0102e3d:	6a 00                	push   $0x0
  pushl $115
c0102e3f:	6a 73                	push   $0x73
  jmp __alltraps
c0102e41:	e9 d1 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e46 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102e46:	6a 00                	push   $0x0
  pushl $116
c0102e48:	6a 74                	push   $0x74
  jmp __alltraps
c0102e4a:	e9 c8 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e4f <vector117>:
.globl vector117
vector117:
  pushl $0
c0102e4f:	6a 00                	push   $0x0
  pushl $117
c0102e51:	6a 75                	push   $0x75
  jmp __alltraps
c0102e53:	e9 bf fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e58 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102e58:	6a 00                	push   $0x0
  pushl $118
c0102e5a:	6a 76                	push   $0x76
  jmp __alltraps
c0102e5c:	e9 b6 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e61 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102e61:	6a 00                	push   $0x0
  pushl $119
c0102e63:	6a 77                	push   $0x77
  jmp __alltraps
c0102e65:	e9 ad fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e6a <vector120>:
.globl vector120
vector120:
  pushl $0
c0102e6a:	6a 00                	push   $0x0
  pushl $120
c0102e6c:	6a 78                	push   $0x78
  jmp __alltraps
c0102e6e:	e9 a4 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e73 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102e73:	6a 00                	push   $0x0
  pushl $121
c0102e75:	6a 79                	push   $0x79
  jmp __alltraps
c0102e77:	e9 9b fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e7c <vector122>:
.globl vector122
vector122:
  pushl $0
c0102e7c:	6a 00                	push   $0x0
  pushl $122
c0102e7e:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102e80:	e9 92 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e85 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102e85:	6a 00                	push   $0x0
  pushl $123
c0102e87:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102e89:	e9 89 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e8e <vector124>:
.globl vector124
vector124:
  pushl $0
c0102e8e:	6a 00                	push   $0x0
  pushl $124
c0102e90:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102e92:	e9 80 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102e97 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102e97:	6a 00                	push   $0x0
  pushl $125
c0102e99:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102e9b:	e9 77 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102ea0 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102ea0:	6a 00                	push   $0x0
  pushl $126
c0102ea2:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102ea4:	e9 6e fb ff ff       	jmp    c0102a17 <__alltraps>

c0102ea9 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102ea9:	6a 00                	push   $0x0
  pushl $127
c0102eab:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102ead:	e9 65 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102eb2 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102eb2:	6a 00                	push   $0x0
  pushl $128
c0102eb4:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102eb9:	e9 59 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102ebe <vector129>:
.globl vector129
vector129:
  pushl $0
c0102ebe:	6a 00                	push   $0x0
  pushl $129
c0102ec0:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102ec5:	e9 4d fb ff ff       	jmp    c0102a17 <__alltraps>

c0102eca <vector130>:
.globl vector130
vector130:
  pushl $0
c0102eca:	6a 00                	push   $0x0
  pushl $130
c0102ecc:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102ed1:	e9 41 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102ed6 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102ed6:	6a 00                	push   $0x0
  pushl $131
c0102ed8:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102edd:	e9 35 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102ee2 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102ee2:	6a 00                	push   $0x0
  pushl $132
c0102ee4:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102ee9:	e9 29 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102eee <vector133>:
.globl vector133
vector133:
  pushl $0
c0102eee:	6a 00                	push   $0x0
  pushl $133
c0102ef0:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102ef5:	e9 1d fb ff ff       	jmp    c0102a17 <__alltraps>

c0102efa <vector134>:
.globl vector134
vector134:
  pushl $0
c0102efa:	6a 00                	push   $0x0
  pushl $134
c0102efc:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102f01:	e9 11 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102f06 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102f06:	6a 00                	push   $0x0
  pushl $135
c0102f08:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102f0d:	e9 05 fb ff ff       	jmp    c0102a17 <__alltraps>

c0102f12 <vector136>:
.globl vector136
vector136:
  pushl $0
c0102f12:	6a 00                	push   $0x0
  pushl $136
c0102f14:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102f19:	e9 f9 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f1e <vector137>:
.globl vector137
vector137:
  pushl $0
c0102f1e:	6a 00                	push   $0x0
  pushl $137
c0102f20:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102f25:	e9 ed fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f2a <vector138>:
.globl vector138
vector138:
  pushl $0
c0102f2a:	6a 00                	push   $0x0
  pushl $138
c0102f2c:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102f31:	e9 e1 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f36 <vector139>:
.globl vector139
vector139:
  pushl $0
c0102f36:	6a 00                	push   $0x0
  pushl $139
c0102f38:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102f3d:	e9 d5 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f42 <vector140>:
.globl vector140
vector140:
  pushl $0
c0102f42:	6a 00                	push   $0x0
  pushl $140
c0102f44:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102f49:	e9 c9 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f4e <vector141>:
.globl vector141
vector141:
  pushl $0
c0102f4e:	6a 00                	push   $0x0
  pushl $141
c0102f50:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102f55:	e9 bd fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f5a <vector142>:
.globl vector142
vector142:
  pushl $0
c0102f5a:	6a 00                	push   $0x0
  pushl $142
c0102f5c:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102f61:	e9 b1 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f66 <vector143>:
.globl vector143
vector143:
  pushl $0
c0102f66:	6a 00                	push   $0x0
  pushl $143
c0102f68:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102f6d:	e9 a5 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f72 <vector144>:
.globl vector144
vector144:
  pushl $0
c0102f72:	6a 00                	push   $0x0
  pushl $144
c0102f74:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102f79:	e9 99 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f7e <vector145>:
.globl vector145
vector145:
  pushl $0
c0102f7e:	6a 00                	push   $0x0
  pushl $145
c0102f80:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102f85:	e9 8d fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f8a <vector146>:
.globl vector146
vector146:
  pushl $0
c0102f8a:	6a 00                	push   $0x0
  pushl $146
c0102f8c:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0102f91:	e9 81 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102f96 <vector147>:
.globl vector147
vector147:
  pushl $0
c0102f96:	6a 00                	push   $0x0
  pushl $147
c0102f98:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0102f9d:	e9 75 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102fa2 <vector148>:
.globl vector148
vector148:
  pushl $0
c0102fa2:	6a 00                	push   $0x0
  pushl $148
c0102fa4:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0102fa9:	e9 69 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102fae <vector149>:
.globl vector149
vector149:
  pushl $0
c0102fae:	6a 00                	push   $0x0
  pushl $149
c0102fb0:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0102fb5:	e9 5d fa ff ff       	jmp    c0102a17 <__alltraps>

c0102fba <vector150>:
.globl vector150
vector150:
  pushl $0
c0102fba:	6a 00                	push   $0x0
  pushl $150
c0102fbc:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0102fc1:	e9 51 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102fc6 <vector151>:
.globl vector151
vector151:
  pushl $0
c0102fc6:	6a 00                	push   $0x0
  pushl $151
c0102fc8:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0102fcd:	e9 45 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102fd2 <vector152>:
.globl vector152
vector152:
  pushl $0
c0102fd2:	6a 00                	push   $0x0
  pushl $152
c0102fd4:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0102fd9:	e9 39 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102fde <vector153>:
.globl vector153
vector153:
  pushl $0
c0102fde:	6a 00                	push   $0x0
  pushl $153
c0102fe0:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0102fe5:	e9 2d fa ff ff       	jmp    c0102a17 <__alltraps>

c0102fea <vector154>:
.globl vector154
vector154:
  pushl $0
c0102fea:	6a 00                	push   $0x0
  pushl $154
c0102fec:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0102ff1:	e9 21 fa ff ff       	jmp    c0102a17 <__alltraps>

c0102ff6 <vector155>:
.globl vector155
vector155:
  pushl $0
c0102ff6:	6a 00                	push   $0x0
  pushl $155
c0102ff8:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0102ffd:	e9 15 fa ff ff       	jmp    c0102a17 <__alltraps>

c0103002 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103002:	6a 00                	push   $0x0
  pushl $156
c0103004:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103009:	e9 09 fa ff ff       	jmp    c0102a17 <__alltraps>

c010300e <vector157>:
.globl vector157
vector157:
  pushl $0
c010300e:	6a 00                	push   $0x0
  pushl $157
c0103010:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103015:	e9 fd f9 ff ff       	jmp    c0102a17 <__alltraps>

c010301a <vector158>:
.globl vector158
vector158:
  pushl $0
c010301a:	6a 00                	push   $0x0
  pushl $158
c010301c:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103021:	e9 f1 f9 ff ff       	jmp    c0102a17 <__alltraps>

c0103026 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103026:	6a 00                	push   $0x0
  pushl $159
c0103028:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010302d:	e9 e5 f9 ff ff       	jmp    c0102a17 <__alltraps>

c0103032 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103032:	6a 00                	push   $0x0
  pushl $160
c0103034:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103039:	e9 d9 f9 ff ff       	jmp    c0102a17 <__alltraps>

c010303e <vector161>:
.globl vector161
vector161:
  pushl $0
c010303e:	6a 00                	push   $0x0
  pushl $161
c0103040:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103045:	e9 cd f9 ff ff       	jmp    c0102a17 <__alltraps>

c010304a <vector162>:
.globl vector162
vector162:
  pushl $0
c010304a:	6a 00                	push   $0x0
  pushl $162
c010304c:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103051:	e9 c1 f9 ff ff       	jmp    c0102a17 <__alltraps>

c0103056 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103056:	6a 00                	push   $0x0
  pushl $163
c0103058:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010305d:	e9 b5 f9 ff ff       	jmp    c0102a17 <__alltraps>

c0103062 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103062:	6a 00                	push   $0x0
  pushl $164
c0103064:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103069:	e9 a9 f9 ff ff       	jmp    c0102a17 <__alltraps>

c010306e <vector165>:
.globl vector165
vector165:
  pushl $0
c010306e:	6a 00                	push   $0x0
  pushl $165
c0103070:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103075:	e9 9d f9 ff ff       	jmp    c0102a17 <__alltraps>

c010307a <vector166>:
.globl vector166
vector166:
  pushl $0
c010307a:	6a 00                	push   $0x0
  pushl $166
c010307c:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103081:	e9 91 f9 ff ff       	jmp    c0102a17 <__alltraps>

c0103086 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103086:	6a 00                	push   $0x0
  pushl $167
c0103088:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010308d:	e9 85 f9 ff ff       	jmp    c0102a17 <__alltraps>

c0103092 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103092:	6a 00                	push   $0x0
  pushl $168
c0103094:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103099:	e9 79 f9 ff ff       	jmp    c0102a17 <__alltraps>

c010309e <vector169>:
.globl vector169
vector169:
  pushl $0
c010309e:	6a 00                	push   $0x0
  pushl $169
c01030a0:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01030a5:	e9 6d f9 ff ff       	jmp    c0102a17 <__alltraps>

c01030aa <vector170>:
.globl vector170
vector170:
  pushl $0
c01030aa:	6a 00                	push   $0x0
  pushl $170
c01030ac:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01030b1:	e9 61 f9 ff ff       	jmp    c0102a17 <__alltraps>

c01030b6 <vector171>:
.globl vector171
vector171:
  pushl $0
c01030b6:	6a 00                	push   $0x0
  pushl $171
c01030b8:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01030bd:	e9 55 f9 ff ff       	jmp    c0102a17 <__alltraps>

c01030c2 <vector172>:
.globl vector172
vector172:
  pushl $0
c01030c2:	6a 00                	push   $0x0
  pushl $172
c01030c4:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01030c9:	e9 49 f9 ff ff       	jmp    c0102a17 <__alltraps>

c01030ce <vector173>:
.globl vector173
vector173:
  pushl $0
c01030ce:	6a 00                	push   $0x0
  pushl $173
c01030d0:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01030d5:	e9 3d f9 ff ff       	jmp    c0102a17 <__alltraps>

c01030da <vector174>:
.globl vector174
vector174:
  pushl $0
c01030da:	6a 00                	push   $0x0
  pushl $174
c01030dc:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01030e1:	e9 31 f9 ff ff       	jmp    c0102a17 <__alltraps>

c01030e6 <vector175>:
.globl vector175
vector175:
  pushl $0
c01030e6:	6a 00                	push   $0x0
  pushl $175
c01030e8:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01030ed:	e9 25 f9 ff ff       	jmp    c0102a17 <__alltraps>

c01030f2 <vector176>:
.globl vector176
vector176:
  pushl $0
c01030f2:	6a 00                	push   $0x0
  pushl $176
c01030f4:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01030f9:	e9 19 f9 ff ff       	jmp    c0102a17 <__alltraps>

c01030fe <vector177>:
.globl vector177
vector177:
  pushl $0
c01030fe:	6a 00                	push   $0x0
  pushl $177
c0103100:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103105:	e9 0d f9 ff ff       	jmp    c0102a17 <__alltraps>

c010310a <vector178>:
.globl vector178
vector178:
  pushl $0
c010310a:	6a 00                	push   $0x0
  pushl $178
c010310c:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103111:	e9 01 f9 ff ff       	jmp    c0102a17 <__alltraps>

c0103116 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103116:	6a 00                	push   $0x0
  pushl $179
c0103118:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010311d:	e9 f5 f8 ff ff       	jmp    c0102a17 <__alltraps>

c0103122 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103122:	6a 00                	push   $0x0
  pushl $180
c0103124:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103129:	e9 e9 f8 ff ff       	jmp    c0102a17 <__alltraps>

c010312e <vector181>:
.globl vector181
vector181:
  pushl $0
c010312e:	6a 00                	push   $0x0
  pushl $181
c0103130:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103135:	e9 dd f8 ff ff       	jmp    c0102a17 <__alltraps>

c010313a <vector182>:
.globl vector182
vector182:
  pushl $0
c010313a:	6a 00                	push   $0x0
  pushl $182
c010313c:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103141:	e9 d1 f8 ff ff       	jmp    c0102a17 <__alltraps>

c0103146 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103146:	6a 00                	push   $0x0
  pushl $183
c0103148:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010314d:	e9 c5 f8 ff ff       	jmp    c0102a17 <__alltraps>

c0103152 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103152:	6a 00                	push   $0x0
  pushl $184
c0103154:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103159:	e9 b9 f8 ff ff       	jmp    c0102a17 <__alltraps>

c010315e <vector185>:
.globl vector185
vector185:
  pushl $0
c010315e:	6a 00                	push   $0x0
  pushl $185
c0103160:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103165:	e9 ad f8 ff ff       	jmp    c0102a17 <__alltraps>

c010316a <vector186>:
.globl vector186
vector186:
  pushl $0
c010316a:	6a 00                	push   $0x0
  pushl $186
c010316c:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103171:	e9 a1 f8 ff ff       	jmp    c0102a17 <__alltraps>

c0103176 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103176:	6a 00                	push   $0x0
  pushl $187
c0103178:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010317d:	e9 95 f8 ff ff       	jmp    c0102a17 <__alltraps>

c0103182 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103182:	6a 00                	push   $0x0
  pushl $188
c0103184:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103189:	e9 89 f8 ff ff       	jmp    c0102a17 <__alltraps>

c010318e <vector189>:
.globl vector189
vector189:
  pushl $0
c010318e:	6a 00                	push   $0x0
  pushl $189
c0103190:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103195:	e9 7d f8 ff ff       	jmp    c0102a17 <__alltraps>

c010319a <vector190>:
.globl vector190
vector190:
  pushl $0
c010319a:	6a 00                	push   $0x0
  pushl $190
c010319c:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01031a1:	e9 71 f8 ff ff       	jmp    c0102a17 <__alltraps>

c01031a6 <vector191>:
.globl vector191
vector191:
  pushl $0
c01031a6:	6a 00                	push   $0x0
  pushl $191
c01031a8:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01031ad:	e9 65 f8 ff ff       	jmp    c0102a17 <__alltraps>

c01031b2 <vector192>:
.globl vector192
vector192:
  pushl $0
c01031b2:	6a 00                	push   $0x0
  pushl $192
c01031b4:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01031b9:	e9 59 f8 ff ff       	jmp    c0102a17 <__alltraps>

c01031be <vector193>:
.globl vector193
vector193:
  pushl $0
c01031be:	6a 00                	push   $0x0
  pushl $193
c01031c0:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01031c5:	e9 4d f8 ff ff       	jmp    c0102a17 <__alltraps>

c01031ca <vector194>:
.globl vector194
vector194:
  pushl $0
c01031ca:	6a 00                	push   $0x0
  pushl $194
c01031cc:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01031d1:	e9 41 f8 ff ff       	jmp    c0102a17 <__alltraps>

c01031d6 <vector195>:
.globl vector195
vector195:
  pushl $0
c01031d6:	6a 00                	push   $0x0
  pushl $195
c01031d8:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01031dd:	e9 35 f8 ff ff       	jmp    c0102a17 <__alltraps>

c01031e2 <vector196>:
.globl vector196
vector196:
  pushl $0
c01031e2:	6a 00                	push   $0x0
  pushl $196
c01031e4:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01031e9:	e9 29 f8 ff ff       	jmp    c0102a17 <__alltraps>

c01031ee <vector197>:
.globl vector197
vector197:
  pushl $0
c01031ee:	6a 00                	push   $0x0
  pushl $197
c01031f0:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01031f5:	e9 1d f8 ff ff       	jmp    c0102a17 <__alltraps>

c01031fa <vector198>:
.globl vector198
vector198:
  pushl $0
c01031fa:	6a 00                	push   $0x0
  pushl $198
c01031fc:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103201:	e9 11 f8 ff ff       	jmp    c0102a17 <__alltraps>

c0103206 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103206:	6a 00                	push   $0x0
  pushl $199
c0103208:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010320d:	e9 05 f8 ff ff       	jmp    c0102a17 <__alltraps>

c0103212 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103212:	6a 00                	push   $0x0
  pushl $200
c0103214:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103219:	e9 f9 f7 ff ff       	jmp    c0102a17 <__alltraps>

c010321e <vector201>:
.globl vector201
vector201:
  pushl $0
c010321e:	6a 00                	push   $0x0
  pushl $201
c0103220:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103225:	e9 ed f7 ff ff       	jmp    c0102a17 <__alltraps>

c010322a <vector202>:
.globl vector202
vector202:
  pushl $0
c010322a:	6a 00                	push   $0x0
  pushl $202
c010322c:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103231:	e9 e1 f7 ff ff       	jmp    c0102a17 <__alltraps>

c0103236 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103236:	6a 00                	push   $0x0
  pushl $203
c0103238:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010323d:	e9 d5 f7 ff ff       	jmp    c0102a17 <__alltraps>

c0103242 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103242:	6a 00                	push   $0x0
  pushl $204
c0103244:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103249:	e9 c9 f7 ff ff       	jmp    c0102a17 <__alltraps>

c010324e <vector205>:
.globl vector205
vector205:
  pushl $0
c010324e:	6a 00                	push   $0x0
  pushl $205
c0103250:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103255:	e9 bd f7 ff ff       	jmp    c0102a17 <__alltraps>

c010325a <vector206>:
.globl vector206
vector206:
  pushl $0
c010325a:	6a 00                	push   $0x0
  pushl $206
c010325c:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103261:	e9 b1 f7 ff ff       	jmp    c0102a17 <__alltraps>

c0103266 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103266:	6a 00                	push   $0x0
  pushl $207
c0103268:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010326d:	e9 a5 f7 ff ff       	jmp    c0102a17 <__alltraps>

c0103272 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103272:	6a 00                	push   $0x0
  pushl $208
c0103274:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103279:	e9 99 f7 ff ff       	jmp    c0102a17 <__alltraps>

c010327e <vector209>:
.globl vector209
vector209:
  pushl $0
c010327e:	6a 00                	push   $0x0
  pushl $209
c0103280:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103285:	e9 8d f7 ff ff       	jmp    c0102a17 <__alltraps>

c010328a <vector210>:
.globl vector210
vector210:
  pushl $0
c010328a:	6a 00                	push   $0x0
  pushl $210
c010328c:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103291:	e9 81 f7 ff ff       	jmp    c0102a17 <__alltraps>

c0103296 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103296:	6a 00                	push   $0x0
  pushl $211
c0103298:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c010329d:	e9 75 f7 ff ff       	jmp    c0102a17 <__alltraps>

c01032a2 <vector212>:
.globl vector212
vector212:
  pushl $0
c01032a2:	6a 00                	push   $0x0
  pushl $212
c01032a4:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01032a9:	e9 69 f7 ff ff       	jmp    c0102a17 <__alltraps>

c01032ae <vector213>:
.globl vector213
vector213:
  pushl $0
c01032ae:	6a 00                	push   $0x0
  pushl $213
c01032b0:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01032b5:	e9 5d f7 ff ff       	jmp    c0102a17 <__alltraps>

c01032ba <vector214>:
.globl vector214
vector214:
  pushl $0
c01032ba:	6a 00                	push   $0x0
  pushl $214
c01032bc:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01032c1:	e9 51 f7 ff ff       	jmp    c0102a17 <__alltraps>

c01032c6 <vector215>:
.globl vector215
vector215:
  pushl $0
c01032c6:	6a 00                	push   $0x0
  pushl $215
c01032c8:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01032cd:	e9 45 f7 ff ff       	jmp    c0102a17 <__alltraps>

c01032d2 <vector216>:
.globl vector216
vector216:
  pushl $0
c01032d2:	6a 00                	push   $0x0
  pushl $216
c01032d4:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01032d9:	e9 39 f7 ff ff       	jmp    c0102a17 <__alltraps>

c01032de <vector217>:
.globl vector217
vector217:
  pushl $0
c01032de:	6a 00                	push   $0x0
  pushl $217
c01032e0:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01032e5:	e9 2d f7 ff ff       	jmp    c0102a17 <__alltraps>

c01032ea <vector218>:
.globl vector218
vector218:
  pushl $0
c01032ea:	6a 00                	push   $0x0
  pushl $218
c01032ec:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01032f1:	e9 21 f7 ff ff       	jmp    c0102a17 <__alltraps>

c01032f6 <vector219>:
.globl vector219
vector219:
  pushl $0
c01032f6:	6a 00                	push   $0x0
  pushl $219
c01032f8:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01032fd:	e9 15 f7 ff ff       	jmp    c0102a17 <__alltraps>

c0103302 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103302:	6a 00                	push   $0x0
  pushl $220
c0103304:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103309:	e9 09 f7 ff ff       	jmp    c0102a17 <__alltraps>

c010330e <vector221>:
.globl vector221
vector221:
  pushl $0
c010330e:	6a 00                	push   $0x0
  pushl $221
c0103310:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103315:	e9 fd f6 ff ff       	jmp    c0102a17 <__alltraps>

c010331a <vector222>:
.globl vector222
vector222:
  pushl $0
c010331a:	6a 00                	push   $0x0
  pushl $222
c010331c:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103321:	e9 f1 f6 ff ff       	jmp    c0102a17 <__alltraps>

c0103326 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103326:	6a 00                	push   $0x0
  pushl $223
c0103328:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010332d:	e9 e5 f6 ff ff       	jmp    c0102a17 <__alltraps>

c0103332 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103332:	6a 00                	push   $0x0
  pushl $224
c0103334:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103339:	e9 d9 f6 ff ff       	jmp    c0102a17 <__alltraps>

c010333e <vector225>:
.globl vector225
vector225:
  pushl $0
c010333e:	6a 00                	push   $0x0
  pushl $225
c0103340:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103345:	e9 cd f6 ff ff       	jmp    c0102a17 <__alltraps>

c010334a <vector226>:
.globl vector226
vector226:
  pushl $0
c010334a:	6a 00                	push   $0x0
  pushl $226
c010334c:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103351:	e9 c1 f6 ff ff       	jmp    c0102a17 <__alltraps>

c0103356 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103356:	6a 00                	push   $0x0
  pushl $227
c0103358:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010335d:	e9 b5 f6 ff ff       	jmp    c0102a17 <__alltraps>

c0103362 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103362:	6a 00                	push   $0x0
  pushl $228
c0103364:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103369:	e9 a9 f6 ff ff       	jmp    c0102a17 <__alltraps>

c010336e <vector229>:
.globl vector229
vector229:
  pushl $0
c010336e:	6a 00                	push   $0x0
  pushl $229
c0103370:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103375:	e9 9d f6 ff ff       	jmp    c0102a17 <__alltraps>

c010337a <vector230>:
.globl vector230
vector230:
  pushl $0
c010337a:	6a 00                	push   $0x0
  pushl $230
c010337c:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103381:	e9 91 f6 ff ff       	jmp    c0102a17 <__alltraps>

c0103386 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103386:	6a 00                	push   $0x0
  pushl $231
c0103388:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010338d:	e9 85 f6 ff ff       	jmp    c0102a17 <__alltraps>

c0103392 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103392:	6a 00                	push   $0x0
  pushl $232
c0103394:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103399:	e9 79 f6 ff ff       	jmp    c0102a17 <__alltraps>

c010339e <vector233>:
.globl vector233
vector233:
  pushl $0
c010339e:	6a 00                	push   $0x0
  pushl $233
c01033a0:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01033a5:	e9 6d f6 ff ff       	jmp    c0102a17 <__alltraps>

c01033aa <vector234>:
.globl vector234
vector234:
  pushl $0
c01033aa:	6a 00                	push   $0x0
  pushl $234
c01033ac:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01033b1:	e9 61 f6 ff ff       	jmp    c0102a17 <__alltraps>

c01033b6 <vector235>:
.globl vector235
vector235:
  pushl $0
c01033b6:	6a 00                	push   $0x0
  pushl $235
c01033b8:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01033bd:	e9 55 f6 ff ff       	jmp    c0102a17 <__alltraps>

c01033c2 <vector236>:
.globl vector236
vector236:
  pushl $0
c01033c2:	6a 00                	push   $0x0
  pushl $236
c01033c4:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01033c9:	e9 49 f6 ff ff       	jmp    c0102a17 <__alltraps>

c01033ce <vector237>:
.globl vector237
vector237:
  pushl $0
c01033ce:	6a 00                	push   $0x0
  pushl $237
c01033d0:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01033d5:	e9 3d f6 ff ff       	jmp    c0102a17 <__alltraps>

c01033da <vector238>:
.globl vector238
vector238:
  pushl $0
c01033da:	6a 00                	push   $0x0
  pushl $238
c01033dc:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01033e1:	e9 31 f6 ff ff       	jmp    c0102a17 <__alltraps>

c01033e6 <vector239>:
.globl vector239
vector239:
  pushl $0
c01033e6:	6a 00                	push   $0x0
  pushl $239
c01033e8:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01033ed:	e9 25 f6 ff ff       	jmp    c0102a17 <__alltraps>

c01033f2 <vector240>:
.globl vector240
vector240:
  pushl $0
c01033f2:	6a 00                	push   $0x0
  pushl $240
c01033f4:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01033f9:	e9 19 f6 ff ff       	jmp    c0102a17 <__alltraps>

c01033fe <vector241>:
.globl vector241
vector241:
  pushl $0
c01033fe:	6a 00                	push   $0x0
  pushl $241
c0103400:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103405:	e9 0d f6 ff ff       	jmp    c0102a17 <__alltraps>

c010340a <vector242>:
.globl vector242
vector242:
  pushl $0
c010340a:	6a 00                	push   $0x0
  pushl $242
c010340c:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103411:	e9 01 f6 ff ff       	jmp    c0102a17 <__alltraps>

c0103416 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103416:	6a 00                	push   $0x0
  pushl $243
c0103418:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010341d:	e9 f5 f5 ff ff       	jmp    c0102a17 <__alltraps>

c0103422 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103422:	6a 00                	push   $0x0
  pushl $244
c0103424:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103429:	e9 e9 f5 ff ff       	jmp    c0102a17 <__alltraps>

c010342e <vector245>:
.globl vector245
vector245:
  pushl $0
c010342e:	6a 00                	push   $0x0
  pushl $245
c0103430:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103435:	e9 dd f5 ff ff       	jmp    c0102a17 <__alltraps>

c010343a <vector246>:
.globl vector246
vector246:
  pushl $0
c010343a:	6a 00                	push   $0x0
  pushl $246
c010343c:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103441:	e9 d1 f5 ff ff       	jmp    c0102a17 <__alltraps>

c0103446 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103446:	6a 00                	push   $0x0
  pushl $247
c0103448:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010344d:	e9 c5 f5 ff ff       	jmp    c0102a17 <__alltraps>

c0103452 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103452:	6a 00                	push   $0x0
  pushl $248
c0103454:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103459:	e9 b9 f5 ff ff       	jmp    c0102a17 <__alltraps>

c010345e <vector249>:
.globl vector249
vector249:
  pushl $0
c010345e:	6a 00                	push   $0x0
  pushl $249
c0103460:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103465:	e9 ad f5 ff ff       	jmp    c0102a17 <__alltraps>

c010346a <vector250>:
.globl vector250
vector250:
  pushl $0
c010346a:	6a 00                	push   $0x0
  pushl $250
c010346c:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103471:	e9 a1 f5 ff ff       	jmp    c0102a17 <__alltraps>

c0103476 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103476:	6a 00                	push   $0x0
  pushl $251
c0103478:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010347d:	e9 95 f5 ff ff       	jmp    c0102a17 <__alltraps>

c0103482 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103482:	6a 00                	push   $0x0
  pushl $252
c0103484:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103489:	e9 89 f5 ff ff       	jmp    c0102a17 <__alltraps>

c010348e <vector253>:
.globl vector253
vector253:
  pushl $0
c010348e:	6a 00                	push   $0x0
  pushl $253
c0103490:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103495:	e9 7d f5 ff ff       	jmp    c0102a17 <__alltraps>

c010349a <vector254>:
.globl vector254
vector254:
  pushl $0
c010349a:	6a 00                	push   $0x0
  pushl $254
c010349c:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01034a1:	e9 71 f5 ff ff       	jmp    c0102a17 <__alltraps>

c01034a6 <vector255>:
.globl vector255
vector255:
  pushl $0
c01034a6:	6a 00                	push   $0x0
  pushl $255
c01034a8:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01034ad:	e9 65 f5 ff ff       	jmp    c0102a17 <__alltraps>

c01034b2 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01034b2:	55                   	push   %ebp
c01034b3:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01034b5:	8b 55 08             	mov    0x8(%ebp),%edx
c01034b8:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c01034bd:	29 c2                	sub    %eax,%edx
c01034bf:	89 d0                	mov    %edx,%eax
c01034c1:	c1 f8 05             	sar    $0x5,%eax
}
c01034c4:	5d                   	pop    %ebp
c01034c5:	c3                   	ret    

c01034c6 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01034c6:	55                   	push   %ebp
c01034c7:	89 e5                	mov    %esp,%ebp
c01034c9:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01034cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01034cf:	89 04 24             	mov    %eax,(%esp)
c01034d2:	e8 db ff ff ff       	call   c01034b2 <page2ppn>
c01034d7:	c1 e0 0c             	shl    $0xc,%eax
}
c01034da:	c9                   	leave  
c01034db:	c3                   	ret    

c01034dc <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01034dc:	55                   	push   %ebp
c01034dd:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01034df:	8b 45 08             	mov    0x8(%ebp),%eax
c01034e2:	8b 00                	mov    (%eax),%eax
}
c01034e4:	5d                   	pop    %ebp
c01034e5:	c3                   	ret    

c01034e6 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01034e6:	55                   	push   %ebp
c01034e7:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01034e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01034ec:	8b 55 0c             	mov    0xc(%ebp),%edx
c01034ef:	89 10                	mov    %edx,(%eax)
}
c01034f1:	5d                   	pop    %ebp
c01034f2:	c3                   	ret    

c01034f3 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01034f3:	55                   	push   %ebp
c01034f4:	89 e5                	mov    %esp,%ebp
c01034f6:	83 ec 10             	sub    $0x10,%esp
c01034f9:	c7 45 fc dc 54 1c c0 	movl   $0xc01c54dc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103500:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103503:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103506:	89 50 04             	mov    %edx,0x4(%eax)
c0103509:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010350c:	8b 50 04             	mov    0x4(%eax),%edx
c010350f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103512:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103514:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c010351b:	00 00 00 
}
c010351e:	c9                   	leave  
c010351f:	c3                   	ret    

c0103520 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0103520:	55                   	push   %ebp
c0103521:	89 e5                	mov    %esp,%ebp
c0103523:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0103526:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010352a:	75 24                	jne    c0103550 <default_init_memmap+0x30>
c010352c:	c7 44 24 0c 10 df 10 	movl   $0xc010df10,0xc(%esp)
c0103533:	c0 
c0103534:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c010353b:	c0 
c010353c:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0103543:	00 
c0103544:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c010354b:	e8 8a d8 ff ff       	call   c0100dda <__panic>
    struct Page *p = base;
c0103550:	8b 45 08             	mov    0x8(%ebp),%eax
c0103553:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103556:	e9 de 00 00 00       	jmp    c0103639 <default_init_memmap+0x119>
        assert(PageReserved(p));
c010355b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010355e:	83 c0 04             	add    $0x4,%eax
c0103561:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103568:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010356b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010356e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103571:	0f a3 10             	bt     %edx,(%eax)
c0103574:	19 c0                	sbb    %eax,%eax
c0103576:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0103579:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010357d:	0f 95 c0             	setne  %al
c0103580:	0f b6 c0             	movzbl %al,%eax
c0103583:	85 c0                	test   %eax,%eax
c0103585:	75 24                	jne    c01035ab <default_init_memmap+0x8b>
c0103587:	c7 44 24 0c 41 df 10 	movl   $0xc010df41,0xc(%esp)
c010358e:	c0 
c010358f:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103596:	c0 
c0103597:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c010359e:	00 
c010359f:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c01035a6:	e8 2f d8 ff ff       	call   c0100dda <__panic>
        p->flags = p->property = 0;
c01035ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035ae:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01035b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035b8:	8b 50 08             	mov    0x8(%eax),%edx
c01035bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035be:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c01035c1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01035c8:	00 
c01035c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035cc:	89 04 24             	mov    %eax,(%esp)
c01035cf:	e8 12 ff ff ff       	call   c01034e6 <set_page_ref>
        SetPageProperty(p);
c01035d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035d7:	83 c0 04             	add    $0x4,%eax
c01035da:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01035e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01035e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01035e7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01035ea:	0f ab 10             	bts    %edx,(%eax)
        list_add_before(&free_list, &(p->page_link));
c01035ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035f0:	83 c0 0c             	add    $0xc,%eax
c01035f3:	c7 45 dc dc 54 1c c0 	movl   $0xc01c54dc,-0x24(%ebp)
c01035fa:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01035fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103600:	8b 00                	mov    (%eax),%eax
c0103602:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103605:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103608:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010360b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010360e:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103611:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103614:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103617:	89 10                	mov    %edx,(%eax)
c0103619:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010361c:	8b 10                	mov    (%eax),%edx
c010361e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103621:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103624:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103627:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010362a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010362d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103630:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103633:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103635:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103639:	8b 45 0c             	mov    0xc(%ebp),%eax
c010363c:	c1 e0 05             	shl    $0x5,%eax
c010363f:	89 c2                	mov    %eax,%edx
c0103641:	8b 45 08             	mov    0x8(%ebp),%eax
c0103644:	01 d0                	add    %edx,%eax
c0103646:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103649:	0f 85 0c ff ff ff    	jne    c010355b <default_init_memmap+0x3b>
        p->flags = p->property = 0;
        set_page_ref(p, 0);
        SetPageProperty(p);
        list_add_before(&free_list, &(p->page_link));
    }
    base->property = n;
c010364f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103652:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103655:	89 50 08             	mov    %edx,0x8(%eax)
    nr_free += n;
c0103658:	8b 15 e4 54 1c c0    	mov    0xc01c54e4,%edx
c010365e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103661:	01 d0                	add    %edx,%eax
c0103663:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
}
c0103668:	c9                   	leave  
c0103669:	c3                   	ret    

c010366a <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c010366a:	55                   	push   %ebp
c010366b:	89 e5                	mov    %esp,%ebp
c010366d:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0103670:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103674:	75 24                	jne    c010369a <default_alloc_pages+0x30>
c0103676:	c7 44 24 0c 10 df 10 	movl   $0xc010df10,0xc(%esp)
c010367d:	c0 
c010367e:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103685:	c0 
c0103686:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010368d:	00 
c010368e:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103695:	e8 40 d7 ff ff       	call   c0100dda <__panic>
    if (n > nr_free) {
c010369a:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c010369f:	3b 45 08             	cmp    0x8(%ebp),%eax
c01036a2:	73 0a                	jae    c01036ae <default_alloc_pages+0x44>
        return NULL;
c01036a4:	b8 00 00 00 00       	mov    $0x0,%eax
c01036a9:	e9 37 01 00 00       	jmp    c01037e5 <default_alloc_pages+0x17b>
    }

    list_entry_t *len;			// 跟以前的p和q双指针差不多，le相当于前指针，len后指针
    list_entry_t *le = &free_list;
c01036ae:	c7 45 f4 dc 54 1c c0 	movl   $0xc01c54dc,-0xc(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01036b5:	e9 0a 01 00 00       	jmp    c01037c4 <default_alloc_pages+0x15a>
        struct Page *p = le2page(le, page_link);
c01036ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036bd:	83 e8 0c             	sub    $0xc,%eax
c01036c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p->property >= n) {
c01036c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01036c6:	8b 40 08             	mov    0x8(%eax),%eax
c01036c9:	3b 45 08             	cmp    0x8(%ebp),%eax
c01036cc:	0f 82 f2 00 00 00    	jb     c01037c4 <default_alloc_pages+0x15a>
            // 分配页数
            int i;
            for (i = 0; i < n; i++) {
c01036d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01036d9:	eb 7c                	jmp    c0103757 <default_alloc_pages+0xed>
c01036db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036de:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01036e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036e4:	8b 40 04             	mov    0x4(%eax),%eax
            	len = list_next(le);
c01036e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
            	struct Page *pp = le2page(le, page_link);
c01036ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036ed:	83 e8 0c             	sub    $0xc,%eax
c01036f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            	// 每一页的标志位改写
            	// 被内核所保留
            	SetPageReserved(pp);
c01036f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01036f6:	83 c0 04             	add    $0x4,%eax
c01036f9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0103700:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103703:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103706:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103709:	0f ab 10             	bts    %edx,(%eax)
            	// 不是头页
            	ClearPageProperty(pp);
c010370c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010370f:	83 c0 04             	add    $0x4,%eax
c0103712:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103719:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010371c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010371f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103722:	0f b3 10             	btr    %edx,(%eax)
c0103725:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103728:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010372b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010372e:	8b 40 04             	mov    0x4(%eax),%eax
c0103731:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103734:	8b 12                	mov    (%edx),%edx
c0103736:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103739:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010373c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010373f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103742:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103745:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103748:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010374b:	89 10                	mov    %edx,(%eax)
            	// 既然分配好了，下一步就将其从freelist中删除
            	list_del(le);
            	le = len;
c010374d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103750:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != &free_list) {
        struct Page *p = le2page(le, page_link);
        if (p->property >= n) {
            // 分配页数
            int i;
            for (i = 0; i < n; i++) {
c0103753:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0103757:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010375a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010375d:	0f 82 78 ff ff ff    	jb     c01036db <default_alloc_pages+0x71>
            	ClearPageProperty(pp);
            	// 既然分配好了，下一步就将其从freelist中删除
            	list_del(le);
            	le = len;
            }
            if (p->property > n) {
c0103763:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103766:	8b 40 08             	mov    0x8(%eax),%eax
c0103769:	3b 45 08             	cmp    0x8(%ebp),%eax
c010376c:	76 12                	jbe    c0103780 <default_alloc_pages+0x116>
				// p指针移动到顶部（这里好象是反着的，其实到了头页）
				// 修改头页的标志位，可参考高书8.3.2
				//struct Page *p = le2page(le, page_link);
				le2page(le, page_link)->property = p->property - n;
c010376e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103771:	8d 50 f4             	lea    -0xc(%eax),%edx
c0103774:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103777:	8b 40 08             	mov    0x8(%eax),%eax
c010377a:	2b 45 08             	sub    0x8(%ebp),%eax
c010377d:	89 42 08             	mov    %eax,0x8(%edx)
			}
            // 修改头页的标志位
            ClearPageProperty(p);
c0103780:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103783:	83 c0 04             	add    $0x4,%eax
c0103786:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010378d:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0103790:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103793:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103796:	0f b3 10             	btr    %edx,(%eax)
            SetPageReserved(p);
c0103799:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010379c:	83 c0 04             	add    $0x4,%eax
c010379f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c01037a6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01037a9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01037ac:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01037af:	0f ab 10             	bts    %edx,(%eax)
            nr_free -= n;
c01037b2:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c01037b7:	2b 45 08             	sub    0x8(%ebp),%eax
c01037ba:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
            return p;
c01037bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037c2:	eb 21                	jmp    c01037e5 <default_alloc_pages+0x17b>
c01037c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c7:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037ca:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01037cd:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }

    list_entry_t *len;			// 跟以前的p和q双指针差不多，le相当于前指针，len后指针
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01037d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01037d3:	81 7d f4 dc 54 1c c0 	cmpl   $0xc01c54dc,-0xc(%ebp)
c01037da:	0f 85 da fe ff ff    	jne    c01036ba <default_alloc_pages+0x50>
            SetPageReserved(p);
            nr_free -= n;
            return p;
        }
    }
    return NULL;
c01037e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01037e5:	c9                   	leave  
c01037e6:	c3                   	ret    

c01037e7 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01037e7:	55                   	push   %ebp
c01037e8:	89 e5                	mov    %esp,%ebp
c01037ea:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c01037ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01037f1:	75 24                	jne    c0103817 <default_free_pages+0x30>
c01037f3:	c7 44 24 0c 10 df 10 	movl   $0xc010df10,0xc(%esp)
c01037fa:	c0 
c01037fb:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103802:	c0 
c0103803:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
c010380a:	00 
c010380b:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103812:	e8 c3 d5 ff ff       	call   c0100dda <__panic>
    // 断言是被内核保留页
    // 这里我不明白为什么申请和释放都标记为“内核保留”？？？
    assert(PageReserved(base));
c0103817:	8b 45 08             	mov    0x8(%ebp),%eax
c010381a:	83 c0 04             	add    $0x4,%eax
c010381d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103824:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103827:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010382a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010382d:	0f a3 10             	bt     %edx,(%eax)
c0103830:	19 c0                	sbb    %eax,%eax
c0103832:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0103835:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103839:	0f 95 c0             	setne  %al
c010383c:	0f b6 c0             	movzbl %al,%eax
c010383f:	85 c0                	test   %eax,%eax
c0103841:	75 24                	jne    c0103867 <default_free_pages+0x80>
c0103843:	c7 44 24 0c 51 df 10 	movl   $0xc010df51,0xc(%esp)
c010384a:	c0 
c010384b:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103852:	c0 
c0103853:	c7 44 24 04 82 00 00 	movl   $0x82,0x4(%esp)
c010385a:	00 
c010385b:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103862:	e8 73 d5 ff ff       	call   c0100dda <__panic>
    struct Page *p;
    list_entry_t *le = &free_list;
c0103867:	c7 45 f0 dc 54 1c c0 	movl   $0xc01c54dc,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010386e:	eb 13                	jmp    c0103883 <default_free_pages+0x9c>
    	p = le2page(le, page_link);
c0103870:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103873:	83 e8 0c             	sub    $0xc,%eax
c0103876:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (p>base) {
c0103879:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010387c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010387f:	76 02                	jbe    c0103883 <default_free_pages+0x9c>
			break;
c0103881:	eb 18                	jmp    c010389b <default_free_pages+0xb4>
c0103883:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103886:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103889:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010388c:	8b 40 04             	mov    0x4(%eax),%eax
    // 断言是被内核保留页
    // 这里我不明白为什么申请和释放都标记为“内核保留”？？？
    assert(PageReserved(base));
    struct Page *p;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010388f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103892:	81 7d f0 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x10(%ebp)
c0103899:	75 d5                	jne    c0103870 <default_free_pages+0x89>
    	p = le2page(le, page_link);
		if (p>base) {
			break;
		}
    }
    for (p=base; p < base + n; p ++) {
c010389b:	8b 45 08             	mov    0x8(%ebp),%eax
c010389e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038a1:	eb 4b                	jmp    c01038ee <default_free_pages+0x107>
    	// 因为被释放了，所以重新加回到freelist中
    	list_add_before(le, &(p->page_link));
c01038a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038a6:	8d 50 0c             	lea    0xc(%eax),%edx
c01038a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01038af:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01038b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038b5:	8b 00                	mov    (%eax),%eax
c01038b7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01038ba:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01038bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01038c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038c3:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01038c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01038c9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01038cc:	89 10                	mov    %edx,(%eax)
c01038ce:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01038d1:	8b 10                	mov    (%eax),%edx
c01038d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01038d6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01038d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01038dc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01038df:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01038e2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01038e5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01038e8:	89 10                	mov    %edx,(%eax)
    	p = le2page(le, page_link);
		if (p>base) {
			break;
		}
    }
    for (p=base; p < base + n; p ++) {
c01038ea:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01038ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038f1:	c1 e0 05             	shl    $0x5,%eax
c01038f4:	89 c2                	mov    %eax,%edx
c01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01038f9:	01 d0                	add    %edx,%eax
c01038fb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01038fe:	77 a3                	ja     c01038a3 <default_free_pages+0xbc>
    	list_add_before(le, &(p->page_link));
    	// 每一页的标志位不用改了，改下头页就行了
    }

    // 下面这几句话是有顺序的？？？
    base->flags = 0;
c0103900:	8b 45 08             	mov    0x8(%ebp),%eax
c0103903:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c010390a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103911:	00 
c0103912:	8b 45 08             	mov    0x8(%ebp),%eax
c0103915:	89 04 24             	mov    %eax,(%esp)
c0103918:	e8 c9 fb ff ff       	call   c01034e6 <set_page_ref>
    // 声明是头页
    SetPageProperty(base);
c010391d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103920:	83 c0 04             	add    $0x4,%eax
c0103923:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c010392a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010392d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103930:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103933:	0f ab 10             	bts    %edx,(%eax)
    // 记录空闲页的数目n
    base->property = n;
c0103936:	8b 45 08             	mov    0x8(%ebp),%eax
c0103939:	8b 55 0c             	mov    0xc(%ebp),%edx
c010393c:	89 50 08             	mov    %edx,0x8(%eax)



    // 向高位合并
    p = le2page(le, page_link);
c010393f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103942:	83 e8 0c             	sub    $0xc,%eax
c0103945:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // p在高地址，base在低地址
    if (p == base + n) {
c0103948:	8b 45 0c             	mov    0xc(%ebp),%eax
c010394b:	c1 e0 05             	shl    $0x5,%eax
c010394e:	89 c2                	mov    %eax,%edx
c0103950:	8b 45 08             	mov    0x8(%ebp),%eax
c0103953:	01 d0                	add    %edx,%eax
c0103955:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103958:	75 1e                	jne    c0103978 <default_free_pages+0x191>
    	// 下面的base的property改下
    	base->property = base->property + p->property;
c010395a:	8b 45 08             	mov    0x8(%ebp),%eax
c010395d:	8b 50 08             	mov    0x8(%eax),%edx
c0103960:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103963:	8b 40 08             	mov    0x8(%eax),%eax
c0103966:	01 c2                	add    %eax,%edx
c0103968:	8b 45 08             	mov    0x8(%ebp),%eax
c010396b:	89 50 08             	mov    %edx,0x8(%eax)
    	// 中间那层打掉了，参考高书图8-5
    	p->property = 0;
c010396e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103971:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }

    // 向低位合并，参考高书图8-6
    // 现在是在空闲结点（高书中间下面的那个），指针先往前移一个结点，就是高书图8-6(a)最中间的结点（p指向的那个）
    le = list_prev(&base->page_link);
c0103978:	8b 45 08             	mov    0x8(%ebp),%eax
c010397b:	83 c0 0c             	add    $0xc,%eax
c010397e:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103981:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103984:	8b 00                	mov    (%eax),%eax
c0103986:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p = le2page(le, page_link);
c0103989:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010398c:	83 e8 0c             	sub    $0xc,%eax
c010398f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // p指向中间上面结点的头页，base指向中间下面的结点的头页
    if (le != &free_list && p == base - 1) {
c0103992:	81 7d f0 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x10(%ebp)
c0103999:	74 57                	je     c01039f2 <default_free_pages+0x20b>
c010399b:	8b 45 08             	mov    0x8(%ebp),%eax
c010399e:	83 e8 20             	sub    $0x20,%eax
c01039a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01039a4:	75 4c                	jne    c01039f2 <default_free_pages+0x20b>
    	// 直到找到右边的空闲页
    	while (le != &free_list) {
c01039a6:	eb 41                	jmp    c01039e9 <default_free_pages+0x202>
    		// 中间上面的结点非空
    		if (p->property > 0) {
c01039a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039ab:	8b 40 08             	mov    0x8(%eax),%eax
c01039ae:	85 c0                	test   %eax,%eax
c01039b0:	74 20                	je     c01039d2 <default_free_pages+0x1eb>
    			p->property = base->property + p->property;
c01039b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01039b5:	8b 50 08             	mov    0x8(%eax),%edx
c01039b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039bb:	8b 40 08             	mov    0x8(%eax),%eax
c01039be:	01 c2                	add    %eax,%edx
c01039c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039c3:	89 50 08             	mov    %edx,0x8(%eax)
    			base->property = 0;
c01039c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01039c9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    			break;
c01039d0:	eb 20                	jmp    c01039f2 <default_free_pages+0x20b>
c01039d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039d5:	89 45 bc             	mov    %eax,-0x44(%ebp)
c01039d8:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01039db:	8b 00                	mov    (%eax),%eax
    		}
    		// 那没找到右边空间页，就往前走
    		le = list_prev(le);
c01039dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    		p = le2page(le, page_link);
c01039e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039e3:	83 e8 0c             	sub    $0xc,%eax
c01039e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    le = list_prev(&base->page_link);
    p = le2page(le, page_link);
    // p指向中间上面结点的头页，base指向中间下面的结点的头页
    if (le != &free_list && p == base - 1) {
    	// 直到找到右边的空闲页
    	while (le != &free_list) {
c01039e9:	81 7d f0 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x10(%ebp)
c01039f0:	75 b6                	jne    c01039a8 <default_free_pages+0x1c1>
    		le = list_prev(le);
    		p = le2page(le, page_link);

    	}
    }
    nr_free += n;
c01039f2:	8b 15 e4 54 1c c0    	mov    0xc01c54e4,%edx
c01039f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039fb:	01 d0                	add    %edx,%eax
c01039fd:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
}
c0103a02:	c9                   	leave  
c0103a03:	c3                   	ret    

c0103a04 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103a04:	55                   	push   %ebp
c0103a05:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103a07:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
}
c0103a0c:	5d                   	pop    %ebp
c0103a0d:	c3                   	ret    

c0103a0e <basic_check>:

static void
basic_check(void) {
c0103a0e:	55                   	push   %ebp
c0103a0f:	89 e5                	mov    %esp,%ebp
c0103a11:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103a14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103a1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a24:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103a27:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103a2e:	e8 dc 15 00 00       	call   c010500f <alloc_pages>
c0103a33:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103a36:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103a3a:	75 24                	jne    c0103a60 <basic_check+0x52>
c0103a3c:	c7 44 24 0c 64 df 10 	movl   $0xc010df64,0xc(%esp)
c0103a43:	c0 
c0103a44:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103a4b:	c0 
c0103a4c:	c7 44 24 04 c5 00 00 	movl   $0xc5,0x4(%esp)
c0103a53:	00 
c0103a54:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103a5b:	e8 7a d3 ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103a60:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103a67:	e8 a3 15 00 00       	call   c010500f <alloc_pages>
c0103a6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a6f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103a73:	75 24                	jne    c0103a99 <basic_check+0x8b>
c0103a75:	c7 44 24 0c 80 df 10 	movl   $0xc010df80,0xc(%esp)
c0103a7c:	c0 
c0103a7d:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103a84:	c0 
c0103a85:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0103a8c:	00 
c0103a8d:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103a94:	e8 41 d3 ff ff       	call   c0100dda <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103a99:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103aa0:	e8 6a 15 00 00       	call   c010500f <alloc_pages>
c0103aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103aa8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103aac:	75 24                	jne    c0103ad2 <basic_check+0xc4>
c0103aae:	c7 44 24 0c 9c df 10 	movl   $0xc010df9c,0xc(%esp)
c0103ab5:	c0 
c0103ab6:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103abd:	c0 
c0103abe:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103ac5:	00 
c0103ac6:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103acd:	e8 08 d3 ff ff       	call   c0100dda <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103ad2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ad5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ad8:	74 10                	je     c0103aea <basic_check+0xdc>
c0103ada:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103add:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103ae0:	74 08                	je     c0103aea <basic_check+0xdc>
c0103ae2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ae5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103ae8:	75 24                	jne    c0103b0e <basic_check+0x100>
c0103aea:	c7 44 24 0c b8 df 10 	movl   $0xc010dfb8,0xc(%esp)
c0103af1:	c0 
c0103af2:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103af9:	c0 
c0103afa:	c7 44 24 04 c9 00 00 	movl   $0xc9,0x4(%esp)
c0103b01:	00 
c0103b02:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103b09:	e8 cc d2 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103b0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b11:	89 04 24             	mov    %eax,(%esp)
c0103b14:	e8 c3 f9 ff ff       	call   c01034dc <page_ref>
c0103b19:	85 c0                	test   %eax,%eax
c0103b1b:	75 1e                	jne    c0103b3b <basic_check+0x12d>
c0103b1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b20:	89 04 24             	mov    %eax,(%esp)
c0103b23:	e8 b4 f9 ff ff       	call   c01034dc <page_ref>
c0103b28:	85 c0                	test   %eax,%eax
c0103b2a:	75 0f                	jne    c0103b3b <basic_check+0x12d>
c0103b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b2f:	89 04 24             	mov    %eax,(%esp)
c0103b32:	e8 a5 f9 ff ff       	call   c01034dc <page_ref>
c0103b37:	85 c0                	test   %eax,%eax
c0103b39:	74 24                	je     c0103b5f <basic_check+0x151>
c0103b3b:	c7 44 24 0c dc df 10 	movl   $0xc010dfdc,0xc(%esp)
c0103b42:	c0 
c0103b43:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103b4a:	c0 
c0103b4b:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103b52:	00 
c0103b53:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103b5a:	e8 7b d2 ff ff       	call   c0100dda <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103b5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b62:	89 04 24             	mov    %eax,(%esp)
c0103b65:	e8 5c f9 ff ff       	call   c01034c6 <page2pa>
c0103b6a:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
c0103b70:	c1 e2 0c             	shl    $0xc,%edx
c0103b73:	39 d0                	cmp    %edx,%eax
c0103b75:	72 24                	jb     c0103b9b <basic_check+0x18d>
c0103b77:	c7 44 24 0c 18 e0 10 	movl   $0xc010e018,0xc(%esp)
c0103b7e:	c0 
c0103b7f:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103b86:	c0 
c0103b87:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0103b8e:	00 
c0103b8f:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103b96:	e8 3f d2 ff ff       	call   c0100dda <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103b9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b9e:	89 04 24             	mov    %eax,(%esp)
c0103ba1:	e8 20 f9 ff ff       	call   c01034c6 <page2pa>
c0103ba6:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
c0103bac:	c1 e2 0c             	shl    $0xc,%edx
c0103baf:	39 d0                	cmp    %edx,%eax
c0103bb1:	72 24                	jb     c0103bd7 <basic_check+0x1c9>
c0103bb3:	c7 44 24 0c 35 e0 10 	movl   $0xc010e035,0xc(%esp)
c0103bba:	c0 
c0103bbb:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103bc2:	c0 
c0103bc3:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103bca:	00 
c0103bcb:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103bd2:	e8 03 d2 ff ff       	call   c0100dda <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bda:	89 04 24             	mov    %eax,(%esp)
c0103bdd:	e8 e4 f8 ff ff       	call   c01034c6 <page2pa>
c0103be2:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
c0103be8:	c1 e2 0c             	shl    $0xc,%edx
c0103beb:	39 d0                	cmp    %edx,%eax
c0103bed:	72 24                	jb     c0103c13 <basic_check+0x205>
c0103bef:	c7 44 24 0c 52 e0 10 	movl   $0xc010e052,0xc(%esp)
c0103bf6:	c0 
c0103bf7:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103bfe:	c0 
c0103bff:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0103c06:	00 
c0103c07:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103c0e:	e8 c7 d1 ff ff       	call   c0100dda <__panic>

    list_entry_t free_list_store = free_list;
c0103c13:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
c0103c18:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
c0103c1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103c21:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103c24:	c7 45 e0 dc 54 1c c0 	movl   $0xc01c54dc,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103c2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c2e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103c31:	89 50 04             	mov    %edx,0x4(%eax)
c0103c34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c37:	8b 50 04             	mov    0x4(%eax),%edx
c0103c3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c3d:	89 10                	mov    %edx,(%eax)
c0103c3f:	c7 45 dc dc 54 1c c0 	movl   $0xc01c54dc,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103c46:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103c49:	8b 40 04             	mov    0x4(%eax),%eax
c0103c4c:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103c4f:	0f 94 c0             	sete   %al
c0103c52:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103c55:	85 c0                	test   %eax,%eax
c0103c57:	75 24                	jne    c0103c7d <basic_check+0x26f>
c0103c59:	c7 44 24 0c 6f e0 10 	movl   $0xc010e06f,0xc(%esp)
c0103c60:	c0 
c0103c61:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103c68:	c0 
c0103c69:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c0103c70:	00 
c0103c71:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103c78:	e8 5d d1 ff ff       	call   c0100dda <__panic>

    unsigned int nr_free_store = nr_free;
c0103c7d:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0103c82:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103c85:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c0103c8c:	00 00 00 

    assert(alloc_page() == NULL);
c0103c8f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c96:	e8 74 13 00 00       	call   c010500f <alloc_pages>
c0103c9b:	85 c0                	test   %eax,%eax
c0103c9d:	74 24                	je     c0103cc3 <basic_check+0x2b5>
c0103c9f:	c7 44 24 0c 86 e0 10 	movl   $0xc010e086,0xc(%esp)
c0103ca6:	c0 
c0103ca7:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103cae:	c0 
c0103caf:	c7 44 24 04 d7 00 00 	movl   $0xd7,0x4(%esp)
c0103cb6:	00 
c0103cb7:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103cbe:	e8 17 d1 ff ff       	call   c0100dda <__panic>

    free_page(p0);
c0103cc3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103cca:	00 
c0103ccb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103cce:	89 04 24             	mov    %eax,(%esp)
c0103cd1:	e8 a4 13 00 00       	call   c010507a <free_pages>
    free_page(p1);
c0103cd6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103cdd:	00 
c0103cde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ce1:	89 04 24             	mov    %eax,(%esp)
c0103ce4:	e8 91 13 00 00       	call   c010507a <free_pages>
    free_page(p2);
c0103ce9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103cf0:	00 
c0103cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cf4:	89 04 24             	mov    %eax,(%esp)
c0103cf7:	e8 7e 13 00 00       	call   c010507a <free_pages>
    assert(nr_free == 3);
c0103cfc:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0103d01:	83 f8 03             	cmp    $0x3,%eax
c0103d04:	74 24                	je     c0103d2a <basic_check+0x31c>
c0103d06:	c7 44 24 0c 9b e0 10 	movl   $0xc010e09b,0xc(%esp)
c0103d0d:	c0 
c0103d0e:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103d15:	c0 
c0103d16:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0103d1d:	00 
c0103d1e:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103d25:	e8 b0 d0 ff ff       	call   c0100dda <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103d2a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d31:	e8 d9 12 00 00       	call   c010500f <alloc_pages>
c0103d36:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103d39:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103d3d:	75 24                	jne    c0103d63 <basic_check+0x355>
c0103d3f:	c7 44 24 0c 64 df 10 	movl   $0xc010df64,0xc(%esp)
c0103d46:	c0 
c0103d47:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103d4e:	c0 
c0103d4f:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
c0103d56:	00 
c0103d57:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103d5e:	e8 77 d0 ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103d63:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d6a:	e8 a0 12 00 00       	call   c010500f <alloc_pages>
c0103d6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103d72:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103d76:	75 24                	jne    c0103d9c <basic_check+0x38e>
c0103d78:	c7 44 24 0c 80 df 10 	movl   $0xc010df80,0xc(%esp)
c0103d7f:	c0 
c0103d80:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103d87:	c0 
c0103d88:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
c0103d8f:	00 
c0103d90:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103d97:	e8 3e d0 ff ff       	call   c0100dda <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103d9c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103da3:	e8 67 12 00 00       	call   c010500f <alloc_pages>
c0103da8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103dab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103daf:	75 24                	jne    c0103dd5 <basic_check+0x3c7>
c0103db1:	c7 44 24 0c 9c df 10 	movl   $0xc010df9c,0xc(%esp)
c0103db8:	c0 
c0103db9:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103dc0:	c0 
c0103dc1:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0103dc8:	00 
c0103dc9:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103dd0:	e8 05 d0 ff ff       	call   c0100dda <__panic>

    assert(alloc_page() == NULL);
c0103dd5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ddc:	e8 2e 12 00 00       	call   c010500f <alloc_pages>
c0103de1:	85 c0                	test   %eax,%eax
c0103de3:	74 24                	je     c0103e09 <basic_check+0x3fb>
c0103de5:	c7 44 24 0c 86 e0 10 	movl   $0xc010e086,0xc(%esp)
c0103dec:	c0 
c0103ded:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103df4:	c0 
c0103df5:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c0103dfc:	00 
c0103dfd:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103e04:	e8 d1 cf ff ff       	call   c0100dda <__panic>

    free_page(p0);
c0103e09:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e10:	00 
c0103e11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e14:	89 04 24             	mov    %eax,(%esp)
c0103e17:	e8 5e 12 00 00       	call   c010507a <free_pages>
c0103e1c:	c7 45 d8 dc 54 1c c0 	movl   $0xc01c54dc,-0x28(%ebp)
c0103e23:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103e26:	8b 40 04             	mov    0x4(%eax),%eax
c0103e29:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103e2c:	0f 94 c0             	sete   %al
c0103e2f:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103e32:	85 c0                	test   %eax,%eax
c0103e34:	74 24                	je     c0103e5a <basic_check+0x44c>
c0103e36:	c7 44 24 0c a8 e0 10 	movl   $0xc010e0a8,0xc(%esp)
c0103e3d:	c0 
c0103e3e:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103e45:	c0 
c0103e46:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c0103e4d:	00 
c0103e4e:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103e55:	e8 80 cf ff ff       	call   c0100dda <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103e5a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e61:	e8 a9 11 00 00       	call   c010500f <alloc_pages>
c0103e66:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103e69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e6c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103e6f:	74 24                	je     c0103e95 <basic_check+0x487>
c0103e71:	c7 44 24 0c c0 e0 10 	movl   $0xc010e0c0,0xc(%esp)
c0103e78:	c0 
c0103e79:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103e80:	c0 
c0103e81:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
c0103e88:	00 
c0103e89:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103e90:	e8 45 cf ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c0103e95:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e9c:	e8 6e 11 00 00       	call   c010500f <alloc_pages>
c0103ea1:	85 c0                	test   %eax,%eax
c0103ea3:	74 24                	je     c0103ec9 <basic_check+0x4bb>
c0103ea5:	c7 44 24 0c 86 e0 10 	movl   $0xc010e086,0xc(%esp)
c0103eac:	c0 
c0103ead:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103eb4:	c0 
c0103eb5:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0103ebc:	00 
c0103ebd:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103ec4:	e8 11 cf ff ff       	call   c0100dda <__panic>

    assert(nr_free == 0);
c0103ec9:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0103ece:	85 c0                	test   %eax,%eax
c0103ed0:	74 24                	je     c0103ef6 <basic_check+0x4e8>
c0103ed2:	c7 44 24 0c d9 e0 10 	movl   $0xc010e0d9,0xc(%esp)
c0103ed9:	c0 
c0103eda:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103ee1:	c0 
c0103ee2:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c0103ee9:	00 
c0103eea:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103ef1:	e8 e4 ce ff ff       	call   c0100dda <__panic>
    free_list = free_list_store;
c0103ef6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103ef9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103efc:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
c0103f01:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0
    nr_free = nr_free_store;
c0103f07:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f0a:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4

    free_page(p);
c0103f0f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f16:	00 
c0103f17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f1a:	89 04 24             	mov    %eax,(%esp)
c0103f1d:	e8 58 11 00 00       	call   c010507a <free_pages>
    free_page(p1);
c0103f22:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f29:	00 
c0103f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f2d:	89 04 24             	mov    %eax,(%esp)
c0103f30:	e8 45 11 00 00       	call   c010507a <free_pages>
    free_page(p2);
c0103f35:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f3c:	00 
c0103f3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f40:	89 04 24             	mov    %eax,(%esp)
c0103f43:	e8 32 11 00 00       	call   c010507a <free_pages>
}
c0103f48:	c9                   	leave  
c0103f49:	c3                   	ret    

c0103f4a <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0103f4a:	55                   	push   %ebp
c0103f4b:	89 e5                	mov    %esp,%ebp
c0103f4d:	53                   	push   %ebx
c0103f4e:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0103f54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103f5b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0103f62:	c7 45 ec dc 54 1c c0 	movl   $0xc01c54dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0103f69:	eb 6b                	jmp    c0103fd6 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0103f6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f6e:	83 e8 0c             	sub    $0xc,%eax
c0103f71:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0103f74:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f77:	83 c0 04             	add    $0x4,%eax
c0103f7a:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0103f81:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103f84:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103f87:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103f8a:	0f a3 10             	bt     %edx,(%eax)
c0103f8d:	19 c0                	sbb    %eax,%eax
c0103f8f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0103f92:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103f96:	0f 95 c0             	setne  %al
c0103f99:	0f b6 c0             	movzbl %al,%eax
c0103f9c:	85 c0                	test   %eax,%eax
c0103f9e:	75 24                	jne    c0103fc4 <default_check+0x7a>
c0103fa0:	c7 44 24 0c e6 e0 10 	movl   $0xc010e0e6,0xc(%esp)
c0103fa7:	c0 
c0103fa8:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0103faf:	c0 
c0103fb0:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0103fb7:	00 
c0103fb8:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0103fbf:	e8 16 ce ff ff       	call   c0100dda <__panic>
        count ++, total += p->property;
c0103fc4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103fc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103fcb:	8b 50 08             	mov    0x8(%eax),%edx
c0103fce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103fd1:	01 d0                	add    %edx,%eax
c0103fd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103fd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103fd9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103fdc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103fdf:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0103fe2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103fe5:	81 7d ec dc 54 1c c0 	cmpl   $0xc01c54dc,-0x14(%ebp)
c0103fec:	0f 85 79 ff ff ff    	jne    c0103f6b <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0103ff2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0103ff5:	e8 b2 10 00 00       	call   c01050ac <nr_free_pages>
c0103ffa:	39 c3                	cmp    %eax,%ebx
c0103ffc:	74 24                	je     c0104022 <default_check+0xd8>
c0103ffe:	c7 44 24 0c f6 e0 10 	movl   $0xc010e0f6,0xc(%esp)
c0104005:	c0 
c0104006:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c010400d:	c0 
c010400e:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c0104015:	00 
c0104016:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c010401d:	e8 b8 cd ff ff       	call   c0100dda <__panic>

    basic_check();
c0104022:	e8 e7 f9 ff ff       	call   c0103a0e <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104027:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010402e:	e8 dc 0f 00 00       	call   c010500f <alloc_pages>
c0104033:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104036:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010403a:	75 24                	jne    c0104060 <default_check+0x116>
c010403c:	c7 44 24 0c 0f e1 10 	movl   $0xc010e10f,0xc(%esp)
c0104043:	c0 
c0104044:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c010404b:	c0 
c010404c:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c0104053:	00 
c0104054:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c010405b:	e8 7a cd ff ff       	call   c0100dda <__panic>
    assert(!PageProperty(p0));
c0104060:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104063:	83 c0 04             	add    $0x4,%eax
c0104066:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010406d:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104070:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104073:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104076:	0f a3 10             	bt     %edx,(%eax)
c0104079:	19 c0                	sbb    %eax,%eax
c010407b:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010407e:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104082:	0f 95 c0             	setne  %al
c0104085:	0f b6 c0             	movzbl %al,%eax
c0104088:	85 c0                	test   %eax,%eax
c010408a:	74 24                	je     c01040b0 <default_check+0x166>
c010408c:	c7 44 24 0c 1a e1 10 	movl   $0xc010e11a,0xc(%esp)
c0104093:	c0 
c0104094:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c010409b:	c0 
c010409c:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c01040a3:	00 
c01040a4:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c01040ab:	e8 2a cd ff ff       	call   c0100dda <__panic>

    list_entry_t free_list_store = free_list;
c01040b0:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
c01040b5:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
c01040bb:	89 45 80             	mov    %eax,-0x80(%ebp)
c01040be:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01040c1:	c7 45 b4 dc 54 1c c0 	movl   $0xc01c54dc,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01040c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01040cb:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01040ce:	89 50 04             	mov    %edx,0x4(%eax)
c01040d1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01040d4:	8b 50 04             	mov    0x4(%eax),%edx
c01040d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01040da:	89 10                	mov    %edx,(%eax)
c01040dc:	c7 45 b0 dc 54 1c c0 	movl   $0xc01c54dc,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01040e3:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01040e6:	8b 40 04             	mov    0x4(%eax),%eax
c01040e9:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01040ec:	0f 94 c0             	sete   %al
c01040ef:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01040f2:	85 c0                	test   %eax,%eax
c01040f4:	75 24                	jne    c010411a <default_check+0x1d0>
c01040f6:	c7 44 24 0c 6f e0 10 	movl   $0xc010e06f,0xc(%esp)
c01040fd:	c0 
c01040fe:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0104105:	c0 
c0104106:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
c010410d:	00 
c010410e:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0104115:	e8 c0 cc ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c010411a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104121:	e8 e9 0e 00 00       	call   c010500f <alloc_pages>
c0104126:	85 c0                	test   %eax,%eax
c0104128:	74 24                	je     c010414e <default_check+0x204>
c010412a:	c7 44 24 0c 86 e0 10 	movl   $0xc010e086,0xc(%esp)
c0104131:	c0 
c0104132:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0104139:	c0 
c010413a:	c7 44 24 04 0a 01 00 	movl   $0x10a,0x4(%esp)
c0104141:	00 
c0104142:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0104149:	e8 8c cc ff ff       	call   c0100dda <__panic>

    unsigned int nr_free_store = nr_free;
c010414e:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0104153:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104156:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c010415d:	00 00 00 

    free_pages(p0 + 2, 3);
c0104160:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104163:	83 c0 40             	add    $0x40,%eax
c0104166:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010416d:	00 
c010416e:	89 04 24             	mov    %eax,(%esp)
c0104171:	e8 04 0f 00 00       	call   c010507a <free_pages>
    assert(alloc_pages(4) == NULL);
c0104176:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010417d:	e8 8d 0e 00 00       	call   c010500f <alloc_pages>
c0104182:	85 c0                	test   %eax,%eax
c0104184:	74 24                	je     c01041aa <default_check+0x260>
c0104186:	c7 44 24 0c 2c e1 10 	movl   $0xc010e12c,0xc(%esp)
c010418d:	c0 
c010418e:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0104195:	c0 
c0104196:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
c010419d:	00 
c010419e:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c01041a5:	e8 30 cc ff ff       	call   c0100dda <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01041aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041ad:	83 c0 40             	add    $0x40,%eax
c01041b0:	83 c0 04             	add    $0x4,%eax
c01041b3:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01041ba:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01041bd:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01041c0:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01041c3:	0f a3 10             	bt     %edx,(%eax)
c01041c6:	19 c0                	sbb    %eax,%eax
c01041c8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01041cb:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01041cf:	0f 95 c0             	setne  %al
c01041d2:	0f b6 c0             	movzbl %al,%eax
c01041d5:	85 c0                	test   %eax,%eax
c01041d7:	74 0e                	je     c01041e7 <default_check+0x29d>
c01041d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041dc:	83 c0 40             	add    $0x40,%eax
c01041df:	8b 40 08             	mov    0x8(%eax),%eax
c01041e2:	83 f8 03             	cmp    $0x3,%eax
c01041e5:	74 24                	je     c010420b <default_check+0x2c1>
c01041e7:	c7 44 24 0c 44 e1 10 	movl   $0xc010e144,0xc(%esp)
c01041ee:	c0 
c01041ef:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c01041f6:	c0 
c01041f7:	c7 44 24 04 11 01 00 	movl   $0x111,0x4(%esp)
c01041fe:	00 
c01041ff:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0104206:	e8 cf cb ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c010420b:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0104212:	e8 f8 0d 00 00       	call   c010500f <alloc_pages>
c0104217:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010421a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010421e:	75 24                	jne    c0104244 <default_check+0x2fa>
c0104220:	c7 44 24 0c 70 e1 10 	movl   $0xc010e170,0xc(%esp)
c0104227:	c0 
c0104228:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c010422f:	c0 
c0104230:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0104237:	00 
c0104238:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c010423f:	e8 96 cb ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c0104244:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010424b:	e8 bf 0d 00 00       	call   c010500f <alloc_pages>
c0104250:	85 c0                	test   %eax,%eax
c0104252:	74 24                	je     c0104278 <default_check+0x32e>
c0104254:	c7 44 24 0c 86 e0 10 	movl   $0xc010e086,0xc(%esp)
c010425b:	c0 
c010425c:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0104263:	c0 
c0104264:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c010426b:	00 
c010426c:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0104273:	e8 62 cb ff ff       	call   c0100dda <__panic>
    assert(p0 + 2 == p1);
c0104278:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010427b:	83 c0 40             	add    $0x40,%eax
c010427e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0104281:	74 24                	je     c01042a7 <default_check+0x35d>
c0104283:	c7 44 24 0c 8e e1 10 	movl   $0xc010e18e,0xc(%esp)
c010428a:	c0 
c010428b:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0104292:	c0 
c0104293:	c7 44 24 04 14 01 00 	movl   $0x114,0x4(%esp)
c010429a:	00 
c010429b:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c01042a2:	e8 33 cb ff ff       	call   c0100dda <__panic>

    p2 = p0 + 1;
c01042a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042aa:	83 c0 20             	add    $0x20,%eax
c01042ad:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01042b0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01042b7:	00 
c01042b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042bb:	89 04 24             	mov    %eax,(%esp)
c01042be:	e8 b7 0d 00 00       	call   c010507a <free_pages>
    free_pages(p1, 3);
c01042c3:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01042ca:	00 
c01042cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042ce:	89 04 24             	mov    %eax,(%esp)
c01042d1:	e8 a4 0d 00 00       	call   c010507a <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01042d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042d9:	83 c0 04             	add    $0x4,%eax
c01042dc:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01042e3:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01042e6:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01042e9:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01042ec:	0f a3 10             	bt     %edx,(%eax)
c01042ef:	19 c0                	sbb    %eax,%eax
c01042f1:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c01042f4:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01042f8:	0f 95 c0             	setne  %al
c01042fb:	0f b6 c0             	movzbl %al,%eax
c01042fe:	85 c0                	test   %eax,%eax
c0104300:	74 0b                	je     c010430d <default_check+0x3c3>
c0104302:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104305:	8b 40 08             	mov    0x8(%eax),%eax
c0104308:	83 f8 01             	cmp    $0x1,%eax
c010430b:	74 24                	je     c0104331 <default_check+0x3e7>
c010430d:	c7 44 24 0c 9c e1 10 	movl   $0xc010e19c,0xc(%esp)
c0104314:	c0 
c0104315:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c010431c:	c0 
c010431d:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0104324:	00 
c0104325:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c010432c:	e8 a9 ca ff ff       	call   c0100dda <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0104331:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104334:	83 c0 04             	add    $0x4,%eax
c0104337:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010433e:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104341:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104344:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104347:	0f a3 10             	bt     %edx,(%eax)
c010434a:	19 c0                	sbb    %eax,%eax
c010434c:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010434f:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104353:	0f 95 c0             	setne  %al
c0104356:	0f b6 c0             	movzbl %al,%eax
c0104359:	85 c0                	test   %eax,%eax
c010435b:	74 0b                	je     c0104368 <default_check+0x41e>
c010435d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104360:	8b 40 08             	mov    0x8(%eax),%eax
c0104363:	83 f8 03             	cmp    $0x3,%eax
c0104366:	74 24                	je     c010438c <default_check+0x442>
c0104368:	c7 44 24 0c c4 e1 10 	movl   $0xc010e1c4,0xc(%esp)
c010436f:	c0 
c0104370:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0104377:	c0 
c0104378:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c010437f:	00 
c0104380:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0104387:	e8 4e ca ff ff       	call   c0100dda <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c010438c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104393:	e8 77 0c 00 00       	call   c010500f <alloc_pages>
c0104398:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010439b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010439e:	83 e8 20             	sub    $0x20,%eax
c01043a1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01043a4:	74 24                	je     c01043ca <default_check+0x480>
c01043a6:	c7 44 24 0c ea e1 10 	movl   $0xc010e1ea,0xc(%esp)
c01043ad:	c0 
c01043ae:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c01043b5:	c0 
c01043b6:	c7 44 24 04 1c 01 00 	movl   $0x11c,0x4(%esp)
c01043bd:	00 
c01043be:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c01043c5:	e8 10 ca ff ff       	call   c0100dda <__panic>
    free_page(p0);
c01043ca:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043d1:	00 
c01043d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043d5:	89 04 24             	mov    %eax,(%esp)
c01043d8:	e8 9d 0c 00 00       	call   c010507a <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01043dd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01043e4:	e8 26 0c 00 00       	call   c010500f <alloc_pages>
c01043e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01043ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01043ef:	83 c0 20             	add    $0x20,%eax
c01043f2:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01043f5:	74 24                	je     c010441b <default_check+0x4d1>
c01043f7:	c7 44 24 0c 08 e2 10 	movl   $0xc010e208,0xc(%esp)
c01043fe:	c0 
c01043ff:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0104406:	c0 
c0104407:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010440e:	00 
c010440f:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0104416:	e8 bf c9 ff ff       	call   c0100dda <__panic>

    free_pages(p0, 2);
c010441b:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0104422:	00 
c0104423:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104426:	89 04 24             	mov    %eax,(%esp)
c0104429:	e8 4c 0c 00 00       	call   c010507a <free_pages>
    free_page(p2);
c010442e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104435:	00 
c0104436:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104439:	89 04 24             	mov    %eax,(%esp)
c010443c:	e8 39 0c 00 00       	call   c010507a <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104441:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104448:	e8 c2 0b 00 00       	call   c010500f <alloc_pages>
c010444d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104450:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104454:	75 24                	jne    c010447a <default_check+0x530>
c0104456:	c7 44 24 0c 28 e2 10 	movl   $0xc010e228,0xc(%esp)
c010445d:	c0 
c010445e:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0104465:	c0 
c0104466:	c7 44 24 04 23 01 00 	movl   $0x123,0x4(%esp)
c010446d:	00 
c010446e:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0104475:	e8 60 c9 ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c010447a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104481:	e8 89 0b 00 00       	call   c010500f <alloc_pages>
c0104486:	85 c0                	test   %eax,%eax
c0104488:	74 24                	je     c01044ae <default_check+0x564>
c010448a:	c7 44 24 0c 86 e0 10 	movl   $0xc010e086,0xc(%esp)
c0104491:	c0 
c0104492:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0104499:	c0 
c010449a:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c01044a1:	00 
c01044a2:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c01044a9:	e8 2c c9 ff ff       	call   c0100dda <__panic>

    assert(nr_free == 0);
c01044ae:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c01044b3:	85 c0                	test   %eax,%eax
c01044b5:	74 24                	je     c01044db <default_check+0x591>
c01044b7:	c7 44 24 0c d9 e0 10 	movl   $0xc010e0d9,0xc(%esp)
c01044be:	c0 
c01044bf:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c01044c6:	c0 
c01044c7:	c7 44 24 04 26 01 00 	movl   $0x126,0x4(%esp)
c01044ce:	00 
c01044cf:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c01044d6:	e8 ff c8 ff ff       	call   c0100dda <__panic>
    nr_free = nr_free_store;
c01044db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01044de:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4

    free_list = free_list_store;
c01044e3:	8b 45 80             	mov    -0x80(%ebp),%eax
c01044e6:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01044e9:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
c01044ee:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0
    free_pages(p0, 5);
c01044f4:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01044fb:	00 
c01044fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044ff:	89 04 24             	mov    %eax,(%esp)
c0104502:	e8 73 0b 00 00       	call   c010507a <free_pages>

    le = &free_list;
c0104507:	c7 45 ec dc 54 1c c0 	movl   $0xc01c54dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010450e:	eb 1d                	jmp    c010452d <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0104510:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104513:	83 e8 0c             	sub    $0xc,%eax
c0104516:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104519:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010451d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104520:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104523:	8b 40 08             	mov    0x8(%eax),%eax
c0104526:	29 c2                	sub    %eax,%edx
c0104528:	89 d0                	mov    %edx,%eax
c010452a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010452d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104530:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104533:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104536:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104539:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010453c:	81 7d ec dc 54 1c c0 	cmpl   $0xc01c54dc,-0x14(%ebp)
c0104543:	75 cb                	jne    c0104510 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104545:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104549:	74 24                	je     c010456f <default_check+0x625>
c010454b:	c7 44 24 0c 46 e2 10 	movl   $0xc010e246,0xc(%esp)
c0104552:	c0 
c0104553:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c010455a:	c0 
c010455b:	c7 44 24 04 31 01 00 	movl   $0x131,0x4(%esp)
c0104562:	00 
c0104563:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c010456a:	e8 6b c8 ff ff       	call   c0100dda <__panic>
    assert(total == 0);
c010456f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104573:	74 24                	je     c0104599 <default_check+0x64f>
c0104575:	c7 44 24 0c 51 e2 10 	movl   $0xc010e251,0xc(%esp)
c010457c:	c0 
c010457d:	c7 44 24 08 16 df 10 	movl   $0xc010df16,0x8(%esp)
c0104584:	c0 
c0104585:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c010458c:	00 
c010458d:	c7 04 24 2b df 10 c0 	movl   $0xc010df2b,(%esp)
c0104594:	e8 41 c8 ff ff       	call   c0100dda <__panic>
}
c0104599:	81 c4 94 00 00 00    	add    $0x94,%esp
c010459f:	5b                   	pop    %ebx
c01045a0:	5d                   	pop    %ebp
c01045a1:	c3                   	ret    

c01045a2 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01045a2:	55                   	push   %ebp
c01045a3:	89 e5                	mov    %esp,%ebp
c01045a5:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01045a8:	9c                   	pushf  
c01045a9:	58                   	pop    %eax
c01045aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01045ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01045b0:	25 00 02 00 00       	and    $0x200,%eax
c01045b5:	85 c0                	test   %eax,%eax
c01045b7:	74 0c                	je     c01045c5 <__intr_save+0x23>
        intr_disable();
c01045b9:	e8 74 da ff ff       	call   c0102032 <intr_disable>
        return 1;
c01045be:	b8 01 00 00 00       	mov    $0x1,%eax
c01045c3:	eb 05                	jmp    c01045ca <__intr_save+0x28>
    }
    return 0;
c01045c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01045ca:	c9                   	leave  
c01045cb:	c3                   	ret    

c01045cc <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01045cc:	55                   	push   %ebp
c01045cd:	89 e5                	mov    %esp,%ebp
c01045cf:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01045d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01045d6:	74 05                	je     c01045dd <__intr_restore+0x11>
        intr_enable();
c01045d8:	e8 4f da ff ff       	call   c010202c <intr_enable>
    }
}
c01045dd:	c9                   	leave  
c01045de:	c3                   	ret    

c01045df <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01045df:	55                   	push   %ebp
c01045e0:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01045e2:	8b 55 08             	mov    0x8(%ebp),%edx
c01045e5:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c01045ea:	29 c2                	sub    %eax,%edx
c01045ec:	89 d0                	mov    %edx,%eax
c01045ee:	c1 f8 05             	sar    $0x5,%eax
}
c01045f1:	5d                   	pop    %ebp
c01045f2:	c3                   	ret    

c01045f3 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01045f3:	55                   	push   %ebp
c01045f4:	89 e5                	mov    %esp,%ebp
c01045f6:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01045f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01045fc:	89 04 24             	mov    %eax,(%esp)
c01045ff:	e8 db ff ff ff       	call   c01045df <page2ppn>
c0104604:	c1 e0 0c             	shl    $0xc,%eax
}
c0104607:	c9                   	leave  
c0104608:	c3                   	ret    

c0104609 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104609:	55                   	push   %ebp
c010460a:	89 e5                	mov    %esp,%ebp
c010460c:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010460f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104612:	c1 e8 0c             	shr    $0xc,%eax
c0104615:	89 c2                	mov    %eax,%edx
c0104617:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010461c:	39 c2                	cmp    %eax,%edx
c010461e:	72 1c                	jb     c010463c <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104620:	c7 44 24 08 8c e2 10 	movl   $0xc010e28c,0x8(%esp)
c0104627:	c0 
c0104628:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010462f:	00 
c0104630:	c7 04 24 ab e2 10 c0 	movl   $0xc010e2ab,(%esp)
c0104637:	e8 9e c7 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c010463c:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0104641:	8b 55 08             	mov    0x8(%ebp),%edx
c0104644:	c1 ea 0c             	shr    $0xc,%edx
c0104647:	c1 e2 05             	shl    $0x5,%edx
c010464a:	01 d0                	add    %edx,%eax
}
c010464c:	c9                   	leave  
c010464d:	c3                   	ret    

c010464e <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010464e:	55                   	push   %ebp
c010464f:	89 e5                	mov    %esp,%ebp
c0104651:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104654:	8b 45 08             	mov    0x8(%ebp),%eax
c0104657:	89 04 24             	mov    %eax,(%esp)
c010465a:	e8 94 ff ff ff       	call   c01045f3 <page2pa>
c010465f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104662:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104665:	c1 e8 0c             	shr    $0xc,%eax
c0104668:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010466b:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0104670:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104673:	72 23                	jb     c0104698 <page2kva+0x4a>
c0104675:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104678:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010467c:	c7 44 24 08 bc e2 10 	movl   $0xc010e2bc,0x8(%esp)
c0104683:	c0 
c0104684:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010468b:	00 
c010468c:	c7 04 24 ab e2 10 c0 	movl   $0xc010e2ab,(%esp)
c0104693:	e8 42 c7 ff ff       	call   c0100dda <__panic>
c0104698:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010469b:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01046a0:	c9                   	leave  
c01046a1:	c3                   	ret    

c01046a2 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01046a2:	55                   	push   %ebp
c01046a3:	89 e5                	mov    %esp,%ebp
c01046a5:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01046a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01046ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01046ae:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01046b5:	77 23                	ja     c01046da <kva2page+0x38>
c01046b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046ba:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01046be:	c7 44 24 08 e0 e2 10 	movl   $0xc010e2e0,0x8(%esp)
c01046c5:	c0 
c01046c6:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01046cd:	00 
c01046ce:	c7 04 24 ab e2 10 c0 	movl   $0xc010e2ab,(%esp)
c01046d5:	e8 00 c7 ff ff       	call   c0100dda <__panic>
c01046da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046dd:	05 00 00 00 40       	add    $0x40000000,%eax
c01046e2:	89 04 24             	mov    %eax,(%esp)
c01046e5:	e8 1f ff ff ff       	call   c0104609 <pa2page>
}
c01046ea:	c9                   	leave  
c01046eb:	c3                   	ret    

c01046ec <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01046ec:	55                   	push   %ebp
c01046ed:	89 e5                	mov    %esp,%ebp
c01046ef:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c01046f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01046f5:	ba 01 00 00 00       	mov    $0x1,%edx
c01046fa:	89 c1                	mov    %eax,%ecx
c01046fc:	d3 e2                	shl    %cl,%edx
c01046fe:	89 d0                	mov    %edx,%eax
c0104700:	89 04 24             	mov    %eax,(%esp)
c0104703:	e8 07 09 00 00       	call   c010500f <alloc_pages>
c0104708:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c010470b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010470f:	75 07                	jne    c0104718 <__slob_get_free_pages+0x2c>
    return NULL;
c0104711:	b8 00 00 00 00       	mov    $0x0,%eax
c0104716:	eb 0b                	jmp    c0104723 <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010471b:	89 04 24             	mov    %eax,(%esp)
c010471e:	e8 2b ff ff ff       	call   c010464e <page2kva>
}
c0104723:	c9                   	leave  
c0104724:	c3                   	ret    

c0104725 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104725:	55                   	push   %ebp
c0104726:	89 e5                	mov    %esp,%ebp
c0104728:	53                   	push   %ebx
c0104729:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c010472c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010472f:	ba 01 00 00 00       	mov    $0x1,%edx
c0104734:	89 c1                	mov    %eax,%ecx
c0104736:	d3 e2                	shl    %cl,%edx
c0104738:	89 d0                	mov    %edx,%eax
c010473a:	89 c3                	mov    %eax,%ebx
c010473c:	8b 45 08             	mov    0x8(%ebp),%eax
c010473f:	89 04 24             	mov    %eax,(%esp)
c0104742:	e8 5b ff ff ff       	call   c01046a2 <kva2page>
c0104747:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010474b:	89 04 24             	mov    %eax,(%esp)
c010474e:	e8 27 09 00 00       	call   c010507a <free_pages>
}
c0104753:	83 c4 14             	add    $0x14,%esp
c0104756:	5b                   	pop    %ebx
c0104757:	5d                   	pop    %ebp
c0104758:	c3                   	ret    

c0104759 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104759:	55                   	push   %ebp
c010475a:	89 e5                	mov    %esp,%ebp
c010475c:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c010475f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104762:	83 c0 08             	add    $0x8,%eax
c0104765:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010476a:	76 24                	jbe    c0104790 <slob_alloc+0x37>
c010476c:	c7 44 24 0c 04 e3 10 	movl   $0xc010e304,0xc(%esp)
c0104773:	c0 
c0104774:	c7 44 24 08 23 e3 10 	movl   $0xc010e323,0x8(%esp)
c010477b:	c0 
c010477c:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104783:	00 
c0104784:	c7 04 24 38 e3 10 c0 	movl   $0xc010e338,(%esp)
c010478b:	e8 4a c6 ff ff       	call   c0100dda <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104790:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104797:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010479e:	8b 45 08             	mov    0x8(%ebp),%eax
c01047a1:	83 c0 07             	add    $0x7,%eax
c01047a4:	c1 e8 03             	shr    $0x3,%eax
c01047a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01047aa:	e8 f3 fd ff ff       	call   c01045a2 <__intr_save>
c01047af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01047b2:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c01047b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01047ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047bd:	8b 40 04             	mov    0x4(%eax),%eax
c01047c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01047c3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01047c7:	74 25                	je     c01047ee <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01047c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01047cc:	8b 45 10             	mov    0x10(%ebp),%eax
c01047cf:	01 d0                	add    %edx,%eax
c01047d1:	8d 50 ff             	lea    -0x1(%eax),%edx
c01047d4:	8b 45 10             	mov    0x10(%ebp),%eax
c01047d7:	f7 d8                	neg    %eax
c01047d9:	21 d0                	and    %edx,%eax
c01047db:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01047de:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01047e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047e4:	29 c2                	sub    %eax,%edx
c01047e6:	89 d0                	mov    %edx,%eax
c01047e8:	c1 f8 03             	sar    $0x3,%eax
c01047eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c01047ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047f1:	8b 00                	mov    (%eax),%eax
c01047f3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01047f6:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01047f9:	01 ca                	add    %ecx,%edx
c01047fb:	39 d0                	cmp    %edx,%eax
c01047fd:	0f 8c aa 00 00 00    	jl     c01048ad <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0104803:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104807:	74 38                	je     c0104841 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104809:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010480c:	8b 00                	mov    (%eax),%eax
c010480e:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104811:	89 c2                	mov    %eax,%edx
c0104813:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104816:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104818:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010481b:	8b 50 04             	mov    0x4(%eax),%edx
c010481e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104821:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104824:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104827:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010482a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c010482d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104830:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104833:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104835:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104838:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c010483b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010483e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104841:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104844:	8b 00                	mov    (%eax),%eax
c0104846:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104849:	75 0e                	jne    c0104859 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c010484b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010484e:	8b 50 04             	mov    0x4(%eax),%edx
c0104851:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104854:	89 50 04             	mov    %edx,0x4(%eax)
c0104857:	eb 3c                	jmp    c0104895 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104859:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010485c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104863:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104866:	01 c2                	add    %eax,%edx
c0104868:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010486b:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c010486e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104871:	8b 40 04             	mov    0x4(%eax),%eax
c0104874:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104877:	8b 12                	mov    (%edx),%edx
c0104879:	2b 55 e0             	sub    -0x20(%ebp),%edx
c010487c:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c010487e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104881:	8b 40 04             	mov    0x4(%eax),%eax
c0104884:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104887:	8b 52 04             	mov    0x4(%edx),%edx
c010488a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c010488d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104890:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104893:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104895:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104898:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08
			spin_unlock_irqrestore(&slob_lock, flags);
c010489d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01048a0:	89 04 24             	mov    %eax,(%esp)
c01048a3:	e8 24 fd ff ff       	call   c01045cc <__intr_restore>
			return cur;
c01048a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048ab:	eb 7f                	jmp    c010492c <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c01048ad:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c01048b2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01048b5:	75 61                	jne    c0104918 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c01048b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01048ba:	89 04 24             	mov    %eax,(%esp)
c01048bd:	e8 0a fd ff ff       	call   c01045cc <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c01048c2:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01048c9:	75 07                	jne    c01048d2 <slob_alloc+0x179>
				return 0;
c01048cb:	b8 00 00 00 00       	mov    $0x0,%eax
c01048d0:	eb 5a                	jmp    c010492c <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c01048d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01048d9:	00 
c01048da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01048dd:	89 04 24             	mov    %eax,(%esp)
c01048e0:	e8 07 fe ff ff       	call   c01046ec <__slob_get_free_pages>
c01048e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c01048e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01048ec:	75 07                	jne    c01048f5 <slob_alloc+0x19c>
				return 0;
c01048ee:	b8 00 00 00 00       	mov    $0x0,%eax
c01048f3:	eb 37                	jmp    c010492c <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c01048f5:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01048fc:	00 
c01048fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104900:	89 04 24             	mov    %eax,(%esp)
c0104903:	e8 26 00 00 00       	call   c010492e <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104908:	e8 95 fc ff ff       	call   c01045a2 <__intr_save>
c010490d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104910:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104915:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104918:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010491b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010491e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104921:	8b 40 04             	mov    0x4(%eax),%eax
c0104924:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104927:	e9 97 fe ff ff       	jmp    c01047c3 <slob_alloc+0x6a>
}
c010492c:	c9                   	leave  
c010492d:	c3                   	ret    

c010492e <slob_free>:

static void slob_free(void *block, int size)
{
c010492e:	55                   	push   %ebp
c010492f:	89 e5                	mov    %esp,%ebp
c0104931:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104934:	8b 45 08             	mov    0x8(%ebp),%eax
c0104937:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010493a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010493e:	75 05                	jne    c0104945 <slob_free+0x17>
		return;
c0104940:	e9 ff 00 00 00       	jmp    c0104a44 <slob_free+0x116>

	if (size)
c0104945:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104949:	74 10                	je     c010495b <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c010494b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010494e:	83 c0 07             	add    $0x7,%eax
c0104951:	c1 e8 03             	shr    $0x3,%eax
c0104954:	89 c2                	mov    %eax,%edx
c0104956:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104959:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c010495b:	e8 42 fc ff ff       	call   c01045a2 <__intr_save>
c0104960:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104963:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104968:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010496b:	eb 27                	jmp    c0104994 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c010496d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104970:	8b 40 04             	mov    0x4(%eax),%eax
c0104973:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104976:	77 13                	ja     c010498b <slob_free+0x5d>
c0104978:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010497b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010497e:	77 27                	ja     c01049a7 <slob_free+0x79>
c0104980:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104983:	8b 40 04             	mov    0x4(%eax),%eax
c0104986:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104989:	77 1c                	ja     c01049a7 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c010498b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010498e:	8b 40 04             	mov    0x4(%eax),%eax
c0104991:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104994:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104997:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010499a:	76 d1                	jbe    c010496d <slob_free+0x3f>
c010499c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010499f:	8b 40 04             	mov    0x4(%eax),%eax
c01049a2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01049a5:	76 c6                	jbe    c010496d <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c01049a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049aa:	8b 00                	mov    (%eax),%eax
c01049ac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01049b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049b6:	01 c2                	add    %eax,%edx
c01049b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049bb:	8b 40 04             	mov    0x4(%eax),%eax
c01049be:	39 c2                	cmp    %eax,%edx
c01049c0:	75 25                	jne    c01049e7 <slob_free+0xb9>
		b->units += cur->next->units;
c01049c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049c5:	8b 10                	mov    (%eax),%edx
c01049c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049ca:	8b 40 04             	mov    0x4(%eax),%eax
c01049cd:	8b 00                	mov    (%eax),%eax
c01049cf:	01 c2                	add    %eax,%edx
c01049d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049d4:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c01049d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049d9:	8b 40 04             	mov    0x4(%eax),%eax
c01049dc:	8b 50 04             	mov    0x4(%eax),%edx
c01049df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049e2:	89 50 04             	mov    %edx,0x4(%eax)
c01049e5:	eb 0c                	jmp    c01049f3 <slob_free+0xc5>
	} else
		b->next = cur->next;
c01049e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049ea:	8b 50 04             	mov    0x4(%eax),%edx
c01049ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049f0:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c01049f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049f6:	8b 00                	mov    (%eax),%eax
c01049f8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01049ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a02:	01 d0                	add    %edx,%eax
c0104a04:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a07:	75 1f                	jne    c0104a28 <slob_free+0xfa>
		cur->units += b->units;
c0104a09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a0c:	8b 10                	mov    (%eax),%edx
c0104a0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a11:	8b 00                	mov    (%eax),%eax
c0104a13:	01 c2                	add    %eax,%edx
c0104a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a18:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104a1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a1d:	8b 50 04             	mov    0x4(%eax),%edx
c0104a20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a23:	89 50 04             	mov    %edx,0x4(%eax)
c0104a26:	eb 09                	jmp    c0104a31 <slob_free+0x103>
	} else
		cur->next = b;
c0104a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a2e:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104a31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a34:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104a39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a3c:	89 04 24             	mov    %eax,(%esp)
c0104a3f:	e8 88 fb ff ff       	call   c01045cc <__intr_restore>
}
c0104a44:	c9                   	leave  
c0104a45:	c3                   	ret    

c0104a46 <slob_init>:



void
slob_init(void) {
c0104a46:	55                   	push   %ebp
c0104a47:	89 e5                	mov    %esp,%ebp
c0104a49:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104a4c:	c7 04 24 4a e3 10 c0 	movl   $0xc010e34a,(%esp)
c0104a53:	e8 00 b9 ff ff       	call   c0100358 <cprintf>
}
c0104a58:	c9                   	leave  
c0104a59:	c3                   	ret    

c0104a5a <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104a5a:	55                   	push   %ebp
c0104a5b:	89 e5                	mov    %esp,%ebp
c0104a5d:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104a60:	e8 e1 ff ff ff       	call   c0104a46 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104a65:	c7 04 24 5e e3 10 c0 	movl   $0xc010e35e,(%esp)
c0104a6c:	e8 e7 b8 ff ff       	call   c0100358 <cprintf>
}
c0104a71:	c9                   	leave  
c0104a72:	c3                   	ret    

c0104a73 <slob_allocated>:

size_t
slob_allocated(void) {
c0104a73:	55                   	push   %ebp
c0104a74:	89 e5                	mov    %esp,%ebp
  return 0;
c0104a76:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104a7b:	5d                   	pop    %ebp
c0104a7c:	c3                   	ret    

c0104a7d <kallocated>:

size_t
kallocated(void) {
c0104a7d:	55                   	push   %ebp
c0104a7e:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104a80:	e8 ee ff ff ff       	call   c0104a73 <slob_allocated>
}
c0104a85:	5d                   	pop    %ebp
c0104a86:	c3                   	ret    

c0104a87 <find_order>:

static int find_order(int size)
{
c0104a87:	55                   	push   %ebp
c0104a88:	89 e5                	mov    %esp,%ebp
c0104a8a:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104a8d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104a94:	eb 07                	jmp    c0104a9d <find_order+0x16>
		order++;
c0104a96:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104a9a:	d1 7d 08             	sarl   0x8(%ebp)
c0104a9d:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104aa4:	7f f0                	jg     c0104a96 <find_order+0xf>
		order++;
	return order;
c0104aa6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104aa9:	c9                   	leave  
c0104aaa:	c3                   	ret    

c0104aab <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104aab:	55                   	push   %ebp
c0104aac:	89 e5                	mov    %esp,%ebp
c0104aae:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104ab1:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104ab8:	77 38                	ja     c0104af2 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104aba:	8b 45 08             	mov    0x8(%ebp),%eax
c0104abd:	8d 50 08             	lea    0x8(%eax),%edx
c0104ac0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104ac7:	00 
c0104ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104acb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104acf:	89 14 24             	mov    %edx,(%esp)
c0104ad2:	e8 82 fc ff ff       	call   c0104759 <slob_alloc>
c0104ad7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104ada:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104ade:	74 08                	je     c0104ae8 <__kmalloc+0x3d>
c0104ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ae3:	83 c0 08             	add    $0x8,%eax
c0104ae6:	eb 05                	jmp    c0104aed <__kmalloc+0x42>
c0104ae8:	b8 00 00 00 00       	mov    $0x0,%eax
c0104aed:	e9 a6 00 00 00       	jmp    c0104b98 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104af2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104af9:	00 
c0104afa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104afd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b01:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104b08:	e8 4c fc ff ff       	call   c0104759 <slob_alloc>
c0104b0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104b10:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104b14:	75 07                	jne    c0104b1d <__kmalloc+0x72>
		return 0;
c0104b16:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b1b:	eb 7b                	jmp    c0104b98 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104b1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b20:	89 04 24             	mov    %eax,(%esp)
c0104b23:	e8 5f ff ff ff       	call   c0104a87 <find_order>
c0104b28:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b2b:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104b2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b30:	8b 00                	mov    (%eax),%eax
c0104b32:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b39:	89 04 24             	mov    %eax,(%esp)
c0104b3c:	e8 ab fb ff ff       	call   c01046ec <__slob_get_free_pages>
c0104b41:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b44:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104b47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b4a:	8b 40 04             	mov    0x4(%eax),%eax
c0104b4d:	85 c0                	test   %eax,%eax
c0104b4f:	74 2f                	je     c0104b80 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104b51:	e8 4c fa ff ff       	call   c01045a2 <__intr_save>
c0104b56:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104b59:	8b 15 84 33 1c c0    	mov    0xc01c3384,%edx
c0104b5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b62:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104b65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b68:	a3 84 33 1c c0       	mov    %eax,0xc01c3384
		spin_unlock_irqrestore(&block_lock, flags);
c0104b6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b70:	89 04 24             	mov    %eax,(%esp)
c0104b73:	e8 54 fa ff ff       	call   c01045cc <__intr_restore>
		return bb->pages;
c0104b78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b7b:	8b 40 04             	mov    0x4(%eax),%eax
c0104b7e:	eb 18                	jmp    c0104b98 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104b80:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104b87:	00 
c0104b88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b8b:	89 04 24             	mov    %eax,(%esp)
c0104b8e:	e8 9b fd ff ff       	call   c010492e <slob_free>
	return 0;
c0104b93:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b98:	c9                   	leave  
c0104b99:	c3                   	ret    

c0104b9a <kmalloc>:

void *
kmalloc(size_t size)
{
c0104b9a:	55                   	push   %ebp
c0104b9b:	89 e5                	mov    %esp,%ebp
c0104b9d:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104ba0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104ba7:	00 
c0104ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bab:	89 04 24             	mov    %eax,(%esp)
c0104bae:	e8 f8 fe ff ff       	call   c0104aab <__kmalloc>
}
c0104bb3:	c9                   	leave  
c0104bb4:	c3                   	ret    

c0104bb5 <kfree>:


void kfree(void *block)
{
c0104bb5:	55                   	push   %ebp
c0104bb6:	89 e5                	mov    %esp,%ebp
c0104bb8:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104bbb:	c7 45 f0 84 33 1c c0 	movl   $0xc01c3384,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104bc2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104bc6:	75 05                	jne    c0104bcd <kfree+0x18>
		return;
c0104bc8:	e9 a2 00 00 00       	jmp    c0104c6f <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104bcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bd0:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104bd5:	85 c0                	test   %eax,%eax
c0104bd7:	75 7f                	jne    c0104c58 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104bd9:	e8 c4 f9 ff ff       	call   c01045a2 <__intr_save>
c0104bde:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104be1:	a1 84 33 1c c0       	mov    0xc01c3384,%eax
c0104be6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104be9:	eb 5c                	jmp    c0104c47 <kfree+0x92>
			if (bb->pages == block) {
c0104beb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bee:	8b 40 04             	mov    0x4(%eax),%eax
c0104bf1:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104bf4:	75 3f                	jne    c0104c35 <kfree+0x80>
				*last = bb->next;
c0104bf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bf9:	8b 50 08             	mov    0x8(%eax),%edx
c0104bfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bff:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104c01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c04:	89 04 24             	mov    %eax,(%esp)
c0104c07:	e8 c0 f9 ff ff       	call   c01045cc <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c0f:	8b 10                	mov    (%eax),%edx
c0104c11:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c14:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104c18:	89 04 24             	mov    %eax,(%esp)
c0104c1b:	e8 05 fb ff ff       	call   c0104725 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104c20:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104c27:	00 
c0104c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c2b:	89 04 24             	mov    %eax,(%esp)
c0104c2e:	e8 fb fc ff ff       	call   c010492e <slob_free>
				return;
c0104c33:	eb 3a                	jmp    c0104c6f <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c38:	83 c0 08             	add    $0x8,%eax
c0104c3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c41:	8b 40 08             	mov    0x8(%eax),%eax
c0104c44:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c47:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104c4b:	75 9e                	jne    c0104beb <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104c4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c50:	89 04 24             	mov    %eax,(%esp)
c0104c53:	e8 74 f9 ff ff       	call   c01045cc <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104c58:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c5b:	83 e8 08             	sub    $0x8,%eax
c0104c5e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104c65:	00 
c0104c66:	89 04 24             	mov    %eax,(%esp)
c0104c69:	e8 c0 fc ff ff       	call   c010492e <slob_free>
	return;
c0104c6e:	90                   	nop
}
c0104c6f:	c9                   	leave  
c0104c70:	c3                   	ret    

c0104c71 <ksize>:


unsigned int ksize(const void *block)
{
c0104c71:	55                   	push   %ebp
c0104c72:	89 e5                	mov    %esp,%ebp
c0104c74:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104c77:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104c7b:	75 07                	jne    c0104c84 <ksize+0x13>
		return 0;
c0104c7d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c82:	eb 6b                	jmp    c0104cef <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104c84:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c87:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104c8c:	85 c0                	test   %eax,%eax
c0104c8e:	75 54                	jne    c0104ce4 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104c90:	e8 0d f9 ff ff       	call   c01045a2 <__intr_save>
c0104c95:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104c98:	a1 84 33 1c c0       	mov    0xc01c3384,%eax
c0104c9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ca0:	eb 31                	jmp    c0104cd3 <ksize+0x62>
			if (bb->pages == block) {
c0104ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ca5:	8b 40 04             	mov    0x4(%eax),%eax
c0104ca8:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104cab:	75 1d                	jne    c0104cca <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104cad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cb0:	89 04 24             	mov    %eax,(%esp)
c0104cb3:	e8 14 f9 ff ff       	call   c01045cc <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104cb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cbb:	8b 00                	mov    (%eax),%eax
c0104cbd:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104cc2:	89 c1                	mov    %eax,%ecx
c0104cc4:	d3 e2                	shl    %cl,%edx
c0104cc6:	89 d0                	mov    %edx,%eax
c0104cc8:	eb 25                	jmp    c0104cef <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104cca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ccd:	8b 40 08             	mov    0x8(%eax),%eax
c0104cd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104cd3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104cd7:	75 c9                	jne    c0104ca2 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104cd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cdc:	89 04 24             	mov    %eax,(%esp)
c0104cdf:	e8 e8 f8 ff ff       	call   c01045cc <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104ce4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ce7:	83 e8 08             	sub    $0x8,%eax
c0104cea:	8b 00                	mov    (%eax),%eax
c0104cec:	c1 e0 03             	shl    $0x3,%eax
}
c0104cef:	c9                   	leave  
c0104cf0:	c3                   	ret    

c0104cf1 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104cf1:	55                   	push   %ebp
c0104cf2:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104cf4:	8b 55 08             	mov    0x8(%ebp),%edx
c0104cf7:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0104cfc:	29 c2                	sub    %eax,%edx
c0104cfe:	89 d0                	mov    %edx,%eax
c0104d00:	c1 f8 05             	sar    $0x5,%eax
}
c0104d03:	5d                   	pop    %ebp
c0104d04:	c3                   	ret    

c0104d05 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104d05:	55                   	push   %ebp
c0104d06:	89 e5                	mov    %esp,%ebp
c0104d08:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104d0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d0e:	89 04 24             	mov    %eax,(%esp)
c0104d11:	e8 db ff ff ff       	call   c0104cf1 <page2ppn>
c0104d16:	c1 e0 0c             	shl    $0xc,%eax
}
c0104d19:	c9                   	leave  
c0104d1a:	c3                   	ret    

c0104d1b <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104d1b:	55                   	push   %ebp
c0104d1c:	89 e5                	mov    %esp,%ebp
c0104d1e:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104d21:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d24:	c1 e8 0c             	shr    $0xc,%eax
c0104d27:	89 c2                	mov    %eax,%edx
c0104d29:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0104d2e:	39 c2                	cmp    %eax,%edx
c0104d30:	72 1c                	jb     c0104d4e <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104d32:	c7 44 24 08 7c e3 10 	movl   $0xc010e37c,0x8(%esp)
c0104d39:	c0 
c0104d3a:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104d41:	00 
c0104d42:	c7 04 24 9b e3 10 c0 	movl   $0xc010e39b,(%esp)
c0104d49:	e8 8c c0 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0104d4e:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0104d53:	8b 55 08             	mov    0x8(%ebp),%edx
c0104d56:	c1 ea 0c             	shr    $0xc,%edx
c0104d59:	c1 e2 05             	shl    $0x5,%edx
c0104d5c:	01 d0                	add    %edx,%eax
}
c0104d5e:	c9                   	leave  
c0104d5f:	c3                   	ret    

c0104d60 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104d60:	55                   	push   %ebp
c0104d61:	89 e5                	mov    %esp,%ebp
c0104d63:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104d66:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d69:	89 04 24             	mov    %eax,(%esp)
c0104d6c:	e8 94 ff ff ff       	call   c0104d05 <page2pa>
c0104d71:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d77:	c1 e8 0c             	shr    $0xc,%eax
c0104d7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d7d:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0104d82:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104d85:	72 23                	jb     c0104daa <page2kva+0x4a>
c0104d87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d8a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104d8e:	c7 44 24 08 ac e3 10 	movl   $0xc010e3ac,0x8(%esp)
c0104d95:	c0 
c0104d96:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104d9d:	00 
c0104d9e:	c7 04 24 9b e3 10 c0 	movl   $0xc010e39b,(%esp)
c0104da5:	e8 30 c0 ff ff       	call   c0100dda <__panic>
c0104daa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dad:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104db2:	c9                   	leave  
c0104db3:	c3                   	ret    

c0104db4 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104db4:	55                   	push   %ebp
c0104db5:	89 e5                	mov    %esp,%ebp
c0104db7:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104dba:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dbd:	83 e0 01             	and    $0x1,%eax
c0104dc0:	85 c0                	test   %eax,%eax
c0104dc2:	75 1c                	jne    c0104de0 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104dc4:	c7 44 24 08 d0 e3 10 	movl   $0xc010e3d0,0x8(%esp)
c0104dcb:	c0 
c0104dcc:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104dd3:	00 
c0104dd4:	c7 04 24 9b e3 10 c0 	movl   $0xc010e39b,(%esp)
c0104ddb:	e8 fa bf ff ff       	call   c0100dda <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104de0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104de3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104de8:	89 04 24             	mov    %eax,(%esp)
c0104deb:	e8 2b ff ff ff       	call   c0104d1b <pa2page>
}
c0104df0:	c9                   	leave  
c0104df1:	c3                   	ret    

c0104df2 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104df2:	55                   	push   %ebp
c0104df3:	89 e5                	mov    %esp,%ebp
c0104df5:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104df8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dfb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104e00:	89 04 24             	mov    %eax,(%esp)
c0104e03:	e8 13 ff ff ff       	call   c0104d1b <pa2page>
}
c0104e08:	c9                   	leave  
c0104e09:	c3                   	ret    

c0104e0a <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104e0a:	55                   	push   %ebp
c0104e0b:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104e0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e10:	8b 00                	mov    (%eax),%eax
}
c0104e12:	5d                   	pop    %ebp
c0104e13:	c3                   	ret    

c0104e14 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104e14:	55                   	push   %ebp
c0104e15:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104e17:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e1a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e1d:	89 10                	mov    %edx,(%eax)
}
c0104e1f:	5d                   	pop    %ebp
c0104e20:	c3                   	ret    

c0104e21 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104e21:	55                   	push   %ebp
c0104e22:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104e24:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e27:	8b 00                	mov    (%eax),%eax
c0104e29:	8d 50 01             	lea    0x1(%eax),%edx
c0104e2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e2f:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104e31:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e34:	8b 00                	mov    (%eax),%eax
}
c0104e36:	5d                   	pop    %ebp
c0104e37:	c3                   	ret    

c0104e38 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104e38:	55                   	push   %ebp
c0104e39:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104e3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e3e:	8b 00                	mov    (%eax),%eax
c0104e40:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104e43:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e46:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104e48:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e4b:	8b 00                	mov    (%eax),%eax
}
c0104e4d:	5d                   	pop    %ebp
c0104e4e:	c3                   	ret    

c0104e4f <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104e4f:	55                   	push   %ebp
c0104e50:	89 e5                	mov    %esp,%ebp
c0104e52:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104e55:	9c                   	pushf  
c0104e56:	58                   	pop    %eax
c0104e57:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104e5d:	25 00 02 00 00       	and    $0x200,%eax
c0104e62:	85 c0                	test   %eax,%eax
c0104e64:	74 0c                	je     c0104e72 <__intr_save+0x23>
        intr_disable();
c0104e66:	e8 c7 d1 ff ff       	call   c0102032 <intr_disable>
        return 1;
c0104e6b:	b8 01 00 00 00       	mov    $0x1,%eax
c0104e70:	eb 05                	jmp    c0104e77 <__intr_save+0x28>
    }
    return 0;
c0104e72:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104e77:	c9                   	leave  
c0104e78:	c3                   	ret    

c0104e79 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104e79:	55                   	push   %ebp
c0104e7a:	89 e5                	mov    %esp,%ebp
c0104e7c:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104e7f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104e83:	74 05                	je     c0104e8a <__intr_restore+0x11>
        intr_enable();
c0104e85:	e8 a2 d1 ff ff       	call   c010202c <intr_enable>
    }
}
c0104e8a:	c9                   	leave  
c0104e8b:	c3                   	ret    

c0104e8c <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104e8c:	55                   	push   %ebp
c0104e8d:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104e8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e92:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104e95:	b8 23 00 00 00       	mov    $0x23,%eax
c0104e9a:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104e9c:	b8 23 00 00 00       	mov    $0x23,%eax
c0104ea1:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104ea3:	b8 10 00 00 00       	mov    $0x10,%eax
c0104ea8:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104eaa:	b8 10 00 00 00       	mov    $0x10,%eax
c0104eaf:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104eb1:	b8 10 00 00 00       	mov    $0x10,%eax
c0104eb6:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104eb8:	ea bf 4e 10 c0 08 00 	ljmp   $0x8,$0xc0104ebf
}
c0104ebf:	5d                   	pop    %ebp
c0104ec0:	c3                   	ret    

c0104ec1 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104ec1:	55                   	push   %ebp
c0104ec2:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ec7:	a3 c4 33 1c c0       	mov    %eax,0xc01c33c4
}
c0104ecc:	5d                   	pop    %ebp
c0104ecd:	c3                   	ret    

c0104ece <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104ece:	55                   	push   %ebp
c0104ecf:	89 e5                	mov    %esp,%ebp
c0104ed1:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0104ed4:	b8 00 10 13 c0       	mov    $0xc0131000,%eax
c0104ed9:	89 04 24             	mov    %eax,(%esp)
c0104edc:	e8 e0 ff ff ff       	call   c0104ec1 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0104ee1:	66 c7 05 c8 33 1c c0 	movw   $0x10,0xc01c33c8
c0104ee8:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0104eea:	66 c7 05 48 1a 13 c0 	movw   $0x68,0xc0131a48
c0104ef1:	68 00 
c0104ef3:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
c0104ef8:	66 a3 4a 1a 13 c0    	mov    %ax,0xc0131a4a
c0104efe:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
c0104f03:	c1 e8 10             	shr    $0x10,%eax
c0104f06:	a2 4c 1a 13 c0       	mov    %al,0xc0131a4c
c0104f0b:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0104f12:	83 e0 f0             	and    $0xfffffff0,%eax
c0104f15:	83 c8 09             	or     $0x9,%eax
c0104f18:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0104f1d:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0104f24:	83 e0 ef             	and    $0xffffffef,%eax
c0104f27:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0104f2c:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0104f33:	83 e0 9f             	and    $0xffffff9f,%eax
c0104f36:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0104f3b:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0104f42:	83 c8 80             	or     $0xffffff80,%eax
c0104f45:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0104f4a:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0104f51:	83 e0 f0             	and    $0xfffffff0,%eax
c0104f54:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0104f59:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0104f60:	83 e0 ef             	and    $0xffffffef,%eax
c0104f63:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0104f68:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0104f6f:	83 e0 df             	and    $0xffffffdf,%eax
c0104f72:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0104f77:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0104f7e:	83 c8 40             	or     $0x40,%eax
c0104f81:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0104f86:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0104f8d:	83 e0 7f             	and    $0x7f,%eax
c0104f90:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0104f95:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
c0104f9a:	c1 e8 18             	shr    $0x18,%eax
c0104f9d:	a2 4f 1a 13 c0       	mov    %al,0xc0131a4f

    // reload all segment registers
    lgdt(&gdt_pd);
c0104fa2:	c7 04 24 50 1a 13 c0 	movl   $0xc0131a50,(%esp)
c0104fa9:	e8 de fe ff ff       	call   c0104e8c <lgdt>
c0104fae:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0104fb4:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0104fb8:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0104fbb:	c9                   	leave  
c0104fbc:	c3                   	ret    

c0104fbd <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0104fbd:	55                   	push   %ebp
c0104fbe:	89 e5                	mov    %esp,%ebp
c0104fc0:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0104fc3:	c7 05 e8 54 1c c0 70 	movl   $0xc010e270,0xc01c54e8
c0104fca:	e2 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0104fcd:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c0104fd2:	8b 00                	mov    (%eax),%eax
c0104fd4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104fd8:	c7 04 24 fc e3 10 c0 	movl   $0xc010e3fc,(%esp)
c0104fdf:	e8 74 b3 ff ff       	call   c0100358 <cprintf>
    pmm_manager->init();
c0104fe4:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c0104fe9:	8b 40 04             	mov    0x4(%eax),%eax
c0104fec:	ff d0                	call   *%eax
}
c0104fee:	c9                   	leave  
c0104fef:	c3                   	ret    

c0104ff0 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0104ff0:	55                   	push   %ebp
c0104ff1:	89 e5                	mov    %esp,%ebp
c0104ff3:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0104ff6:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c0104ffb:	8b 40 08             	mov    0x8(%eax),%eax
c0104ffe:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105001:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105005:	8b 55 08             	mov    0x8(%ebp),%edx
c0105008:	89 14 24             	mov    %edx,(%esp)
c010500b:	ff d0                	call   *%eax
}
c010500d:	c9                   	leave  
c010500e:	c3                   	ret    

c010500f <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c010500f:	55                   	push   %ebp
c0105010:	89 e5                	mov    %esp,%ebp
c0105012:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105015:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c010501c:	e8 2e fe ff ff       	call   c0104e4f <__intr_save>
c0105021:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105024:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c0105029:	8b 40 0c             	mov    0xc(%eax),%eax
c010502c:	8b 55 08             	mov    0x8(%ebp),%edx
c010502f:	89 14 24             	mov    %edx,(%esp)
c0105032:	ff d0                	call   *%eax
c0105034:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105037:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010503a:	89 04 24             	mov    %eax,(%esp)
c010503d:	e8 37 fe ff ff       	call   c0104e79 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105042:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105046:	75 2d                	jne    c0105075 <alloc_pages+0x66>
c0105048:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010504c:	77 27                	ja     c0105075 <alloc_pages+0x66>
c010504e:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c0105053:	85 c0                	test   %eax,%eax
c0105055:	74 1e                	je     c0105075 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0105057:	8b 55 08             	mov    0x8(%ebp),%edx
c010505a:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c010505f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105066:	00 
c0105067:	89 54 24 04          	mov    %edx,0x4(%esp)
c010506b:	89 04 24             	mov    %eax,(%esp)
c010506e:	e8 90 1d 00 00       	call   c0106e03 <swap_out>
    }
c0105073:	eb a7                	jmp    c010501c <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0105075:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105078:	c9                   	leave  
c0105079:	c3                   	ret    

c010507a <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c010507a:	55                   	push   %ebp
c010507b:	89 e5                	mov    %esp,%ebp
c010507d:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0105080:	e8 ca fd ff ff       	call   c0104e4f <__intr_save>
c0105085:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0105088:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c010508d:	8b 40 10             	mov    0x10(%eax),%eax
c0105090:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105093:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105097:	8b 55 08             	mov    0x8(%ebp),%edx
c010509a:	89 14 24             	mov    %edx,(%esp)
c010509d:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c010509f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050a2:	89 04 24             	mov    %eax,(%esp)
c01050a5:	e8 cf fd ff ff       	call   c0104e79 <__intr_restore>
}
c01050aa:	c9                   	leave  
c01050ab:	c3                   	ret    

c01050ac <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01050ac:	55                   	push   %ebp
c01050ad:	89 e5                	mov    %esp,%ebp
c01050af:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01050b2:	e8 98 fd ff ff       	call   c0104e4f <__intr_save>
c01050b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01050ba:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c01050bf:	8b 40 14             	mov    0x14(%eax),%eax
c01050c2:	ff d0                	call   *%eax
c01050c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01050c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050ca:	89 04 24             	mov    %eax,(%esp)
c01050cd:	e8 a7 fd ff ff       	call   c0104e79 <__intr_restore>
    return ret;
c01050d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01050d5:	c9                   	leave  
c01050d6:	c3                   	ret    

c01050d7 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01050d7:	55                   	push   %ebp
c01050d8:	89 e5                	mov    %esp,%ebp
c01050da:	57                   	push   %edi
c01050db:	56                   	push   %esi
c01050dc:	53                   	push   %ebx
c01050dd:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01050e3:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01050ea:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01050f1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c01050f8:	c7 04 24 13 e4 10 c0 	movl   $0xc010e413,(%esp)
c01050ff:	e8 54 b2 ff ff       	call   c0100358 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105104:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010510b:	e9 15 01 00 00       	jmp    c0105225 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105110:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105113:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105116:	89 d0                	mov    %edx,%eax
c0105118:	c1 e0 02             	shl    $0x2,%eax
c010511b:	01 d0                	add    %edx,%eax
c010511d:	c1 e0 02             	shl    $0x2,%eax
c0105120:	01 c8                	add    %ecx,%eax
c0105122:	8b 50 08             	mov    0x8(%eax),%edx
c0105125:	8b 40 04             	mov    0x4(%eax),%eax
c0105128:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010512b:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010512e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105131:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105134:	89 d0                	mov    %edx,%eax
c0105136:	c1 e0 02             	shl    $0x2,%eax
c0105139:	01 d0                	add    %edx,%eax
c010513b:	c1 e0 02             	shl    $0x2,%eax
c010513e:	01 c8                	add    %ecx,%eax
c0105140:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105143:	8b 58 10             	mov    0x10(%eax),%ebx
c0105146:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105149:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010514c:	01 c8                	add    %ecx,%eax
c010514e:	11 da                	adc    %ebx,%edx
c0105150:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105153:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0105156:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105159:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010515c:	89 d0                	mov    %edx,%eax
c010515e:	c1 e0 02             	shl    $0x2,%eax
c0105161:	01 d0                	add    %edx,%eax
c0105163:	c1 e0 02             	shl    $0x2,%eax
c0105166:	01 c8                	add    %ecx,%eax
c0105168:	83 c0 14             	add    $0x14,%eax
c010516b:	8b 00                	mov    (%eax),%eax
c010516d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0105173:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105176:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105179:	83 c0 ff             	add    $0xffffffff,%eax
c010517c:	83 d2 ff             	adc    $0xffffffff,%edx
c010517f:	89 c6                	mov    %eax,%esi
c0105181:	89 d7                	mov    %edx,%edi
c0105183:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105186:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105189:	89 d0                	mov    %edx,%eax
c010518b:	c1 e0 02             	shl    $0x2,%eax
c010518e:	01 d0                	add    %edx,%eax
c0105190:	c1 e0 02             	shl    $0x2,%eax
c0105193:	01 c8                	add    %ecx,%eax
c0105195:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105198:	8b 58 10             	mov    0x10(%eax),%ebx
c010519b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01051a1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01051a5:	89 74 24 14          	mov    %esi,0x14(%esp)
c01051a9:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01051ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01051b0:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01051b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01051b7:	89 54 24 10          	mov    %edx,0x10(%esp)
c01051bb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01051bf:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01051c3:	c7 04 24 20 e4 10 c0 	movl   $0xc010e420,(%esp)
c01051ca:	e8 89 b1 ff ff       	call   c0100358 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01051cf:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01051d2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01051d5:	89 d0                	mov    %edx,%eax
c01051d7:	c1 e0 02             	shl    $0x2,%eax
c01051da:	01 d0                	add    %edx,%eax
c01051dc:	c1 e0 02             	shl    $0x2,%eax
c01051df:	01 c8                	add    %ecx,%eax
c01051e1:	83 c0 14             	add    $0x14,%eax
c01051e4:	8b 00                	mov    (%eax),%eax
c01051e6:	83 f8 01             	cmp    $0x1,%eax
c01051e9:	75 36                	jne    c0105221 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c01051eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01051ee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01051f1:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01051f4:	77 2b                	ja     c0105221 <page_init+0x14a>
c01051f6:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01051f9:	72 05                	jb     c0105200 <page_init+0x129>
c01051fb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01051fe:	73 21                	jae    c0105221 <page_init+0x14a>
c0105200:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105204:	77 1b                	ja     c0105221 <page_init+0x14a>
c0105206:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010520a:	72 09                	jb     c0105215 <page_init+0x13e>
c010520c:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105213:	77 0c                	ja     c0105221 <page_init+0x14a>
                maxpa = end;
c0105215:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105218:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010521b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010521e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105221:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105225:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105228:	8b 00                	mov    (%eax),%eax
c010522a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010522d:	0f 8f dd fe ff ff    	jg     c0105110 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0105233:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105237:	72 1d                	jb     c0105256 <page_init+0x17f>
c0105239:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010523d:	77 09                	ja     c0105248 <page_init+0x171>
c010523f:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0105246:	76 0e                	jbe    c0105256 <page_init+0x17f>
        maxpa = KMEMSIZE;
c0105248:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c010524f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0105256:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105259:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010525c:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105260:	c1 ea 0c             	shr    $0xc,%edx
c0105263:	a3 a0 33 1c c0       	mov    %eax,0xc01c33a0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0105268:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c010526f:	b8 c4 56 1c c0       	mov    $0xc01c56c4,%eax
c0105274:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105277:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010527a:	01 d0                	add    %edx,%eax
c010527c:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010527f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105282:	ba 00 00 00 00       	mov    $0x0,%edx
c0105287:	f7 75 ac             	divl   -0x54(%ebp)
c010528a:	89 d0                	mov    %edx,%eax
c010528c:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010528f:	29 c2                	sub    %eax,%edx
c0105291:	89 d0                	mov    %edx,%eax
c0105293:	a3 f0 54 1c c0       	mov    %eax,0xc01c54f0

    for (i = 0; i < npage; i ++) {
c0105298:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010529f:	eb 27                	jmp    c01052c8 <page_init+0x1f1>
        SetPageReserved(pages + i);
c01052a1:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c01052a6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052a9:	c1 e2 05             	shl    $0x5,%edx
c01052ac:	01 d0                	add    %edx,%eax
c01052ae:	83 c0 04             	add    $0x4,%eax
c01052b1:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01052b8:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01052bb:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01052be:	8b 55 90             	mov    -0x70(%ebp),%edx
c01052c1:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01052c4:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01052c8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052cb:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01052d0:	39 c2                	cmp    %eax,%edx
c01052d2:	72 cd                	jb     c01052a1 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01052d4:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01052d9:	c1 e0 05             	shl    $0x5,%eax
c01052dc:	89 c2                	mov    %eax,%edx
c01052de:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c01052e3:	01 d0                	add    %edx,%eax
c01052e5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01052e8:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01052ef:	77 23                	ja     c0105314 <page_init+0x23d>
c01052f1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01052f4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01052f8:	c7 44 24 08 50 e4 10 	movl   $0xc010e450,0x8(%esp)
c01052ff:	c0 
c0105300:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105307:	00 
c0105308:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010530f:	e8 c6 ba ff ff       	call   c0100dda <__panic>
c0105314:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105317:	05 00 00 00 40       	add    $0x40000000,%eax
c010531c:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010531f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105326:	e9 74 01 00 00       	jmp    c010549f <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010532b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010532e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105331:	89 d0                	mov    %edx,%eax
c0105333:	c1 e0 02             	shl    $0x2,%eax
c0105336:	01 d0                	add    %edx,%eax
c0105338:	c1 e0 02             	shl    $0x2,%eax
c010533b:	01 c8                	add    %ecx,%eax
c010533d:	8b 50 08             	mov    0x8(%eax),%edx
c0105340:	8b 40 04             	mov    0x4(%eax),%eax
c0105343:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105346:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105349:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010534c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010534f:	89 d0                	mov    %edx,%eax
c0105351:	c1 e0 02             	shl    $0x2,%eax
c0105354:	01 d0                	add    %edx,%eax
c0105356:	c1 e0 02             	shl    $0x2,%eax
c0105359:	01 c8                	add    %ecx,%eax
c010535b:	8b 48 0c             	mov    0xc(%eax),%ecx
c010535e:	8b 58 10             	mov    0x10(%eax),%ebx
c0105361:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105364:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105367:	01 c8                	add    %ecx,%eax
c0105369:	11 da                	adc    %ebx,%edx
c010536b:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010536e:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105371:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105374:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105377:	89 d0                	mov    %edx,%eax
c0105379:	c1 e0 02             	shl    $0x2,%eax
c010537c:	01 d0                	add    %edx,%eax
c010537e:	c1 e0 02             	shl    $0x2,%eax
c0105381:	01 c8                	add    %ecx,%eax
c0105383:	83 c0 14             	add    $0x14,%eax
c0105386:	8b 00                	mov    (%eax),%eax
c0105388:	83 f8 01             	cmp    $0x1,%eax
c010538b:	0f 85 0a 01 00 00    	jne    c010549b <page_init+0x3c4>
            if (begin < freemem) {
c0105391:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105394:	ba 00 00 00 00       	mov    $0x0,%edx
c0105399:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010539c:	72 17                	jb     c01053b5 <page_init+0x2de>
c010539e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01053a1:	77 05                	ja     c01053a8 <page_init+0x2d1>
c01053a3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01053a6:	76 0d                	jbe    c01053b5 <page_init+0x2de>
                begin = freemem;
c01053a8:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01053ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01053ae:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01053b5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01053b9:	72 1d                	jb     c01053d8 <page_init+0x301>
c01053bb:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01053bf:	77 09                	ja     c01053ca <page_init+0x2f3>
c01053c1:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01053c8:	76 0e                	jbe    c01053d8 <page_init+0x301>
                end = KMEMSIZE;
c01053ca:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01053d1:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01053d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01053db:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01053de:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01053e1:	0f 87 b4 00 00 00    	ja     c010549b <page_init+0x3c4>
c01053e7:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01053ea:	72 09                	jb     c01053f5 <page_init+0x31e>
c01053ec:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01053ef:	0f 83 a6 00 00 00    	jae    c010549b <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c01053f5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c01053fc:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01053ff:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105402:	01 d0                	add    %edx,%eax
c0105404:	83 e8 01             	sub    $0x1,%eax
c0105407:	89 45 98             	mov    %eax,-0x68(%ebp)
c010540a:	8b 45 98             	mov    -0x68(%ebp),%eax
c010540d:	ba 00 00 00 00       	mov    $0x0,%edx
c0105412:	f7 75 9c             	divl   -0x64(%ebp)
c0105415:	89 d0                	mov    %edx,%eax
c0105417:	8b 55 98             	mov    -0x68(%ebp),%edx
c010541a:	29 c2                	sub    %eax,%edx
c010541c:	89 d0                	mov    %edx,%eax
c010541e:	ba 00 00 00 00       	mov    $0x0,%edx
c0105423:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105426:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105429:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010542c:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010542f:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0105432:	ba 00 00 00 00       	mov    $0x0,%edx
c0105437:	89 c7                	mov    %eax,%edi
c0105439:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c010543f:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0105442:	89 d0                	mov    %edx,%eax
c0105444:	83 e0 00             	and    $0x0,%eax
c0105447:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010544a:	8b 45 80             	mov    -0x80(%ebp),%eax
c010544d:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0105450:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105453:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0105456:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105459:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010545c:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010545f:	77 3a                	ja     c010549b <page_init+0x3c4>
c0105461:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105464:	72 05                	jb     c010546b <page_init+0x394>
c0105466:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105469:	73 30                	jae    c010549b <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c010546b:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010546e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0105471:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105474:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105477:	29 c8                	sub    %ecx,%eax
c0105479:	19 da                	sbb    %ebx,%edx
c010547b:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010547f:	c1 ea 0c             	shr    $0xc,%edx
c0105482:	89 c3                	mov    %eax,%ebx
c0105484:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105487:	89 04 24             	mov    %eax,(%esp)
c010548a:	e8 8c f8 ff ff       	call   c0104d1b <pa2page>
c010548f:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0105493:	89 04 24             	mov    %eax,(%esp)
c0105496:	e8 55 fb ff ff       	call   c0104ff0 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c010549b:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010549f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01054a2:	8b 00                	mov    (%eax),%eax
c01054a4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01054a7:	0f 8f 7e fe ff ff    	jg     c010532b <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01054ad:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01054b3:	5b                   	pop    %ebx
c01054b4:	5e                   	pop    %esi
c01054b5:	5f                   	pop    %edi
c01054b6:	5d                   	pop    %ebp
c01054b7:	c3                   	ret    

c01054b8 <enable_paging>:

static void
enable_paging(void) {
c01054b8:	55                   	push   %ebp
c01054b9:	89 e5                	mov    %esp,%ebp
c01054bb:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c01054be:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
c01054c3:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01054c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01054c9:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01054cc:	0f 20 c0             	mov    %cr0,%eax
c01054cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c01054d2:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01054d5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c01054d8:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c01054df:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c01054e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01054e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c01054e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054ec:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c01054ef:	c9                   	leave  
c01054f0:	c3                   	ret    

c01054f1 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01054f1:	55                   	push   %ebp
c01054f2:	89 e5                	mov    %esp,%ebp
c01054f4:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01054f7:	8b 45 14             	mov    0x14(%ebp),%eax
c01054fa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01054fd:	31 d0                	xor    %edx,%eax
c01054ff:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105504:	85 c0                	test   %eax,%eax
c0105506:	74 24                	je     c010552c <boot_map_segment+0x3b>
c0105508:	c7 44 24 0c 82 e4 10 	movl   $0xc010e482,0xc(%esp)
c010550f:	c0 
c0105510:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0105517:	c0 
c0105518:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c010551f:	00 
c0105520:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105527:	e8 ae b8 ff ff       	call   c0100dda <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c010552c:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105533:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105536:	25 ff 0f 00 00       	and    $0xfff,%eax
c010553b:	89 c2                	mov    %eax,%edx
c010553d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105540:	01 c2                	add    %eax,%edx
c0105542:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105545:	01 d0                	add    %edx,%eax
c0105547:	83 e8 01             	sub    $0x1,%eax
c010554a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010554d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105550:	ba 00 00 00 00       	mov    $0x0,%edx
c0105555:	f7 75 f0             	divl   -0x10(%ebp)
c0105558:	89 d0                	mov    %edx,%eax
c010555a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010555d:	29 c2                	sub    %eax,%edx
c010555f:	89 d0                	mov    %edx,%eax
c0105561:	c1 e8 0c             	shr    $0xc,%eax
c0105564:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105567:	8b 45 0c             	mov    0xc(%ebp),%eax
c010556a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010556d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105570:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105575:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105578:	8b 45 14             	mov    0x14(%ebp),%eax
c010557b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010557e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105581:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105586:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105589:	eb 6b                	jmp    c01055f6 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010558b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105592:	00 
c0105593:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105596:	89 44 24 04          	mov    %eax,0x4(%esp)
c010559a:	8b 45 08             	mov    0x8(%ebp),%eax
c010559d:	89 04 24             	mov    %eax,(%esp)
c01055a0:	e8 d1 01 00 00       	call   c0105776 <get_pte>
c01055a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01055a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01055ac:	75 24                	jne    c01055d2 <boot_map_segment+0xe1>
c01055ae:	c7 44 24 0c ae e4 10 	movl   $0xc010e4ae,0xc(%esp)
c01055b5:	c0 
c01055b6:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01055bd:	c0 
c01055be:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01055c5:	00 
c01055c6:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01055cd:	e8 08 b8 ff ff       	call   c0100dda <__panic>
        *ptep = pa | PTE_P | perm;
c01055d2:	8b 45 18             	mov    0x18(%ebp),%eax
c01055d5:	8b 55 14             	mov    0x14(%ebp),%edx
c01055d8:	09 d0                	or     %edx,%eax
c01055da:	83 c8 01             	or     $0x1,%eax
c01055dd:	89 c2                	mov    %eax,%edx
c01055df:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01055e2:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01055e4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01055e8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01055ef:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01055f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01055fa:	75 8f                	jne    c010558b <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01055fc:	c9                   	leave  
c01055fd:	c3                   	ret    

c01055fe <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01055fe:	55                   	push   %ebp
c01055ff:	89 e5                	mov    %esp,%ebp
c0105601:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105604:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010560b:	e8 ff f9 ff ff       	call   c010500f <alloc_pages>
c0105610:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105613:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105617:	75 1c                	jne    c0105635 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105619:	c7 44 24 08 bb e4 10 	movl   $0xc010e4bb,0x8(%esp)
c0105620:	c0 
c0105621:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0105628:	00 
c0105629:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105630:	e8 a5 b7 ff ff       	call   c0100dda <__panic>
    }
    return page2kva(p);
c0105635:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105638:	89 04 24             	mov    %eax,(%esp)
c010563b:	e8 20 f7 ff ff       	call   c0104d60 <page2kva>
}
c0105640:	c9                   	leave  
c0105641:	c3                   	ret    

c0105642 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105642:	55                   	push   %ebp
c0105643:	89 e5                	mov    %esp,%ebp
c0105645:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105648:	e8 70 f9 ff ff       	call   c0104fbd <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010564d:	e8 85 fa ff ff       	call   c01050d7 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0105652:	e8 64 09 00 00       	call   c0105fbb <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0105657:	e8 a2 ff ff ff       	call   c01055fe <boot_alloc_page>
c010565c:	a3 a4 33 1c c0       	mov    %eax,0xc01c33a4
    memset(boot_pgdir, 0, PGSIZE);
c0105661:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105666:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010566d:	00 
c010566e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105675:	00 
c0105676:	89 04 24             	mov    %eax,(%esp)
c0105679:	e8 e3 7d 00 00       	call   c010d461 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c010567e:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105683:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105686:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010568d:	77 23                	ja     c01056b2 <pmm_init+0x70>
c010568f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105692:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105696:	c7 44 24 08 50 e4 10 	movl   $0xc010e450,0x8(%esp)
c010569d:	c0 
c010569e:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c01056a5:	00 
c01056a6:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01056ad:	e8 28 b7 ff ff       	call   c0100dda <__panic>
c01056b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056b5:	05 00 00 00 40       	add    $0x40000000,%eax
c01056ba:	a3 ec 54 1c c0       	mov    %eax,0xc01c54ec

    check_pgdir();
c01056bf:	e8 15 09 00 00       	call   c0105fd9 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01056c4:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01056c9:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01056cf:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01056d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01056d7:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01056de:	77 23                	ja     c0105703 <pmm_init+0xc1>
c01056e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01056e7:	c7 44 24 08 50 e4 10 	movl   $0xc010e450,0x8(%esp)
c01056ee:	c0 
c01056ef:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c01056f6:	00 
c01056f7:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01056fe:	e8 d7 b6 ff ff       	call   c0100dda <__panic>
c0105703:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105706:	05 00 00 00 40       	add    $0x40000000,%eax
c010570b:	83 c8 03             	or     $0x3,%eax
c010570e:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0105710:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105715:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010571c:	00 
c010571d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105724:	00 
c0105725:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c010572c:	38 
c010572d:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105734:	c0 
c0105735:	89 04 24             	mov    %eax,(%esp)
c0105738:	e8 b4 fd ff ff       	call   c01054f1 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c010573d:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105742:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
c0105748:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c010574e:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0105750:	e8 63 fd ff ff       	call   c01054b8 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105755:	e8 74 f7 ff ff       	call   c0104ece <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c010575a:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010575f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105765:	e8 0a 0f 00 00       	call   c0106674 <check_boot_pgdir>

    print_pgdir();
c010576a:	e8 97 13 00 00       	call   c0106b06 <print_pgdir>
    
    kmalloc_init();
c010576f:	e8 e6 f2 ff ff       	call   c0104a5a <kmalloc_init>

}
c0105774:	c9                   	leave  
c0105775:	c3                   	ret    

c0105776 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0105776:	55                   	push   %ebp
c0105777:	89 e5                	mov    %esp,%ebp
c0105779:	83 ec 38             	sub    $0x38,%esp
     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
     */

	// 获取页目录表（一级页表）
	pde_t *pdep = &pgdir[PDX(la)];   // (1) find page directory entry
c010577c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010577f:	c1 e8 16             	shr    $0x16,%eax
c0105782:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105789:	8b 45 08             	mov    0x8(%ebp),%eax
c010578c:	01 d0                	add    %edx,%eax
c010578e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// 页表、页目录表不存在
	if (!(PTE_P & *pdep)) {              // (2) check if entry is not present
c0105791:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105794:	8b 00                	mov    (%eax),%eax
c0105796:	83 e0 01             	and    $0x1,%eax
c0105799:	85 c0                	test   %eax,%eax
c010579b:	0f 85 b6 00 00 00    	jne    c0105857 <get_pte+0xe1>
		struct Page *page = NULL;
c01057a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		// 如果不需要create或者alloc_page失败
		if(!create || (page = alloc_page()) == NULL) {				  // (3) check if creating is needed, then alloc page for page table
c01057a8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01057ac:	74 15                	je     c01057c3 <get_pte+0x4d>
c01057ae:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01057b5:	e8 55 f8 ff ff       	call   c010500f <alloc_pages>
c01057ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01057bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01057c1:	75 0a                	jne    c01057cd <get_pte+0x57>
			return NULL;
c01057c3:	b8 00 00 00 00       	mov    $0x0,%eax
c01057c8:	e9 e6 00 00 00       	jmp    c01058b3 <get_pte+0x13d>
		}                  // CAUTION: this page is used for page table, not for common data page
		// 到这里，如果需要create的话，就已经执行过alloc了
		// 引用数+1
		set_page_ref(page,1);					// (4) set page reference
c01057cd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01057d4:	00 
c01057d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057d8:	89 04 24             	mov    %eax,(%esp)
c01057db:	e8 34 f6 ff ff       	call   c0104e14 <set_page_ref>
		// 获得线性地址
		uintptr_t pa = page2pa(page); 			// (5) get linear address of page
c01057e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057e3:	89 04 24             	mov    %eax,(%esp)
c01057e6:	e8 1a f5 ff ff       	call   c0104d05 <page2pa>
c01057eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
		// If you need to visit a physical address, please use KADDR()
		// KADDR(pa)将物理地址转换为内核虚拟地址，第二个参数将这一页清空，第三个参数是4096也就是一页的大小
		memset(KADDR(pa), 0, PGSIZE);      		// (6) clear page content using memset
c01057ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01057f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01057f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01057f7:	c1 e8 0c             	shr    $0xc,%eax
c01057fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01057fd:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0105802:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105805:	72 23                	jb     c010582a <get_pte+0xb4>
c0105807:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010580a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010580e:	c7 44 24 08 ac e3 10 	movl   $0xc010e3ac,0x8(%esp)
c0105815:	c0 
c0105816:	c7 44 24 04 94 01 00 	movl   $0x194,0x4(%esp)
c010581d:	00 
c010581e:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105825:	e8 b0 b5 ff ff       	call   c0100dda <__panic>
c010582a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010582d:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105832:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105839:	00 
c010583a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105841:	00 
c0105842:	89 04 24             	mov    %eax,(%esp)
c0105845:	e8 17 7c 00 00       	call   c010d461 <memset>
		// 页目录项内容 = (页表起始物理地址 &0x0FFF) | PTE_U | PTE_W | PTE_P
		*pdep = pa | PTE_U | PTE_W | PTE_P;		// (7) set page directory entry's permission
c010584a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010584d:	83 c8 07             	or     $0x7,%eax
c0105850:	89 c2                	mov    %eax,%edx
c0105852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105855:	89 10                	mov    %edx,(%eax)
	}
	// 返回pte_t *，页表的地址
	return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c0105857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010585a:	8b 00                	mov    (%eax),%eax
c010585c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105861:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105864:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105867:	c1 e8 0c             	shr    $0xc,%eax
c010586a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010586d:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0105872:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105875:	72 23                	jb     c010589a <get_pte+0x124>
c0105877:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010587a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010587e:	c7 44 24 08 ac e3 10 	movl   $0xc010e3ac,0x8(%esp)
c0105885:	c0 
c0105886:	c7 44 24 04 99 01 00 	movl   $0x199,0x4(%esp)
c010588d:	00 
c010588e:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105895:	e8 40 b5 ff ff       	call   c0100dda <__panic>
c010589a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010589d:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01058a2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01058a5:	c1 ea 0c             	shr    $0xc,%edx
c01058a8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c01058ae:	c1 e2 02             	shl    $0x2,%edx
c01058b1:	01 d0                	add    %edx,%eax
	// 不用再返回NULL了，前面如果不需要create或者alloc失败就会返回NULL
	//return NULL;          // (8) return page table entry


}
c01058b3:	c9                   	leave  
c01058b4:	c3                   	ret    

c01058b5 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c01058b5:	55                   	push   %ebp
c01058b6:	89 e5                	mov    %esp,%ebp
c01058b8:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01058bb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01058c2:	00 
c01058c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058c6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01058ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01058cd:	89 04 24             	mov    %eax,(%esp)
c01058d0:	e8 a1 fe ff ff       	call   c0105776 <get_pte>
c01058d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c01058d8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01058dc:	74 08                	je     c01058e6 <get_page+0x31>
        *ptep_store = ptep;
c01058de:	8b 45 10             	mov    0x10(%ebp),%eax
c01058e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01058e4:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c01058e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01058ea:	74 1b                	je     c0105907 <get_page+0x52>
c01058ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058ef:	8b 00                	mov    (%eax),%eax
c01058f1:	83 e0 01             	and    $0x1,%eax
c01058f4:	85 c0                	test   %eax,%eax
c01058f6:	74 0f                	je     c0105907 <get_page+0x52>
        return pa2page(*ptep);
c01058f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058fb:	8b 00                	mov    (%eax),%eax
c01058fd:	89 04 24             	mov    %eax,(%esp)
c0105900:	e8 16 f4 ff ff       	call   c0104d1b <pa2page>
c0105905:	eb 05                	jmp    c010590c <get_page+0x57>
    }
    return NULL;
c0105907:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010590c:	c9                   	leave  
c010590d:	c3                   	ret    

c010590e <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c010590e:	55                   	push   %ebp
c010590f:	89 e5                	mov    %esp,%ebp
c0105911:	83 ec 28             	sub    $0x28,%esp
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif

    if (*ptep & PTE_P) {                      //(1) check if this page table entry is present（存在）
c0105914:	8b 45 10             	mov    0x10(%ebp),%eax
c0105917:	8b 00                	mov    (%eax),%eax
c0105919:	83 e0 01             	and    $0x1,%eax
c010591c:	85 c0                	test   %eax,%eax
c010591e:	74 4d                	je     c010596d <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep); //(2) find corresponding page to pte
c0105920:	8b 45 10             	mov    0x10(%ebp),%eax
c0105923:	8b 00                	mov    (%eax),%eax
c0105925:	89 04 24             	mov    %eax,(%esp)
c0105928:	e8 87 f4 ff ff       	call   c0104db4 <pte2page>
c010592d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {               //(3) decrease page reference
c0105930:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105933:	89 04 24             	mov    %eax,(%esp)
c0105936:	e8 fd f4 ff ff       	call   c0104e38 <page_ref_dec>
c010593b:	85 c0                	test   %eax,%eax
c010593d:	75 13                	jne    c0105952 <page_remove_pte+0x44>
        	free_page(page);
c010593f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105946:	00 
c0105947:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010594a:	89 04 24             	mov    %eax,(%esp)
c010594d:	e8 28 f7 ff ff       	call   c010507a <free_pages>
        }
        *ptep = 0;						  //(4) and free this page when page reference reachs 0
c0105952:	8b 45 10             	mov    0x10(%ebp),%eax
c0105955:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
                                  	  	  //(5) clear second page table entry
        tlb_invalidate(pgdir, la);  	  //(6) flush tlb
c010595b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010595e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105962:	8b 45 08             	mov    0x8(%ebp),%eax
c0105965:	89 04 24             	mov    %eax,(%esp)
c0105968:	e8 1d 05 00 00       	call   c0105e8a <tlb_invalidate>
    }

}
c010596d:	c9                   	leave  
c010596e:	c3                   	ret    

c010596f <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c010596f:	55                   	push   %ebp
c0105970:	89 e5                	mov    %esp,%ebp
c0105972:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105975:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105978:	25 ff 0f 00 00       	and    $0xfff,%eax
c010597d:	85 c0                	test   %eax,%eax
c010597f:	75 0c                	jne    c010598d <unmap_range+0x1e>
c0105981:	8b 45 10             	mov    0x10(%ebp),%eax
c0105984:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105989:	85 c0                	test   %eax,%eax
c010598b:	74 24                	je     c01059b1 <unmap_range+0x42>
c010598d:	c7 44 24 0c d4 e4 10 	movl   $0xc010e4d4,0xc(%esp)
c0105994:	c0 
c0105995:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c010599c:	c0 
c010599d:	c7 44 24 04 da 01 00 	movl   $0x1da,0x4(%esp)
c01059a4:	00 
c01059a5:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01059ac:	e8 29 b4 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c01059b1:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01059b8:	76 11                	jbe    c01059cb <unmap_range+0x5c>
c01059ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059bd:	3b 45 10             	cmp    0x10(%ebp),%eax
c01059c0:	73 09                	jae    c01059cb <unmap_range+0x5c>
c01059c2:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c01059c9:	76 24                	jbe    c01059ef <unmap_range+0x80>
c01059cb:	c7 44 24 0c fd e4 10 	movl   $0xc010e4fd,0xc(%esp)
c01059d2:	c0 
c01059d3:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01059da:	c0 
c01059db:	c7 44 24 04 db 01 00 	movl   $0x1db,0x4(%esp)
c01059e2:	00 
c01059e3:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01059ea:	e8 eb b3 ff ff       	call   c0100dda <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c01059ef:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01059f6:	00 
c01059f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a01:	89 04 24             	mov    %eax,(%esp)
c0105a04:	e8 6d fd ff ff       	call   c0105776 <get_pte>
c0105a09:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105a0c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a10:	75 18                	jne    c0105a2a <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a15:	05 00 00 40 00       	add    $0x400000,%eax
c0105a1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105a1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a20:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105a25:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105a28:	eb 29                	jmp    c0105a53 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105a2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a2d:	8b 00                	mov    (%eax),%eax
c0105a2f:	85 c0                	test   %eax,%eax
c0105a31:	74 19                	je     c0105a4c <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a36:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105a3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a3d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a41:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a44:	89 04 24             	mov    %eax,(%esp)
c0105a47:	e8 c2 fe ff ff       	call   c010590e <page_remove_pte>
        }
        start += PGSIZE;
c0105a4c:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105a53:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105a57:	74 08                	je     c0105a61 <unmap_range+0xf2>
c0105a59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a5c:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105a5f:	72 8e                	jb     c01059ef <unmap_range+0x80>
}
c0105a61:	c9                   	leave  
c0105a62:	c3                   	ret    

c0105a63 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105a63:	55                   	push   %ebp
c0105a64:	89 e5                	mov    %esp,%ebp
c0105a66:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105a69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a6c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a71:	85 c0                	test   %eax,%eax
c0105a73:	75 0c                	jne    c0105a81 <exit_range+0x1e>
c0105a75:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a78:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a7d:	85 c0                	test   %eax,%eax
c0105a7f:	74 24                	je     c0105aa5 <exit_range+0x42>
c0105a81:	c7 44 24 0c d4 e4 10 	movl   $0xc010e4d4,0xc(%esp)
c0105a88:	c0 
c0105a89:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0105a90:	c0 
c0105a91:	c7 44 24 04 ec 01 00 	movl   $0x1ec,0x4(%esp)
c0105a98:	00 
c0105a99:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105aa0:	e8 35 b3 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c0105aa5:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105aac:	76 11                	jbe    c0105abf <exit_range+0x5c>
c0105aae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ab1:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105ab4:	73 09                	jae    c0105abf <exit_range+0x5c>
c0105ab6:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105abd:	76 24                	jbe    c0105ae3 <exit_range+0x80>
c0105abf:	c7 44 24 0c fd e4 10 	movl   $0xc010e4fd,0xc(%esp)
c0105ac6:	c0 
c0105ac7:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0105ace:	c0 
c0105acf:	c7 44 24 04 ed 01 00 	movl   $0x1ed,0x4(%esp)
c0105ad6:	00 
c0105ad7:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105ade:	e8 f7 b2 ff ff       	call   c0100dda <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105ae3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ae6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105ae9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aec:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105af1:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105af4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105af7:	c1 e8 16             	shr    $0x16,%eax
c0105afa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105afd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b00:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105b07:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b0a:	01 d0                	add    %edx,%eax
c0105b0c:	8b 00                	mov    (%eax),%eax
c0105b0e:	83 e0 01             	and    $0x1,%eax
c0105b11:	85 c0                	test   %eax,%eax
c0105b13:	74 3e                	je     c0105b53 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105b15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b18:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105b1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b22:	01 d0                	add    %edx,%eax
c0105b24:	8b 00                	mov    (%eax),%eax
c0105b26:	89 04 24             	mov    %eax,(%esp)
c0105b29:	e8 c4 f2 ff ff       	call   c0104df2 <pde2page>
c0105b2e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105b35:	00 
c0105b36:	89 04 24             	mov    %eax,(%esp)
c0105b39:	e8 3c f5 ff ff       	call   c010507a <free_pages>
            pgdir[pde_idx] = 0;
c0105b3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b41:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b4b:	01 d0                	add    %edx,%eax
c0105b4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105b53:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105b5a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105b5e:	74 08                	je     c0105b68 <exit_range+0x105>
c0105b60:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b63:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b66:	72 8c                	jb     c0105af4 <exit_range+0x91>
}
c0105b68:	c9                   	leave  
c0105b69:	c3                   	ret    

c0105b6a <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105b6a:	55                   	push   %ebp
c0105b6b:	89 e5                	mov    %esp,%ebp
c0105b6d:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105b70:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b73:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b78:	85 c0                	test   %eax,%eax
c0105b7a:	75 0c                	jne    c0105b88 <copy_range+0x1e>
c0105b7c:	8b 45 14             	mov    0x14(%ebp),%eax
c0105b7f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b84:	85 c0                	test   %eax,%eax
c0105b86:	74 24                	je     c0105bac <copy_range+0x42>
c0105b88:	c7 44 24 0c d4 e4 10 	movl   $0xc010e4d4,0xc(%esp)
c0105b8f:	c0 
c0105b90:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0105b97:	c0 
c0105b98:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
c0105b9f:	00 
c0105ba0:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105ba7:	e8 2e b2 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c0105bac:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105bb3:	76 11                	jbe    c0105bc6 <copy_range+0x5c>
c0105bb5:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bb8:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105bbb:	73 09                	jae    c0105bc6 <copy_range+0x5c>
c0105bbd:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105bc4:	76 24                	jbe    c0105bea <copy_range+0x80>
c0105bc6:	c7 44 24 0c fd e4 10 	movl   $0xc010e4fd,0xc(%esp)
c0105bcd:	c0 
c0105bce:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0105bd5:	c0 
c0105bd6:	c7 44 24 04 03 02 00 	movl   $0x203,0x4(%esp)
c0105bdd:	00 
c0105bde:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105be5:	e8 f0 b1 ff ff       	call   c0100dda <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105bea:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105bf1:	00 
c0105bf2:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bf5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bfc:	89 04 24             	mov    %eax,(%esp)
c0105bff:	e8 72 fb ff ff       	call   c0105776 <get_pte>
c0105c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105c07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105c0b:	75 1b                	jne    c0105c28 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105c0d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c10:	05 00 00 40 00       	add    $0x400000,%eax
c0105c15:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105c18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c1b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c20:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105c23:	e9 4c 01 00 00       	jmp    c0105d74 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c2b:	8b 00                	mov    (%eax),%eax
c0105c2d:	83 e0 01             	and    $0x1,%eax
c0105c30:	85 c0                	test   %eax,%eax
c0105c32:	0f 84 35 01 00 00    	je     c0105d6d <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105c38:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105c3f:	00 
c0105c40:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c47:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c4a:	89 04 24             	mov    %eax,(%esp)
c0105c4d:	e8 24 fb ff ff       	call   c0105776 <get_pte>
c0105c52:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105c55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105c59:	75 0a                	jne    c0105c65 <copy_range+0xfb>
                return -E_NO_MEM;
c0105c5b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105c60:	e9 26 01 00 00       	jmp    c0105d8b <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);				// 本页面权限
c0105c65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c68:	8b 00                	mov    (%eax),%eax
c0105c6a:	83 e0 07             	and    $0x7,%eax
c0105c6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c73:	8b 00                	mov    (%eax),%eax
c0105c75:	89 04 24             	mov    %eax,(%esp)
c0105c78:	e8 37 f1 ff ff       	call   c0104db4 <pte2page>
c0105c7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105c80:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105c87:	e8 83 f3 ff ff       	call   c010500f <alloc_pages>
c0105c8c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105c8f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105c93:	75 24                	jne    c0105cb9 <copy_range+0x14f>
c0105c95:	c7 44 24 0c 15 e5 10 	movl   $0xc010e515,0xc(%esp)
c0105c9c:	c0 
c0105c9d:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0105ca4:	c0 
c0105ca5:	c7 44 24 04 16 02 00 	movl   $0x216,0x4(%esp)
c0105cac:	00 
c0105cad:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105cb4:	e8 21 b1 ff ff       	call   c0100dda <__panic>
        assert(npage!=NULL);
c0105cb9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105cbd:	75 24                	jne    c0105ce3 <copy_range+0x179>
c0105cbf:	c7 44 24 0c 20 e5 10 	movl   $0xc010e520,0xc(%esp)
c0105cc6:	c0 
c0105cc7:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0105cce:	c0 
c0105ccf:	c7 44 24 04 17 02 00 	movl   $0x217,0x4(%esp)
c0105cd6:	00 
c0105cd7:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105cde:	e8 f7 b0 ff ff       	call   c0100dda <__panic>
        int ret=0;
c0105ce3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        char *src_kvaddr = page2kva(page);
c0105cea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ced:	89 04 24             	mov    %eax,(%esp)
c0105cf0:	e8 6b f0 ff ff       	call   c0104d60 <page2kva>
c0105cf5:	89 45 d8             	mov    %eax,-0x28(%ebp)
        char *dst_kvaddr = page2kva(npage);
c0105cf8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105cfb:	89 04 24             	mov    %eax,(%esp)
c0105cfe:	e8 5d f0 ff ff       	call   c0104d60 <page2kva>
c0105d03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0105d06:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105d0d:	00 
c0105d0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105d11:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d15:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105d18:	89 04 24             	mov    %eax,(%esp)
c0105d1b:	e8 23 78 00 00       	call   c010d543 <memcpy>
        ret = page_insert(to, npage, start, perm);				// 建立虚拟地址与线性地址映射
c0105d20:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d23:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105d27:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d2a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105d31:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d38:	89 04 24             	mov    %eax,(%esp)
c0105d3b:	e8 91 00 00 00       	call   c0105dd1 <page_insert>
c0105d40:	89 45 dc             	mov    %eax,-0x24(%ebp)

        assert(ret == 0);
c0105d43:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105d47:	74 24                	je     c0105d6d <copy_range+0x203>
c0105d49:	c7 44 24 0c 2c e5 10 	movl   $0xc010e52c,0xc(%esp)
c0105d50:	c0 
c0105d51:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0105d58:	c0 
c0105d59:	c7 44 24 04 2c 02 00 	movl   $0x22c,0x4(%esp)
c0105d60:	00 
c0105d61:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105d68:	e8 6d b0 ff ff       	call   c0100dda <__panic>
        }
        start += PGSIZE;
c0105d6d:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105d74:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105d78:	74 0c                	je     c0105d86 <copy_range+0x21c>
c0105d7a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d7d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105d80:	0f 82 64 fe ff ff    	jb     c0105bea <copy_range+0x80>
    return 0;
c0105d86:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105d8b:	c9                   	leave  
c0105d8c:	c3                   	ret    

c0105d8d <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105d8d:	55                   	push   %ebp
c0105d8e:	89 e5                	mov    %esp,%ebp
c0105d90:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105d93:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105d9a:	00 
c0105d9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105da2:	8b 45 08             	mov    0x8(%ebp),%eax
c0105da5:	89 04 24             	mov    %eax,(%esp)
c0105da8:	e8 c9 f9 ff ff       	call   c0105776 <get_pte>
c0105dad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105db0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105db4:	74 19                	je     c0105dcf <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105db9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105dbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105dc0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105dc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dc7:	89 04 24             	mov    %eax,(%esp)
c0105dca:	e8 3f fb ff ff       	call   c010590e <page_remove_pte>
    }
}
c0105dcf:	c9                   	leave  
c0105dd0:	c3                   	ret    

c0105dd1 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105dd1:	55                   	push   %ebp
c0105dd2:	89 e5                	mov    %esp,%ebp
c0105dd4:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105dd7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105dde:	00 
c0105ddf:	8b 45 10             	mov    0x10(%ebp),%eax
c0105de2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105de6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105de9:	89 04 24             	mov    %eax,(%esp)
c0105dec:	e8 85 f9 ff ff       	call   c0105776 <get_pte>
c0105df1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105df4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105df8:	75 0a                	jne    c0105e04 <page_insert+0x33>
        return -E_NO_MEM;
c0105dfa:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105dff:	e9 84 00 00 00       	jmp    c0105e88 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105e04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e07:	89 04 24             	mov    %eax,(%esp)
c0105e0a:	e8 12 f0 ff ff       	call   c0104e21 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105e0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e12:	8b 00                	mov    (%eax),%eax
c0105e14:	83 e0 01             	and    $0x1,%eax
c0105e17:	85 c0                	test   %eax,%eax
c0105e19:	74 3e                	je     c0105e59 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e1e:	8b 00                	mov    (%eax),%eax
c0105e20:	89 04 24             	mov    %eax,(%esp)
c0105e23:	e8 8c ef ff ff       	call   c0104db4 <pte2page>
c0105e28:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105e2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e2e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105e31:	75 0d                	jne    c0105e40 <page_insert+0x6f>
            page_ref_dec(page);
c0105e33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e36:	89 04 24             	mov    %eax,(%esp)
c0105e39:	e8 fa ef ff ff       	call   c0104e38 <page_ref_dec>
c0105e3e:	eb 19                	jmp    c0105e59 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105e40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e43:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e47:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e51:	89 04 24             	mov    %eax,(%esp)
c0105e54:	e8 b5 fa ff ff       	call   c010590e <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105e59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e5c:	89 04 24             	mov    %eax,(%esp)
c0105e5f:	e8 a1 ee ff ff       	call   c0104d05 <page2pa>
c0105e64:	0b 45 14             	or     0x14(%ebp),%eax
c0105e67:	83 c8 01             	or     $0x1,%eax
c0105e6a:	89 c2                	mov    %eax,%edx
c0105e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e6f:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105e71:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e74:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e78:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e7b:	89 04 24             	mov    %eax,(%esp)
c0105e7e:	e8 07 00 00 00       	call   c0105e8a <tlb_invalidate>
    return 0;
c0105e83:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105e88:	c9                   	leave  
c0105e89:	c3                   	ret    

c0105e8a <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105e8a:	55                   	push   %ebp
c0105e8b:	89 e5                	mov    %esp,%ebp
c0105e8d:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105e90:	0f 20 d8             	mov    %cr3,%eax
c0105e93:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105e96:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105e99:	89 c2                	mov    %eax,%edx
c0105e9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105ea1:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105ea8:	77 23                	ja     c0105ecd <tlb_invalidate+0x43>
c0105eaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ead:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105eb1:	c7 44 24 08 50 e4 10 	movl   $0xc010e450,0x8(%esp)
c0105eb8:	c0 
c0105eb9:	c7 44 24 04 5d 02 00 	movl   $0x25d,0x4(%esp)
c0105ec0:	00 
c0105ec1:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105ec8:	e8 0d af ff ff       	call   c0100dda <__panic>
c0105ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ed0:	05 00 00 00 40       	add    $0x40000000,%eax
c0105ed5:	39 c2                	cmp    %eax,%edx
c0105ed7:	75 0c                	jne    c0105ee5 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0105ed9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105edc:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0105edf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ee2:	0f 01 38             	invlpg (%eax)
    }
}
c0105ee5:	c9                   	leave  
c0105ee6:	c3                   	ret    

c0105ee7 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0105ee7:	55                   	push   %ebp
c0105ee8:	89 e5                	mov    %esp,%ebp
c0105eea:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0105eed:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105ef4:	e8 16 f1 ff ff       	call   c010500f <alloc_pages>
c0105ef9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0105efc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f00:	0f 84 b0 00 00 00    	je     c0105fb6 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0105f06:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f09:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105f0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f10:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f17:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f1e:	89 04 24             	mov    %eax,(%esp)
c0105f21:	e8 ab fe ff ff       	call   c0105dd1 <page_insert>
c0105f26:	85 c0                	test   %eax,%eax
c0105f28:	74 1a                	je     c0105f44 <pgdir_alloc_page+0x5d>
            free_page(page);
c0105f2a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105f31:	00 
c0105f32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f35:	89 04 24             	mov    %eax,(%esp)
c0105f38:	e8 3d f1 ff ff       	call   c010507a <free_pages>
            return NULL;
c0105f3d:	b8 00 00 00 00       	mov    $0x0,%eax
c0105f42:	eb 75                	jmp    c0105fb9 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0105f44:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c0105f49:	85 c0                	test   %eax,%eax
c0105f4b:	74 69                	je     c0105fb6 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0105f4d:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0105f52:	85 c0                	test   %eax,%eax
c0105f54:	74 60                	je     c0105fb6 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0105f56:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0105f5b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105f62:	00 
c0105f63:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105f66:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105f6a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105f6d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105f71:	89 04 24             	mov    %eax,(%esp)
c0105f74:	e8 3e 0e 00 00       	call   c0106db7 <swap_map_swappable>
                page->pra_vaddr=la;
c0105f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f7c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105f7f:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0105f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f85:	89 04 24             	mov    %eax,(%esp)
c0105f88:	e8 7d ee ff ff       	call   c0104e0a <page_ref>
c0105f8d:	83 f8 01             	cmp    $0x1,%eax
c0105f90:	74 24                	je     c0105fb6 <pgdir_alloc_page+0xcf>
c0105f92:	c7 44 24 0c 35 e5 10 	movl   $0xc010e535,0xc(%esp)
c0105f99:	c0 
c0105f9a:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0105fa1:	c0 
c0105fa2:	c7 44 24 04 71 02 00 	movl   $0x271,0x4(%esp)
c0105fa9:	00 
c0105faa:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0105fb1:	e8 24 ae ff ff       	call   c0100dda <__panic>
            }
        }

    }

    return page;
c0105fb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105fb9:	c9                   	leave  
c0105fba:	c3                   	ret    

c0105fbb <check_alloc_page>:

static void
check_alloc_page(void) {
c0105fbb:	55                   	push   %ebp
c0105fbc:	89 e5                	mov    %esp,%ebp
c0105fbe:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c0105fc1:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c0105fc6:	8b 40 18             	mov    0x18(%eax),%eax
c0105fc9:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0105fcb:	c7 04 24 4c e5 10 c0 	movl   $0xc010e54c,(%esp)
c0105fd2:	e8 81 a3 ff ff       	call   c0100358 <cprintf>
}
c0105fd7:	c9                   	leave  
c0105fd8:	c3                   	ret    

c0105fd9 <check_pgdir>:

static void
check_pgdir(void) {
c0105fd9:	55                   	push   %ebp
c0105fda:	89 e5                	mov    %esp,%ebp
c0105fdc:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0105fdf:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0105fe4:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0105fe9:	76 24                	jbe    c010600f <check_pgdir+0x36>
c0105feb:	c7 44 24 0c 6b e5 10 	movl   $0xc010e56b,0xc(%esp)
c0105ff2:	c0 
c0105ff3:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0105ffa:	c0 
c0105ffb:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c0106002:	00 
c0106003:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010600a:	e8 cb ad ff ff       	call   c0100dda <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010600f:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106014:	85 c0                	test   %eax,%eax
c0106016:	74 0e                	je     c0106026 <check_pgdir+0x4d>
c0106018:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010601d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106022:	85 c0                	test   %eax,%eax
c0106024:	74 24                	je     c010604a <check_pgdir+0x71>
c0106026:	c7 44 24 0c 88 e5 10 	movl   $0xc010e588,0xc(%esp)
c010602d:	c0 
c010602e:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106035:	c0 
c0106036:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c010603d:	00 
c010603e:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106045:	e8 90 ad ff ff       	call   c0100dda <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c010604a:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010604f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106056:	00 
c0106057:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010605e:	00 
c010605f:	89 04 24             	mov    %eax,(%esp)
c0106062:	e8 4e f8 ff ff       	call   c01058b5 <get_page>
c0106067:	85 c0                	test   %eax,%eax
c0106069:	74 24                	je     c010608f <check_pgdir+0xb6>
c010606b:	c7 44 24 0c c0 e5 10 	movl   $0xc010e5c0,0xc(%esp)
c0106072:	c0 
c0106073:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c010607a:	c0 
c010607b:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c0106082:	00 
c0106083:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010608a:	e8 4b ad ff ff       	call   c0100dda <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c010608f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106096:	e8 74 ef ff ff       	call   c010500f <alloc_pages>
c010609b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c010609e:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01060a3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01060aa:	00 
c01060ab:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01060b2:	00 
c01060b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01060b6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01060ba:	89 04 24             	mov    %eax,(%esp)
c01060bd:	e8 0f fd ff ff       	call   c0105dd1 <page_insert>
c01060c2:	85 c0                	test   %eax,%eax
c01060c4:	74 24                	je     c01060ea <check_pgdir+0x111>
c01060c6:	c7 44 24 0c e8 e5 10 	movl   $0xc010e5e8,0xc(%esp)
c01060cd:	c0 
c01060ce:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01060d5:	c0 
c01060d6:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c01060dd:	00 
c01060de:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01060e5:	e8 f0 ac ff ff       	call   c0100dda <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c01060ea:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01060ef:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01060f6:	00 
c01060f7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01060fe:	00 
c01060ff:	89 04 24             	mov    %eax,(%esp)
c0106102:	e8 6f f6 ff ff       	call   c0105776 <get_pte>
c0106107:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010610a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010610e:	75 24                	jne    c0106134 <check_pgdir+0x15b>
c0106110:	c7 44 24 0c 14 e6 10 	movl   $0xc010e614,0xc(%esp)
c0106117:	c0 
c0106118:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c010611f:	c0 
c0106120:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c0106127:	00 
c0106128:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010612f:	e8 a6 ac ff ff       	call   c0100dda <__panic>
    assert(pa2page(*ptep) == p1);
c0106134:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106137:	8b 00                	mov    (%eax),%eax
c0106139:	89 04 24             	mov    %eax,(%esp)
c010613c:	e8 da eb ff ff       	call   c0104d1b <pa2page>
c0106141:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106144:	74 24                	je     c010616a <check_pgdir+0x191>
c0106146:	c7 44 24 0c 41 e6 10 	movl   $0xc010e641,0xc(%esp)
c010614d:	c0 
c010614e:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106155:	c0 
c0106156:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c010615d:	00 
c010615e:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106165:	e8 70 ac ff ff       	call   c0100dda <__panic>
    assert(page_ref(p1) == 1);
c010616a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010616d:	89 04 24             	mov    %eax,(%esp)
c0106170:	e8 95 ec ff ff       	call   c0104e0a <page_ref>
c0106175:	83 f8 01             	cmp    $0x1,%eax
c0106178:	74 24                	je     c010619e <check_pgdir+0x1c5>
c010617a:	c7 44 24 0c 56 e6 10 	movl   $0xc010e656,0xc(%esp)
c0106181:	c0 
c0106182:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106189:	c0 
c010618a:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c0106191:	00 
c0106192:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106199:	e8 3c ac ff ff       	call   c0100dda <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010619e:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01061a3:	8b 00                	mov    (%eax),%eax
c01061a5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01061aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01061ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01061b0:	c1 e8 0c             	shr    $0xc,%eax
c01061b3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01061b6:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01061bb:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01061be:	72 23                	jb     c01061e3 <check_pgdir+0x20a>
c01061c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01061c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01061c7:	c7 44 24 08 ac e3 10 	movl   $0xc010e3ac,0x8(%esp)
c01061ce:	c0 
c01061cf:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c01061d6:	00 
c01061d7:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01061de:	e8 f7 ab ff ff       	call   c0100dda <__panic>
c01061e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01061e6:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01061eb:	83 c0 04             	add    $0x4,%eax
c01061ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01061f1:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01061f6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061fd:	00 
c01061fe:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106205:	00 
c0106206:	89 04 24             	mov    %eax,(%esp)
c0106209:	e8 68 f5 ff ff       	call   c0105776 <get_pte>
c010620e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106211:	74 24                	je     c0106237 <check_pgdir+0x25e>
c0106213:	c7 44 24 0c 68 e6 10 	movl   $0xc010e668,0xc(%esp)
c010621a:	c0 
c010621b:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106222:	c0 
c0106223:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c010622a:	00 
c010622b:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106232:	e8 a3 ab ff ff       	call   c0100dda <__panic>

    p2 = alloc_page();
c0106237:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010623e:	e8 cc ed ff ff       	call   c010500f <alloc_pages>
c0106243:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0106246:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010624b:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0106252:	00 
c0106253:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010625a:	00 
c010625b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010625e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106262:	89 04 24             	mov    %eax,(%esp)
c0106265:	e8 67 fb ff ff       	call   c0105dd1 <page_insert>
c010626a:	85 c0                	test   %eax,%eax
c010626c:	74 24                	je     c0106292 <check_pgdir+0x2b9>
c010626e:	c7 44 24 0c 90 e6 10 	movl   $0xc010e690,0xc(%esp)
c0106275:	c0 
c0106276:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c010627d:	c0 
c010627e:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c0106285:	00 
c0106286:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010628d:	e8 48 ab ff ff       	call   c0100dda <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106292:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106297:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010629e:	00 
c010629f:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01062a6:	00 
c01062a7:	89 04 24             	mov    %eax,(%esp)
c01062aa:	e8 c7 f4 ff ff       	call   c0105776 <get_pte>
c01062af:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01062b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01062b6:	75 24                	jne    c01062dc <check_pgdir+0x303>
c01062b8:	c7 44 24 0c c8 e6 10 	movl   $0xc010e6c8,0xc(%esp)
c01062bf:	c0 
c01062c0:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01062c7:	c0 
c01062c8:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c01062cf:	00 
c01062d0:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01062d7:	e8 fe aa ff ff       	call   c0100dda <__panic>
    assert(*ptep & PTE_U);
c01062dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01062df:	8b 00                	mov    (%eax),%eax
c01062e1:	83 e0 04             	and    $0x4,%eax
c01062e4:	85 c0                	test   %eax,%eax
c01062e6:	75 24                	jne    c010630c <check_pgdir+0x333>
c01062e8:	c7 44 24 0c f8 e6 10 	movl   $0xc010e6f8,0xc(%esp)
c01062ef:	c0 
c01062f0:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01062f7:	c0 
c01062f8:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c01062ff:	00 
c0106300:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106307:	e8 ce aa ff ff       	call   c0100dda <__panic>
    assert(*ptep & PTE_W);
c010630c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010630f:	8b 00                	mov    (%eax),%eax
c0106311:	83 e0 02             	and    $0x2,%eax
c0106314:	85 c0                	test   %eax,%eax
c0106316:	75 24                	jne    c010633c <check_pgdir+0x363>
c0106318:	c7 44 24 0c 06 e7 10 	movl   $0xc010e706,0xc(%esp)
c010631f:	c0 
c0106320:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106327:	c0 
c0106328:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c010632f:	00 
c0106330:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106337:	e8 9e aa ff ff       	call   c0100dda <__panic>
    assert(boot_pgdir[0] & PTE_U);
c010633c:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106341:	8b 00                	mov    (%eax),%eax
c0106343:	83 e0 04             	and    $0x4,%eax
c0106346:	85 c0                	test   %eax,%eax
c0106348:	75 24                	jne    c010636e <check_pgdir+0x395>
c010634a:	c7 44 24 0c 14 e7 10 	movl   $0xc010e714,0xc(%esp)
c0106351:	c0 
c0106352:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106359:	c0 
c010635a:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c0106361:	00 
c0106362:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106369:	e8 6c aa ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 1);
c010636e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106371:	89 04 24             	mov    %eax,(%esp)
c0106374:	e8 91 ea ff ff       	call   c0104e0a <page_ref>
c0106379:	83 f8 01             	cmp    $0x1,%eax
c010637c:	74 24                	je     c01063a2 <check_pgdir+0x3c9>
c010637e:	c7 44 24 0c 2a e7 10 	movl   $0xc010e72a,0xc(%esp)
c0106385:	c0 
c0106386:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c010638d:	c0 
c010638e:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c0106395:	00 
c0106396:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010639d:	e8 38 aa ff ff       	call   c0100dda <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01063a2:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01063a7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01063ae:	00 
c01063af:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01063b6:	00 
c01063b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01063ba:	89 54 24 04          	mov    %edx,0x4(%esp)
c01063be:	89 04 24             	mov    %eax,(%esp)
c01063c1:	e8 0b fa ff ff       	call   c0105dd1 <page_insert>
c01063c6:	85 c0                	test   %eax,%eax
c01063c8:	74 24                	je     c01063ee <check_pgdir+0x415>
c01063ca:	c7 44 24 0c 3c e7 10 	movl   $0xc010e73c,0xc(%esp)
c01063d1:	c0 
c01063d2:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01063d9:	c0 
c01063da:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c01063e1:	00 
c01063e2:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01063e9:	e8 ec a9 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p1) == 2);
c01063ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063f1:	89 04 24             	mov    %eax,(%esp)
c01063f4:	e8 11 ea ff ff       	call   c0104e0a <page_ref>
c01063f9:	83 f8 02             	cmp    $0x2,%eax
c01063fc:	74 24                	je     c0106422 <check_pgdir+0x449>
c01063fe:	c7 44 24 0c 68 e7 10 	movl   $0xc010e768,0xc(%esp)
c0106405:	c0 
c0106406:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c010640d:	c0 
c010640e:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c0106415:	00 
c0106416:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010641d:	e8 b8 a9 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c0106422:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106425:	89 04 24             	mov    %eax,(%esp)
c0106428:	e8 dd e9 ff ff       	call   c0104e0a <page_ref>
c010642d:	85 c0                	test   %eax,%eax
c010642f:	74 24                	je     c0106455 <check_pgdir+0x47c>
c0106431:	c7 44 24 0c 7a e7 10 	movl   $0xc010e77a,0xc(%esp)
c0106438:	c0 
c0106439:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106440:	c0 
c0106441:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c0106448:	00 
c0106449:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106450:	e8 85 a9 ff ff       	call   c0100dda <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106455:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010645a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106461:	00 
c0106462:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106469:	00 
c010646a:	89 04 24             	mov    %eax,(%esp)
c010646d:	e8 04 f3 ff ff       	call   c0105776 <get_pte>
c0106472:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106475:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106479:	75 24                	jne    c010649f <check_pgdir+0x4c6>
c010647b:	c7 44 24 0c c8 e6 10 	movl   $0xc010e6c8,0xc(%esp)
c0106482:	c0 
c0106483:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c010648a:	c0 
c010648b:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c0106492:	00 
c0106493:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010649a:	e8 3b a9 ff ff       	call   c0100dda <__panic>
    assert(pa2page(*ptep) == p1);
c010649f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064a2:	8b 00                	mov    (%eax),%eax
c01064a4:	89 04 24             	mov    %eax,(%esp)
c01064a7:	e8 6f e8 ff ff       	call   c0104d1b <pa2page>
c01064ac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01064af:	74 24                	je     c01064d5 <check_pgdir+0x4fc>
c01064b1:	c7 44 24 0c 41 e6 10 	movl   $0xc010e641,0xc(%esp)
c01064b8:	c0 
c01064b9:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01064c0:	c0 
c01064c1:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c01064c8:	00 
c01064c9:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01064d0:	e8 05 a9 ff ff       	call   c0100dda <__panic>
    assert((*ptep & PTE_U) == 0);
c01064d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064d8:	8b 00                	mov    (%eax),%eax
c01064da:	83 e0 04             	and    $0x4,%eax
c01064dd:	85 c0                	test   %eax,%eax
c01064df:	74 24                	je     c0106505 <check_pgdir+0x52c>
c01064e1:	c7 44 24 0c 8c e7 10 	movl   $0xc010e78c,0xc(%esp)
c01064e8:	c0 
c01064e9:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01064f0:	c0 
c01064f1:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c01064f8:	00 
c01064f9:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106500:	e8 d5 a8 ff ff       	call   c0100dda <__panic>

    page_remove(boot_pgdir, 0x0);
c0106505:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010650a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106511:	00 
c0106512:	89 04 24             	mov    %eax,(%esp)
c0106515:	e8 73 f8 ff ff       	call   c0105d8d <page_remove>
    assert(page_ref(p1) == 1);
c010651a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010651d:	89 04 24             	mov    %eax,(%esp)
c0106520:	e8 e5 e8 ff ff       	call   c0104e0a <page_ref>
c0106525:	83 f8 01             	cmp    $0x1,%eax
c0106528:	74 24                	je     c010654e <check_pgdir+0x575>
c010652a:	c7 44 24 0c 56 e6 10 	movl   $0xc010e656,0xc(%esp)
c0106531:	c0 
c0106532:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106539:	c0 
c010653a:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c0106541:	00 
c0106542:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106549:	e8 8c a8 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c010654e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106551:	89 04 24             	mov    %eax,(%esp)
c0106554:	e8 b1 e8 ff ff       	call   c0104e0a <page_ref>
c0106559:	85 c0                	test   %eax,%eax
c010655b:	74 24                	je     c0106581 <check_pgdir+0x5a8>
c010655d:	c7 44 24 0c 7a e7 10 	movl   $0xc010e77a,0xc(%esp)
c0106564:	c0 
c0106565:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c010656c:	c0 
c010656d:	c7 44 24 04 aa 02 00 	movl   $0x2aa,0x4(%esp)
c0106574:	00 
c0106575:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010657c:	e8 59 a8 ff ff       	call   c0100dda <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0106581:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106586:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010658d:	00 
c010658e:	89 04 24             	mov    %eax,(%esp)
c0106591:	e8 f7 f7 ff ff       	call   c0105d8d <page_remove>
    assert(page_ref(p1) == 0);
c0106596:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106599:	89 04 24             	mov    %eax,(%esp)
c010659c:	e8 69 e8 ff ff       	call   c0104e0a <page_ref>
c01065a1:	85 c0                	test   %eax,%eax
c01065a3:	74 24                	je     c01065c9 <check_pgdir+0x5f0>
c01065a5:	c7 44 24 0c a1 e7 10 	movl   $0xc010e7a1,0xc(%esp)
c01065ac:	c0 
c01065ad:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01065b4:	c0 
c01065b5:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c01065bc:	00 
c01065bd:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01065c4:	e8 11 a8 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c01065c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065cc:	89 04 24             	mov    %eax,(%esp)
c01065cf:	e8 36 e8 ff ff       	call   c0104e0a <page_ref>
c01065d4:	85 c0                	test   %eax,%eax
c01065d6:	74 24                	je     c01065fc <check_pgdir+0x623>
c01065d8:	c7 44 24 0c 7a e7 10 	movl   $0xc010e77a,0xc(%esp)
c01065df:	c0 
c01065e0:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01065e7:	c0 
c01065e8:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c01065ef:	00 
c01065f0:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01065f7:	e8 de a7 ff ff       	call   c0100dda <__panic>

    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
c01065fc:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106601:	8b 00                	mov    (%eax),%eax
c0106603:	89 04 24             	mov    %eax,(%esp)
c0106606:	e8 10 e7 ff ff       	call   c0104d1b <pa2page>
c010660b:	89 04 24             	mov    %eax,(%esp)
c010660e:	e8 f7 e7 ff ff       	call   c0104e0a <page_ref>
c0106613:	83 f8 01             	cmp    $0x1,%eax
c0106616:	74 24                	je     c010663c <check_pgdir+0x663>
c0106618:	c7 44 24 0c b4 e7 10 	movl   $0xc010e7b4,0xc(%esp)
c010661f:	c0 
c0106620:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106627:	c0 
c0106628:	c7 44 24 04 b0 02 00 	movl   $0x2b0,0x4(%esp)
c010662f:	00 
c0106630:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106637:	e8 9e a7 ff ff       	call   c0100dda <__panic>
    free_page(pa2page(boot_pgdir[0]));
c010663c:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106641:	8b 00                	mov    (%eax),%eax
c0106643:	89 04 24             	mov    %eax,(%esp)
c0106646:	e8 d0 e6 ff ff       	call   c0104d1b <pa2page>
c010664b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106652:	00 
c0106653:	89 04 24             	mov    %eax,(%esp)
c0106656:	e8 1f ea ff ff       	call   c010507a <free_pages>
    boot_pgdir[0] = 0;
c010665b:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106660:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0106666:	c7 04 24 da e7 10 c0 	movl   $0xc010e7da,(%esp)
c010666d:	e8 e6 9c ff ff       	call   c0100358 <cprintf>
}
c0106672:	c9                   	leave  
c0106673:	c3                   	ret    

c0106674 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0106674:	55                   	push   %ebp
c0106675:	89 e5                	mov    %esp,%ebp
c0106677:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c010667a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106681:	e9 ca 00 00 00       	jmp    c0106750 <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106686:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106689:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010668c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010668f:	c1 e8 0c             	shr    $0xc,%eax
c0106692:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106695:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010669a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010669d:	72 23                	jb     c01066c2 <check_boot_pgdir+0x4e>
c010669f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066a2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01066a6:	c7 44 24 08 ac e3 10 	movl   $0xc010e3ac,0x8(%esp)
c01066ad:	c0 
c01066ae:	c7 44 24 04 bc 02 00 	movl   $0x2bc,0x4(%esp)
c01066b5:	00 
c01066b6:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01066bd:	e8 18 a7 ff ff       	call   c0100dda <__panic>
c01066c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066c5:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01066ca:	89 c2                	mov    %eax,%edx
c01066cc:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01066d1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01066d8:	00 
c01066d9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01066dd:	89 04 24             	mov    %eax,(%esp)
c01066e0:	e8 91 f0 ff ff       	call   c0105776 <get_pte>
c01066e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01066e8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01066ec:	75 24                	jne    c0106712 <check_boot_pgdir+0x9e>
c01066ee:	c7 44 24 0c f4 e7 10 	movl   $0xc010e7f4,0xc(%esp)
c01066f5:	c0 
c01066f6:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01066fd:	c0 
c01066fe:	c7 44 24 04 bc 02 00 	movl   $0x2bc,0x4(%esp)
c0106705:	00 
c0106706:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010670d:	e8 c8 a6 ff ff       	call   c0100dda <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0106712:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106715:	8b 00                	mov    (%eax),%eax
c0106717:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010671c:	89 c2                	mov    %eax,%edx
c010671e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106721:	39 c2                	cmp    %eax,%edx
c0106723:	74 24                	je     c0106749 <check_boot_pgdir+0xd5>
c0106725:	c7 44 24 0c 31 e8 10 	movl   $0xc010e831,0xc(%esp)
c010672c:	c0 
c010672d:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106734:	c0 
c0106735:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c010673c:	00 
c010673d:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106744:	e8 91 a6 ff ff       	call   c0100dda <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106749:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0106750:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106753:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0106758:	39 c2                	cmp    %eax,%edx
c010675a:	0f 82 26 ff ff ff    	jb     c0106686 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0106760:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106765:	05 ac 0f 00 00       	add    $0xfac,%eax
c010676a:	8b 00                	mov    (%eax),%eax
c010676c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106771:	89 c2                	mov    %eax,%edx
c0106773:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106778:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010677b:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0106782:	77 23                	ja     c01067a7 <check_boot_pgdir+0x133>
c0106784:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106787:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010678b:	c7 44 24 08 50 e4 10 	movl   $0xc010e450,0x8(%esp)
c0106792:	c0 
c0106793:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c010679a:	00 
c010679b:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01067a2:	e8 33 a6 ff ff       	call   c0100dda <__panic>
c01067a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01067aa:	05 00 00 00 40       	add    $0x40000000,%eax
c01067af:	39 c2                	cmp    %eax,%edx
c01067b1:	74 24                	je     c01067d7 <check_boot_pgdir+0x163>
c01067b3:	c7 44 24 0c 48 e8 10 	movl   $0xc010e848,0xc(%esp)
c01067ba:	c0 
c01067bb:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01067c2:	c0 
c01067c3:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c01067ca:	00 
c01067cb:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01067d2:	e8 03 a6 ff ff       	call   c0100dda <__panic>

    assert(boot_pgdir[0] == 0);
c01067d7:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01067dc:	8b 00                	mov    (%eax),%eax
c01067de:	85 c0                	test   %eax,%eax
c01067e0:	74 24                	je     c0106806 <check_boot_pgdir+0x192>
c01067e2:	c7 44 24 0c 7c e8 10 	movl   $0xc010e87c,0xc(%esp)
c01067e9:	c0 
c01067ea:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01067f1:	c0 
c01067f2:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c01067f9:	00 
c01067fa:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106801:	e8 d4 a5 ff ff       	call   c0100dda <__panic>

    struct Page *p;
    p = alloc_page();
c0106806:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010680d:	e8 fd e7 ff ff       	call   c010500f <alloc_pages>
c0106812:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106815:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010681a:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106821:	00 
c0106822:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106829:	00 
c010682a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010682d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106831:	89 04 24             	mov    %eax,(%esp)
c0106834:	e8 98 f5 ff ff       	call   c0105dd1 <page_insert>
c0106839:	85 c0                	test   %eax,%eax
c010683b:	74 24                	je     c0106861 <check_boot_pgdir+0x1ed>
c010683d:	c7 44 24 0c 90 e8 10 	movl   $0xc010e890,0xc(%esp)
c0106844:	c0 
c0106845:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c010684c:	c0 
c010684d:	c7 44 24 04 c6 02 00 	movl   $0x2c6,0x4(%esp)
c0106854:	00 
c0106855:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c010685c:	e8 79 a5 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p) == 1);
c0106861:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106864:	89 04 24             	mov    %eax,(%esp)
c0106867:	e8 9e e5 ff ff       	call   c0104e0a <page_ref>
c010686c:	83 f8 01             	cmp    $0x1,%eax
c010686f:	74 24                	je     c0106895 <check_boot_pgdir+0x221>
c0106871:	c7 44 24 0c be e8 10 	movl   $0xc010e8be,0xc(%esp)
c0106878:	c0 
c0106879:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106880:	c0 
c0106881:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
c0106888:	00 
c0106889:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106890:	e8 45 a5 ff ff       	call   c0100dda <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106895:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010689a:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01068a1:	00 
c01068a2:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c01068a9:	00 
c01068aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01068ad:	89 54 24 04          	mov    %edx,0x4(%esp)
c01068b1:	89 04 24             	mov    %eax,(%esp)
c01068b4:	e8 18 f5 ff ff       	call   c0105dd1 <page_insert>
c01068b9:	85 c0                	test   %eax,%eax
c01068bb:	74 24                	je     c01068e1 <check_boot_pgdir+0x26d>
c01068bd:	c7 44 24 0c d0 e8 10 	movl   $0xc010e8d0,0xc(%esp)
c01068c4:	c0 
c01068c5:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c01068cc:	c0 
c01068cd:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c01068d4:	00 
c01068d5:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01068dc:	e8 f9 a4 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p) == 2);
c01068e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01068e4:	89 04 24             	mov    %eax,(%esp)
c01068e7:	e8 1e e5 ff ff       	call   c0104e0a <page_ref>
c01068ec:	83 f8 02             	cmp    $0x2,%eax
c01068ef:	74 24                	je     c0106915 <check_boot_pgdir+0x2a1>
c01068f1:	c7 44 24 0c 07 e9 10 	movl   $0xc010e907,0xc(%esp)
c01068f8:	c0 
c01068f9:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106900:	c0 
c0106901:	c7 44 24 04 c9 02 00 	movl   $0x2c9,0x4(%esp)
c0106908:	00 
c0106909:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106910:	e8 c5 a4 ff ff       	call   c0100dda <__panic>

    const char *str = "ucore: Hello world!!";
c0106915:	c7 45 dc 18 e9 10 c0 	movl   $0xc010e918,-0x24(%ebp)
    strcpy((void *)0x100, str);
c010691c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010691f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106923:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c010692a:	e8 5b 68 00 00       	call   c010d18a <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c010692f:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106936:	00 
c0106937:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c010693e:	e8 c0 68 00 00       	call   c010d203 <strcmp>
c0106943:	85 c0                	test   %eax,%eax
c0106945:	74 24                	je     c010696b <check_boot_pgdir+0x2f7>
c0106947:	c7 44 24 0c 30 e9 10 	movl   $0xc010e930,0xc(%esp)
c010694e:	c0 
c010694f:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c0106956:	c0 
c0106957:	c7 44 24 04 cd 02 00 	movl   $0x2cd,0x4(%esp)
c010695e:	00 
c010695f:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c0106966:	e8 6f a4 ff ff       	call   c0100dda <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c010696b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010696e:	89 04 24             	mov    %eax,(%esp)
c0106971:	e8 ea e3 ff ff       	call   c0104d60 <page2kva>
c0106976:	05 00 01 00 00       	add    $0x100,%eax
c010697b:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c010697e:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106985:	e8 a8 67 00 00       	call   c010d132 <strlen>
c010698a:	85 c0                	test   %eax,%eax
c010698c:	74 24                	je     c01069b2 <check_boot_pgdir+0x33e>
c010698e:	c7 44 24 0c 68 e9 10 	movl   $0xc010e968,0xc(%esp)
c0106995:	c0 
c0106996:	c7 44 24 08 99 e4 10 	movl   $0xc010e499,0x8(%esp)
c010699d:	c0 
c010699e:	c7 44 24 04 d0 02 00 	movl   $0x2d0,0x4(%esp)
c01069a5:	00 
c01069a6:	c7 04 24 74 e4 10 c0 	movl   $0xc010e474,(%esp)
c01069ad:	e8 28 a4 ff ff       	call   c0100dda <__panic>

    free_page(p);
c01069b2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01069b9:	00 
c01069ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069bd:	89 04 24             	mov    %eax,(%esp)
c01069c0:	e8 b5 e6 ff ff       	call   c010507a <free_pages>
    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
c01069c5:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01069ca:	8b 00                	mov    (%eax),%eax
c01069cc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01069d1:	89 04 24             	mov    %eax,(%esp)
c01069d4:	e8 42 e3 ff ff       	call   c0104d1b <pa2page>
c01069d9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01069e0:	00 
c01069e1:	89 04 24             	mov    %eax,(%esp)
c01069e4:	e8 91 e6 ff ff       	call   c010507a <free_pages>
    boot_pgdir[0] = 0;
c01069e9:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01069ee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c01069f4:	c7 04 24 8c e9 10 c0 	movl   $0xc010e98c,(%esp)
c01069fb:	e8 58 99 ff ff       	call   c0100358 <cprintf>
}
c0106a00:	c9                   	leave  
c0106a01:	c3                   	ret    

c0106a02 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106a02:	55                   	push   %ebp
c0106a03:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106a05:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a08:	83 e0 04             	and    $0x4,%eax
c0106a0b:	85 c0                	test   %eax,%eax
c0106a0d:	74 07                	je     c0106a16 <perm2str+0x14>
c0106a0f:	b8 75 00 00 00       	mov    $0x75,%eax
c0106a14:	eb 05                	jmp    c0106a1b <perm2str+0x19>
c0106a16:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106a1b:	a2 28 34 1c c0       	mov    %al,0xc01c3428
    str[1] = 'r';
c0106a20:	c6 05 29 34 1c c0 72 	movb   $0x72,0xc01c3429
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106a27:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a2a:	83 e0 02             	and    $0x2,%eax
c0106a2d:	85 c0                	test   %eax,%eax
c0106a2f:	74 07                	je     c0106a38 <perm2str+0x36>
c0106a31:	b8 77 00 00 00       	mov    $0x77,%eax
c0106a36:	eb 05                	jmp    c0106a3d <perm2str+0x3b>
c0106a38:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106a3d:	a2 2a 34 1c c0       	mov    %al,0xc01c342a
    str[3] = '\0';
c0106a42:	c6 05 2b 34 1c c0 00 	movb   $0x0,0xc01c342b
    return str;
c0106a49:	b8 28 34 1c c0       	mov    $0xc01c3428,%eax
}
c0106a4e:	5d                   	pop    %ebp
c0106a4f:	c3                   	ret    

c0106a50 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106a50:	55                   	push   %ebp
c0106a51:	89 e5                	mov    %esp,%ebp
c0106a53:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106a56:	8b 45 10             	mov    0x10(%ebp),%eax
c0106a59:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106a5c:	72 0a                	jb     c0106a68 <get_pgtable_items+0x18>
        return 0;
c0106a5e:	b8 00 00 00 00       	mov    $0x0,%eax
c0106a63:	e9 9c 00 00 00       	jmp    c0106b04 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106a68:	eb 04                	jmp    c0106a6e <get_pgtable_items+0x1e>
        start ++;
c0106a6a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106a6e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106a71:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106a74:	73 18                	jae    c0106a8e <get_pgtable_items+0x3e>
c0106a76:	8b 45 10             	mov    0x10(%ebp),%eax
c0106a79:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106a80:	8b 45 14             	mov    0x14(%ebp),%eax
c0106a83:	01 d0                	add    %edx,%eax
c0106a85:	8b 00                	mov    (%eax),%eax
c0106a87:	83 e0 01             	and    $0x1,%eax
c0106a8a:	85 c0                	test   %eax,%eax
c0106a8c:	74 dc                	je     c0106a6a <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106a8e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106a91:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106a94:	73 69                	jae    c0106aff <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106a96:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106a9a:	74 08                	je     c0106aa4 <get_pgtable_items+0x54>
            *left_store = start;
c0106a9c:	8b 45 18             	mov    0x18(%ebp),%eax
c0106a9f:	8b 55 10             	mov    0x10(%ebp),%edx
c0106aa2:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106aa4:	8b 45 10             	mov    0x10(%ebp),%eax
c0106aa7:	8d 50 01             	lea    0x1(%eax),%edx
c0106aaa:	89 55 10             	mov    %edx,0x10(%ebp)
c0106aad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106ab4:	8b 45 14             	mov    0x14(%ebp),%eax
c0106ab7:	01 d0                	add    %edx,%eax
c0106ab9:	8b 00                	mov    (%eax),%eax
c0106abb:	83 e0 07             	and    $0x7,%eax
c0106abe:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106ac1:	eb 04                	jmp    c0106ac7 <get_pgtable_items+0x77>
            start ++;
c0106ac3:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106ac7:	8b 45 10             	mov    0x10(%ebp),%eax
c0106aca:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106acd:	73 1d                	jae    c0106aec <get_pgtable_items+0x9c>
c0106acf:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ad2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106ad9:	8b 45 14             	mov    0x14(%ebp),%eax
c0106adc:	01 d0                	add    %edx,%eax
c0106ade:	8b 00                	mov    (%eax),%eax
c0106ae0:	83 e0 07             	and    $0x7,%eax
c0106ae3:	89 c2                	mov    %eax,%edx
c0106ae5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ae8:	39 c2                	cmp    %eax,%edx
c0106aea:	74 d7                	je     c0106ac3 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106aec:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106af0:	74 08                	je     c0106afa <get_pgtable_items+0xaa>
            *right_store = start;
c0106af2:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106af5:	8b 55 10             	mov    0x10(%ebp),%edx
c0106af8:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106afa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106afd:	eb 05                	jmp    c0106b04 <get_pgtable_items+0xb4>
    }
    return 0;
c0106aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106b04:	c9                   	leave  
c0106b05:	c3                   	ret    

c0106b06 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106b06:	55                   	push   %ebp
c0106b07:	89 e5                	mov    %esp,%ebp
c0106b09:	57                   	push   %edi
c0106b0a:	56                   	push   %esi
c0106b0b:	53                   	push   %ebx
c0106b0c:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106b0f:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106b16:	e8 3d 98 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
c0106b1b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106b22:	e9 fa 00 00 00       	jmp    c0106c21 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106b27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106b2a:	89 04 24             	mov    %eax,(%esp)
c0106b2d:	e8 d0 fe ff ff       	call   c0106a02 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106b32:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106b35:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106b38:	29 d1                	sub    %edx,%ecx
c0106b3a:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106b3c:	89 d6                	mov    %edx,%esi
c0106b3e:	c1 e6 16             	shl    $0x16,%esi
c0106b41:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106b44:	89 d3                	mov    %edx,%ebx
c0106b46:	c1 e3 16             	shl    $0x16,%ebx
c0106b49:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106b4c:	89 d1                	mov    %edx,%ecx
c0106b4e:	c1 e1 16             	shl    $0x16,%ecx
c0106b51:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106b54:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106b57:	29 d7                	sub    %edx,%edi
c0106b59:	89 fa                	mov    %edi,%edx
c0106b5b:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106b5f:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106b63:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106b67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106b6b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106b6f:	c7 04 24 dd e9 10 c0 	movl   $0xc010e9dd,(%esp)
c0106b76:	e8 dd 97 ff ff       	call   c0100358 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106b7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b7e:	c1 e0 0a             	shl    $0xa,%eax
c0106b81:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106b84:	eb 54                	jmp    c0106bda <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106b86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106b89:	89 04 24             	mov    %eax,(%esp)
c0106b8c:	e8 71 fe ff ff       	call   c0106a02 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106b91:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106b94:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106b97:	29 d1                	sub    %edx,%ecx
c0106b99:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106b9b:	89 d6                	mov    %edx,%esi
c0106b9d:	c1 e6 0c             	shl    $0xc,%esi
c0106ba0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106ba3:	89 d3                	mov    %edx,%ebx
c0106ba5:	c1 e3 0c             	shl    $0xc,%ebx
c0106ba8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106bab:	c1 e2 0c             	shl    $0xc,%edx
c0106bae:	89 d1                	mov    %edx,%ecx
c0106bb0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106bb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106bb6:	29 d7                	sub    %edx,%edi
c0106bb8:	89 fa                	mov    %edi,%edx
c0106bba:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106bbe:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106bc2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106bc6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106bca:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106bce:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c0106bd5:	e8 7e 97 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106bda:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106bdf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106be2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106be5:	89 ce                	mov    %ecx,%esi
c0106be7:	c1 e6 0a             	shl    $0xa,%esi
c0106bea:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106bed:	89 cb                	mov    %ecx,%ebx
c0106bef:	c1 e3 0a             	shl    $0xa,%ebx
c0106bf2:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106bf5:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106bf9:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106bfc:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106c00:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106c04:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106c08:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106c0c:	89 1c 24             	mov    %ebx,(%esp)
c0106c0f:	e8 3c fe ff ff       	call   c0106a50 <get_pgtable_items>
c0106c14:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106c17:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106c1b:	0f 85 65 ff ff ff    	jne    c0106b86 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c21:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106c26:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106c29:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106c2c:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106c30:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106c33:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106c37:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106c3b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106c3f:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106c46:	00 
c0106c47:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106c4e:	e8 fd fd ff ff       	call   c0106a50 <get_pgtable_items>
c0106c53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106c56:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106c5a:	0f 85 c7 fe ff ff    	jne    c0106b27 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106c60:	c7 04 24 20 ea 10 c0 	movl   $0xc010ea20,(%esp)
c0106c67:	e8 ec 96 ff ff       	call   c0100358 <cprintf>
}
c0106c6c:	83 c4 4c             	add    $0x4c,%esp
c0106c6f:	5b                   	pop    %ebx
c0106c70:	5e                   	pop    %esi
c0106c71:	5f                   	pop    %edi
c0106c72:	5d                   	pop    %ebp
c0106c73:	c3                   	ret    

c0106c74 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106c74:	55                   	push   %ebp
c0106c75:	89 e5                	mov    %esp,%ebp
c0106c77:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106c7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c7d:	c1 e8 0c             	shr    $0xc,%eax
c0106c80:	89 c2                	mov    %eax,%edx
c0106c82:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0106c87:	39 c2                	cmp    %eax,%edx
c0106c89:	72 1c                	jb     c0106ca7 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106c8b:	c7 44 24 08 54 ea 10 	movl   $0xc010ea54,0x8(%esp)
c0106c92:	c0 
c0106c93:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106c9a:	00 
c0106c9b:	c7 04 24 73 ea 10 c0 	movl   $0xc010ea73,(%esp)
c0106ca2:	e8 33 a1 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0106ca7:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0106cac:	8b 55 08             	mov    0x8(%ebp),%edx
c0106caf:	c1 ea 0c             	shr    $0xc,%edx
c0106cb2:	c1 e2 05             	shl    $0x5,%edx
c0106cb5:	01 d0                	add    %edx,%eax
}
c0106cb7:	c9                   	leave  
c0106cb8:	c3                   	ret    

c0106cb9 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106cb9:	55                   	push   %ebp
c0106cba:	89 e5                	mov    %esp,%ebp
c0106cbc:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106cbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cc2:	83 e0 01             	and    $0x1,%eax
c0106cc5:	85 c0                	test   %eax,%eax
c0106cc7:	75 1c                	jne    c0106ce5 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106cc9:	c7 44 24 08 84 ea 10 	movl   $0xc010ea84,0x8(%esp)
c0106cd0:	c0 
c0106cd1:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106cd8:	00 
c0106cd9:	c7 04 24 73 ea 10 c0 	movl   $0xc010ea73,(%esp)
c0106ce0:	e8 f5 a0 ff ff       	call   c0100dda <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106ce5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ce8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106ced:	89 04 24             	mov    %eax,(%esp)
c0106cf0:	e8 7f ff ff ff       	call   c0106c74 <pa2page>
}
c0106cf5:	c9                   	leave  
c0106cf6:	c3                   	ret    

c0106cf7 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106cf7:	55                   	push   %ebp
c0106cf8:	89 e5                	mov    %esp,%ebp
c0106cfa:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106cfd:	e8 20 34 00 00       	call   c010a122 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106d02:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
c0106d07:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106d0c:	76 0c                	jbe    c0106d1a <swap_init+0x23>
c0106d0e:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
c0106d13:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106d18:	76 25                	jbe    c0106d3f <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106d1a:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
c0106d1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106d23:	c7 44 24 08 a5 ea 10 	movl   $0xc010eaa5,0x8(%esp)
c0106d2a:	c0 
c0106d2b:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106d32:	00 
c0106d33:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0106d3a:	e8 9b a0 ff ff       	call   c0100dda <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106d3f:	c7 05 34 34 1c c0 60 	movl   $0xc0131a60,0xc01c3434
c0106d46:	1a 13 c0 
     int r = sm->init();
c0106d49:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106d4e:	8b 40 04             	mov    0x4(%eax),%eax
c0106d51:	ff d0                	call   *%eax
c0106d53:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106d56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106d5a:	75 26                	jne    c0106d82 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106d5c:	c7 05 2c 34 1c c0 01 	movl   $0x1,0xc01c342c
c0106d63:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106d66:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106d6b:	8b 00                	mov    (%eax),%eax
c0106d6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106d71:	c7 04 24 cf ea 10 c0 	movl   $0xc010eacf,(%esp)
c0106d78:	e8 db 95 ff ff       	call   c0100358 <cprintf>
          check_swap();
c0106d7d:	e8 a4 04 00 00       	call   c0107226 <check_swap>
     }

     return r;
c0106d82:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106d85:	c9                   	leave  
c0106d86:	c3                   	ret    

c0106d87 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106d87:	55                   	push   %ebp
c0106d88:	89 e5                	mov    %esp,%ebp
c0106d8a:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106d8d:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106d92:	8b 40 08             	mov    0x8(%eax),%eax
c0106d95:	8b 55 08             	mov    0x8(%ebp),%edx
c0106d98:	89 14 24             	mov    %edx,(%esp)
c0106d9b:	ff d0                	call   *%eax
}
c0106d9d:	c9                   	leave  
c0106d9e:	c3                   	ret    

c0106d9f <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106d9f:	55                   	push   %ebp
c0106da0:	89 e5                	mov    %esp,%ebp
c0106da2:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106da5:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106daa:	8b 40 0c             	mov    0xc(%eax),%eax
c0106dad:	8b 55 08             	mov    0x8(%ebp),%edx
c0106db0:	89 14 24             	mov    %edx,(%esp)
c0106db3:	ff d0                	call   *%eax
}
c0106db5:	c9                   	leave  
c0106db6:	c3                   	ret    

c0106db7 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106db7:	55                   	push   %ebp
c0106db8:	89 e5                	mov    %esp,%ebp
c0106dba:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106dbd:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106dc2:	8b 40 10             	mov    0x10(%eax),%eax
c0106dc5:	8b 55 14             	mov    0x14(%ebp),%edx
c0106dc8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106dcc:	8b 55 10             	mov    0x10(%ebp),%edx
c0106dcf:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106dd3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106dd6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106dda:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ddd:	89 14 24             	mov    %edx,(%esp)
c0106de0:	ff d0                	call   *%eax
}
c0106de2:	c9                   	leave  
c0106de3:	c3                   	ret    

c0106de4 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106de4:	55                   	push   %ebp
c0106de5:	89 e5                	mov    %esp,%ebp
c0106de7:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106dea:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106def:	8b 40 14             	mov    0x14(%eax),%eax
c0106df2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106df5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106df9:	8b 55 08             	mov    0x8(%ebp),%edx
c0106dfc:	89 14 24             	mov    %edx,(%esp)
c0106dff:	ff d0                	call   *%eax
}
c0106e01:	c9                   	leave  
c0106e02:	c3                   	ret    

c0106e03 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106e03:	55                   	push   %ebp
c0106e04:	89 e5                	mov    %esp,%ebp
c0106e06:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106e09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106e10:	e9 5a 01 00 00       	jmp    c0106f6f <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106e15:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106e1a:	8b 40 18             	mov    0x18(%eax),%eax
c0106e1d:	8b 55 10             	mov    0x10(%ebp),%edx
c0106e20:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106e24:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106e27:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e2b:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e2e:	89 14 24             	mov    %edx,(%esp)
c0106e31:	ff d0                	call   *%eax
c0106e33:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106e36:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106e3a:	74 18                	je     c0106e54 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106e3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e43:	c7 04 24 e4 ea 10 c0 	movl   $0xc010eae4,(%esp)
c0106e4a:	e8 09 95 ff ff       	call   c0100358 <cprintf>
c0106e4f:	e9 27 01 00 00       	jmp    c0106f7b <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106e54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e57:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106e5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106e5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e60:	8b 40 0c             	mov    0xc(%eax),%eax
c0106e63:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106e6a:	00 
c0106e6b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106e6e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e72:	89 04 24             	mov    %eax,(%esp)
c0106e75:	e8 fc e8 ff ff       	call   c0105776 <get_pte>
c0106e7a:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106e7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106e80:	8b 00                	mov    (%eax),%eax
c0106e82:	83 e0 01             	and    $0x1,%eax
c0106e85:	85 c0                	test   %eax,%eax
c0106e87:	75 24                	jne    c0106ead <swap_out+0xaa>
c0106e89:	c7 44 24 0c 11 eb 10 	movl   $0xc010eb11,0xc(%esp)
c0106e90:	c0 
c0106e91:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0106e98:	c0 
c0106e99:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106ea0:	00 
c0106ea1:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0106ea8:	e8 2d 9f ff ff       	call   c0100dda <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106ead:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106eb0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106eb3:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106eb6:	c1 ea 0c             	shr    $0xc,%edx
c0106eb9:	83 c2 01             	add    $0x1,%edx
c0106ebc:	c1 e2 08             	shl    $0x8,%edx
c0106ebf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106ec3:	89 14 24             	mov    %edx,(%esp)
c0106ec6:	e8 11 33 00 00       	call   c010a1dc <swapfs_write>
c0106ecb:	85 c0                	test   %eax,%eax
c0106ecd:	74 34                	je     c0106f03 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0106ecf:	c7 04 24 3b eb 10 c0 	movl   $0xc010eb3b,(%esp)
c0106ed6:	e8 7d 94 ff ff       	call   c0100358 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0106edb:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106ee0:	8b 40 10             	mov    0x10(%eax),%eax
c0106ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106ee6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106eed:	00 
c0106eee:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106ef2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106ef5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ef9:	8b 55 08             	mov    0x8(%ebp),%edx
c0106efc:	89 14 24             	mov    %edx,(%esp)
c0106eff:	ff d0                	call   *%eax
c0106f01:	eb 68                	jmp    c0106f6b <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0106f03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f06:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f09:	c1 e8 0c             	shr    $0xc,%eax
c0106f0c:	83 c0 01             	add    $0x1,%eax
c0106f0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106f13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106f16:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f21:	c7 04 24 54 eb 10 c0 	movl   $0xc010eb54,(%esp)
c0106f28:	e8 2b 94 ff ff       	call   c0100358 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0106f2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f30:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f33:	c1 e8 0c             	shr    $0xc,%eax
c0106f36:	83 c0 01             	add    $0x1,%eax
c0106f39:	c1 e0 08             	shl    $0x8,%eax
c0106f3c:	89 c2                	mov    %eax,%edx
c0106f3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106f41:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0106f43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f46:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106f4d:	00 
c0106f4e:	89 04 24             	mov    %eax,(%esp)
c0106f51:	e8 24 e1 ff ff       	call   c010507a <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0106f56:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f59:	8b 40 0c             	mov    0xc(%eax),%eax
c0106f5c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106f5f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f63:	89 04 24             	mov    %eax,(%esp)
c0106f66:	e8 1f ef ff ff       	call   c0105e8a <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0106f6b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f72:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106f75:	0f 85 9a fe ff ff    	jne    c0106e15 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0106f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106f7e:	c9                   	leave  
c0106f7f:	c3                   	ret    

c0106f80 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0106f80:	55                   	push   %ebp
c0106f81:	89 e5                	mov    %esp,%ebp
c0106f83:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0106f86:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106f8d:	e8 7d e0 ff ff       	call   c010500f <alloc_pages>
c0106f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0106f95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106f99:	75 24                	jne    c0106fbf <swap_in+0x3f>
c0106f9b:	c7 44 24 0c 94 eb 10 	movl   $0xc010eb94,0xc(%esp)
c0106fa2:	c0 
c0106fa3:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0106faa:	c0 
c0106fab:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0106fb2:	00 
c0106fb3:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0106fba:	e8 1b 9e ff ff       	call   c0100dda <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0106fbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fc2:	8b 40 0c             	mov    0xc(%eax),%eax
c0106fc5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106fcc:	00 
c0106fcd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106fd0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fd4:	89 04 24             	mov    %eax,(%esp)
c0106fd7:	e8 9a e7 ff ff       	call   c0105776 <get_pte>
c0106fdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0106fdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106fe2:	8b 00                	mov    (%eax),%eax
c0106fe4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106fe7:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106feb:	89 04 24             	mov    %eax,(%esp)
c0106fee:	e8 77 31 00 00       	call   c010a16a <swapfs_read>
c0106ff3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106ff6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106ffa:	74 2a                	je     c0107026 <swap_in+0xa6>
     {
        assert(r!=0);
c0106ffc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107000:	75 24                	jne    c0107026 <swap_in+0xa6>
c0107002:	c7 44 24 0c a1 eb 10 	movl   $0xc010eba1,0xc(%esp)
c0107009:	c0 
c010700a:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0107011:	c0 
c0107012:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107019:	00 
c010701a:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107021:	e8 b4 9d ff ff       	call   c0100dda <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107026:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107029:	8b 00                	mov    (%eax),%eax
c010702b:	c1 e8 08             	shr    $0x8,%eax
c010702e:	89 c2                	mov    %eax,%edx
c0107030:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107033:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107037:	89 54 24 04          	mov    %edx,0x4(%esp)
c010703b:	c7 04 24 a8 eb 10 c0 	movl   $0xc010eba8,(%esp)
c0107042:	e8 11 93 ff ff       	call   c0100358 <cprintf>
     *ptr_result=result;
c0107047:	8b 45 10             	mov    0x10(%ebp),%eax
c010704a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010704d:	89 10                	mov    %edx,(%eax)
     return 0;
c010704f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107054:	c9                   	leave  
c0107055:	c3                   	ret    

c0107056 <check_content_set>:



static inline void
check_content_set(void)
{
c0107056:	55                   	push   %ebp
c0107057:	89 e5                	mov    %esp,%ebp
c0107059:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c010705c:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107061:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107064:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107069:	83 f8 01             	cmp    $0x1,%eax
c010706c:	74 24                	je     c0107092 <check_content_set+0x3c>
c010706e:	c7 44 24 0c e6 eb 10 	movl   $0xc010ebe6,0xc(%esp)
c0107075:	c0 
c0107076:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c010707d:	c0 
c010707e:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0107085:	00 
c0107086:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c010708d:	e8 48 9d ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0107092:	b8 10 10 00 00       	mov    $0x1010,%eax
c0107097:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010709a:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c010709f:	83 f8 01             	cmp    $0x1,%eax
c01070a2:	74 24                	je     c01070c8 <check_content_set+0x72>
c01070a4:	c7 44 24 0c e6 eb 10 	movl   $0xc010ebe6,0xc(%esp)
c01070ab:	c0 
c01070ac:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01070b3:	c0 
c01070b4:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01070bb:	00 
c01070bc:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c01070c3:	e8 12 9d ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01070c8:	b8 00 20 00 00       	mov    $0x2000,%eax
c01070cd:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01070d0:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01070d5:	83 f8 02             	cmp    $0x2,%eax
c01070d8:	74 24                	je     c01070fe <check_content_set+0xa8>
c01070da:	c7 44 24 0c f5 eb 10 	movl   $0xc010ebf5,0xc(%esp)
c01070e1:	c0 
c01070e2:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01070e9:	c0 
c01070ea:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01070f1:	00 
c01070f2:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c01070f9:	e8 dc 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01070fe:	b8 10 20 00 00       	mov    $0x2010,%eax
c0107103:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107106:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c010710b:	83 f8 02             	cmp    $0x2,%eax
c010710e:	74 24                	je     c0107134 <check_content_set+0xde>
c0107110:	c7 44 24 0c f5 eb 10 	movl   $0xc010ebf5,0xc(%esp)
c0107117:	c0 
c0107118:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c010711f:	c0 
c0107120:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107127:	00 
c0107128:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c010712f:	e8 a6 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0107134:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107139:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010713c:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107141:	83 f8 03             	cmp    $0x3,%eax
c0107144:	74 24                	je     c010716a <check_content_set+0x114>
c0107146:	c7 44 24 0c 04 ec 10 	movl   $0xc010ec04,0xc(%esp)
c010714d:	c0 
c010714e:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0107155:	c0 
c0107156:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010715d:	00 
c010715e:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107165:	e8 70 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c010716a:	b8 10 30 00 00       	mov    $0x3010,%eax
c010716f:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107172:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107177:	83 f8 03             	cmp    $0x3,%eax
c010717a:	74 24                	je     c01071a0 <check_content_set+0x14a>
c010717c:	c7 44 24 0c 04 ec 10 	movl   $0xc010ec04,0xc(%esp)
c0107183:	c0 
c0107184:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c010718b:	c0 
c010718c:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0107193:	00 
c0107194:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c010719b:	e8 3a 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01071a0:	b8 00 40 00 00       	mov    $0x4000,%eax
c01071a5:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01071a8:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01071ad:	83 f8 04             	cmp    $0x4,%eax
c01071b0:	74 24                	je     c01071d6 <check_content_set+0x180>
c01071b2:	c7 44 24 0c 13 ec 10 	movl   $0xc010ec13,0xc(%esp)
c01071b9:	c0 
c01071ba:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01071c1:	c0 
c01071c2:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c01071c9:	00 
c01071ca:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c01071d1:	e8 04 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01071d6:	b8 10 40 00 00       	mov    $0x4010,%eax
c01071db:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01071de:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01071e3:	83 f8 04             	cmp    $0x4,%eax
c01071e6:	74 24                	je     c010720c <check_content_set+0x1b6>
c01071e8:	c7 44 24 0c 13 ec 10 	movl   $0xc010ec13,0xc(%esp)
c01071ef:	c0 
c01071f0:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01071f7:	c0 
c01071f8:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01071ff:	00 
c0107200:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107207:	e8 ce 9b ff ff       	call   c0100dda <__panic>
}
c010720c:	c9                   	leave  
c010720d:	c3                   	ret    

c010720e <check_content_access>:

static inline int
check_content_access(void)
{
c010720e:	55                   	push   %ebp
c010720f:	89 e5                	mov    %esp,%ebp
c0107211:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0107214:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0107219:	8b 40 1c             	mov    0x1c(%eax),%eax
c010721c:	ff d0                	call   *%eax
c010721e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0107221:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107224:	c9                   	leave  
c0107225:	c3                   	ret    

c0107226 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107226:	55                   	push   %ebp
c0107227:	89 e5                	mov    %esp,%ebp
c0107229:	53                   	push   %ebx
c010722a:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c010722d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107234:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c010723b:	c7 45 e8 dc 54 1c c0 	movl   $0xc01c54dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107242:	eb 6b                	jmp    c01072af <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0107244:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107247:	83 e8 0c             	sub    $0xc,%eax
c010724a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010724d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107250:	83 c0 04             	add    $0x4,%eax
c0107253:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c010725a:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010725d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107260:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107263:	0f a3 10             	bt     %edx,(%eax)
c0107266:	19 c0                	sbb    %eax,%eax
c0107268:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c010726b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010726f:	0f 95 c0             	setne  %al
c0107272:	0f b6 c0             	movzbl %al,%eax
c0107275:	85 c0                	test   %eax,%eax
c0107277:	75 24                	jne    c010729d <check_swap+0x77>
c0107279:	c7 44 24 0c 22 ec 10 	movl   $0xc010ec22,0xc(%esp)
c0107280:	c0 
c0107281:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0107288:	c0 
c0107289:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0107290:	00 
c0107291:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107298:	e8 3d 9b ff ff       	call   c0100dda <__panic>
        count ++, total += p->property;
c010729d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01072a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01072a4:	8b 50 08             	mov    0x8(%eax),%edx
c01072a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01072aa:	01 d0                	add    %edx,%eax
c01072ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01072af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01072b2:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01072b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01072b8:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01072bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01072be:	81 7d e8 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x18(%ebp)
c01072c5:	0f 85 79 ff ff ff    	jne    c0107244 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01072cb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01072ce:	e8 d9 dd ff ff       	call   c01050ac <nr_free_pages>
c01072d3:	39 c3                	cmp    %eax,%ebx
c01072d5:	74 24                	je     c01072fb <check_swap+0xd5>
c01072d7:	c7 44 24 0c 32 ec 10 	movl   $0xc010ec32,0xc(%esp)
c01072de:	c0 
c01072df:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01072e6:	c0 
c01072e7:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01072ee:	00 
c01072ef:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c01072f6:	e8 df 9a ff ff       	call   c0100dda <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01072fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01072fe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107302:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107305:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107309:	c7 04 24 4c ec 10 c0 	movl   $0xc010ec4c,(%esp)
c0107310:	e8 43 90 ff ff       	call   c0100358 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107315:	e8 44 0a 00 00       	call   c0107d5e <mm_create>
c010731a:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c010731d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107321:	75 24                	jne    c0107347 <check_swap+0x121>
c0107323:	c7 44 24 0c 72 ec 10 	movl   $0xc010ec72,0xc(%esp)
c010732a:	c0 
c010732b:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0107332:	c0 
c0107333:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c010733a:	00 
c010733b:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107342:	e8 93 9a ff ff       	call   c0100dda <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107347:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c010734c:	85 c0                	test   %eax,%eax
c010734e:	74 24                	je     c0107374 <check_swap+0x14e>
c0107350:	c7 44 24 0c 7d ec 10 	movl   $0xc010ec7d,0xc(%esp)
c0107357:	c0 
c0107358:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c010735f:	c0 
c0107360:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107367:	00 
c0107368:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c010736f:	e8 66 9a ff ff       	call   c0100dda <__panic>

     check_mm_struct = mm;
c0107374:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107377:	a3 cc 55 1c c0       	mov    %eax,0xc01c55cc

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c010737c:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
c0107382:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107385:	89 50 0c             	mov    %edx,0xc(%eax)
c0107388:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010738b:	8b 40 0c             	mov    0xc(%eax),%eax
c010738e:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c0107391:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107394:	8b 00                	mov    (%eax),%eax
c0107396:	85 c0                	test   %eax,%eax
c0107398:	74 24                	je     c01073be <check_swap+0x198>
c010739a:	c7 44 24 0c 95 ec 10 	movl   $0xc010ec95,0xc(%esp)
c01073a1:	c0 
c01073a2:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01073a9:	c0 
c01073aa:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01073b1:	00 
c01073b2:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c01073b9:	e8 1c 9a ff ff       	call   c0100dda <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01073be:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01073c5:	00 
c01073c6:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01073cd:	00 
c01073ce:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01073d5:	e8 29 0a 00 00       	call   c0107e03 <vma_create>
c01073da:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01073dd:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01073e1:	75 24                	jne    c0107407 <check_swap+0x1e1>
c01073e3:	c7 44 24 0c a3 ec 10 	movl   $0xc010eca3,0xc(%esp)
c01073ea:	c0 
c01073eb:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01073f2:	c0 
c01073f3:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c01073fa:	00 
c01073fb:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107402:	e8 d3 99 ff ff       	call   c0100dda <__panic>

     insert_vma_struct(mm, vma);
c0107407:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010740a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010740e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107411:	89 04 24             	mov    %eax,(%esp)
c0107414:	e8 7a 0b 00 00       	call   c0107f93 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107419:	c7 04 24 b0 ec 10 c0 	movl   $0xc010ecb0,(%esp)
c0107420:	e8 33 8f ff ff       	call   c0100358 <cprintf>
     pte_t *temp_ptep=NULL;
c0107425:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c010742c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010742f:	8b 40 0c             	mov    0xc(%eax),%eax
c0107432:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107439:	00 
c010743a:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107441:	00 
c0107442:	89 04 24             	mov    %eax,(%esp)
c0107445:	e8 2c e3 ff ff       	call   c0105776 <get_pte>
c010744a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010744d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0107451:	75 24                	jne    c0107477 <check_swap+0x251>
c0107453:	c7 44 24 0c e4 ec 10 	movl   $0xc010ece4,0xc(%esp)
c010745a:	c0 
c010745b:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0107462:	c0 
c0107463:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010746a:	00 
c010746b:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107472:	e8 63 99 ff ff       	call   c0100dda <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107477:	c7 04 24 f8 ec 10 c0 	movl   $0xc010ecf8,(%esp)
c010747e:	e8 d5 8e ff ff       	call   c0100358 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107483:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010748a:	e9 a3 00 00 00       	jmp    c0107532 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c010748f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107496:	e8 74 db ff ff       	call   c010500f <alloc_pages>
c010749b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010749e:	89 04 95 00 55 1c c0 	mov    %eax,-0x3fe3ab00(,%edx,4)
          assert(check_rp[i] != NULL );
c01074a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01074a8:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c01074af:	85 c0                	test   %eax,%eax
c01074b1:	75 24                	jne    c01074d7 <check_swap+0x2b1>
c01074b3:	c7 44 24 0c 1c ed 10 	movl   $0xc010ed1c,0xc(%esp)
c01074ba:	c0 
c01074bb:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01074c2:	c0 
c01074c3:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01074ca:	00 
c01074cb:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c01074d2:	e8 03 99 ff ff       	call   c0100dda <__panic>
          assert(!PageProperty(check_rp[i]));
c01074d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01074da:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c01074e1:	83 c0 04             	add    $0x4,%eax
c01074e4:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c01074eb:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01074ee:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01074f1:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01074f4:	0f a3 10             	bt     %edx,(%eax)
c01074f7:	19 c0                	sbb    %eax,%eax
c01074f9:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c01074fc:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0107500:	0f 95 c0             	setne  %al
c0107503:	0f b6 c0             	movzbl %al,%eax
c0107506:	85 c0                	test   %eax,%eax
c0107508:	74 24                	je     c010752e <check_swap+0x308>
c010750a:	c7 44 24 0c 30 ed 10 	movl   $0xc010ed30,0xc(%esp)
c0107511:	c0 
c0107512:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0107519:	c0 
c010751a:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0107521:	00 
c0107522:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107529:	e8 ac 98 ff ff       	call   c0100dda <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010752e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107532:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107536:	0f 8e 53 ff ff ff    	jle    c010748f <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c010753c:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
c0107541:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
c0107547:	89 45 98             	mov    %eax,-0x68(%ebp)
c010754a:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010754d:	c7 45 a8 dc 54 1c c0 	movl   $0xc01c54dc,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107554:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107557:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010755a:	89 50 04             	mov    %edx,0x4(%eax)
c010755d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107560:	8b 50 04             	mov    0x4(%eax),%edx
c0107563:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107566:	89 10                	mov    %edx,(%eax)
c0107568:	c7 45 a4 dc 54 1c c0 	movl   $0xc01c54dc,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010756f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107572:	8b 40 04             	mov    0x4(%eax),%eax
c0107575:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107578:	0f 94 c0             	sete   %al
c010757b:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c010757e:	85 c0                	test   %eax,%eax
c0107580:	75 24                	jne    c01075a6 <check_swap+0x380>
c0107582:	c7 44 24 0c 4b ed 10 	movl   $0xc010ed4b,0xc(%esp)
c0107589:	c0 
c010758a:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0107591:	c0 
c0107592:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0107599:	00 
c010759a:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c01075a1:	e8 34 98 ff ff       	call   c0100dda <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01075a6:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c01075ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01075ae:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c01075b5:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01075b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01075bf:	eb 1e                	jmp    c01075df <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c01075c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075c4:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c01075cb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01075d2:	00 
c01075d3:	89 04 24             	mov    %eax,(%esp)
c01075d6:	e8 9f da ff ff       	call   c010507a <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01075db:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01075df:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01075e3:	7e dc                	jle    c01075c1 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c01075e5:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c01075ea:	83 f8 04             	cmp    $0x4,%eax
c01075ed:	74 24                	je     c0107613 <check_swap+0x3ed>
c01075ef:	c7 44 24 0c 64 ed 10 	movl   $0xc010ed64,0xc(%esp)
c01075f6:	c0 
c01075f7:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01075fe:	c0 
c01075ff:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107606:	00 
c0107607:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c010760e:	e8 c7 97 ff ff       	call   c0100dda <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0107613:	c7 04 24 88 ed 10 c0 	movl   $0xc010ed88,(%esp)
c010761a:	e8 39 8d ff ff       	call   c0100358 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010761f:	c7 05 38 34 1c c0 00 	movl   $0x0,0xc01c3438
c0107626:	00 00 00 
     
     check_content_set();
c0107629:	e8 28 fa ff ff       	call   c0107056 <check_content_set>
     assert( nr_free == 0);         
c010762e:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0107633:	85 c0                	test   %eax,%eax
c0107635:	74 24                	je     c010765b <check_swap+0x435>
c0107637:	c7 44 24 0c af ed 10 	movl   $0xc010edaf,0xc(%esp)
c010763e:	c0 
c010763f:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0107646:	c0 
c0107647:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010764e:	00 
c010764f:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107656:	e8 7f 97 ff ff       	call   c0100dda <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010765b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107662:	eb 26                	jmp    c010768a <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0107664:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107667:	c7 04 85 20 55 1c c0 	movl   $0xffffffff,-0x3fe3aae0(,%eax,4)
c010766e:	ff ff ff ff 
c0107672:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107675:	8b 14 85 20 55 1c c0 	mov    -0x3fe3aae0(,%eax,4),%edx
c010767c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010767f:	89 14 85 60 55 1c c0 	mov    %edx,-0x3fe3aaa0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107686:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010768a:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c010768e:	7e d4                	jle    c0107664 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107690:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107697:	e9 eb 00 00 00       	jmp    c0107787 <check_swap+0x561>
         check_ptep[i]=0;
c010769c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010769f:	c7 04 85 b4 55 1c c0 	movl   $0x0,-0x3fe3aa4c(,%eax,4)
c01076a6:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c01076aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076ad:	83 c0 01             	add    $0x1,%eax
c01076b0:	c1 e0 0c             	shl    $0xc,%eax
c01076b3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01076ba:	00 
c01076bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01076bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01076c2:	89 04 24             	mov    %eax,(%esp)
c01076c5:	e8 ac e0 ff ff       	call   c0105776 <get_pte>
c01076ca:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01076cd:	89 04 95 b4 55 1c c0 	mov    %eax,-0x3fe3aa4c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c01076d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076d7:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
c01076de:	85 c0                	test   %eax,%eax
c01076e0:	75 24                	jne    c0107706 <check_swap+0x4e0>
c01076e2:	c7 44 24 0c bc ed 10 	movl   $0xc010edbc,0xc(%esp)
c01076e9:	c0 
c01076ea:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01076f1:	c0 
c01076f2:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c01076f9:	00 
c01076fa:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107701:	e8 d4 96 ff ff       	call   c0100dda <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107706:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107709:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
c0107710:	8b 00                	mov    (%eax),%eax
c0107712:	89 04 24             	mov    %eax,(%esp)
c0107715:	e8 9f f5 ff ff       	call   c0106cb9 <pte2page>
c010771a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010771d:	8b 14 95 00 55 1c c0 	mov    -0x3fe3ab00(,%edx,4),%edx
c0107724:	39 d0                	cmp    %edx,%eax
c0107726:	74 24                	je     c010774c <check_swap+0x526>
c0107728:	c7 44 24 0c d4 ed 10 	movl   $0xc010edd4,0xc(%esp)
c010772f:	c0 
c0107730:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c0107737:	c0 
c0107738:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010773f:	00 
c0107740:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c0107747:	e8 8e 96 ff ff       	call   c0100dda <__panic>
         assert((*check_ptep[i] & PTE_P));          
c010774c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010774f:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
c0107756:	8b 00                	mov    (%eax),%eax
c0107758:	83 e0 01             	and    $0x1,%eax
c010775b:	85 c0                	test   %eax,%eax
c010775d:	75 24                	jne    c0107783 <check_swap+0x55d>
c010775f:	c7 44 24 0c fc ed 10 	movl   $0xc010edfc,0xc(%esp)
c0107766:	c0 
c0107767:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c010776e:	c0 
c010776f:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107776:	00 
c0107777:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c010777e:	e8 57 96 ff ff       	call   c0100dda <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107783:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107787:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010778b:	0f 8e 0b ff ff ff    	jle    c010769c <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0107791:	c7 04 24 18 ee 10 c0 	movl   $0xc010ee18,(%esp)
c0107798:	e8 bb 8b ff ff       	call   c0100358 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c010779d:	e8 6c fa ff ff       	call   c010720e <check_content_access>
c01077a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c01077a5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01077a9:	74 24                	je     c01077cf <check_swap+0x5a9>
c01077ab:	c7 44 24 0c 3e ee 10 	movl   $0xc010ee3e,0xc(%esp)
c01077b2:	c0 
c01077b3:	c7 44 24 08 26 eb 10 	movl   $0xc010eb26,0x8(%esp)
c01077ba:	c0 
c01077bb:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01077c2:	00 
c01077c3:	c7 04 24 c0 ea 10 c0 	movl   $0xc010eac0,(%esp)
c01077ca:	e8 0b 96 ff ff       	call   c0100dda <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077cf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077d6:	eb 1e                	jmp    c01077f6 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c01077d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077db:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c01077e2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01077e9:	00 
c01077ea:	89 04 24             	mov    %eax,(%esp)
c01077ed:	e8 88 d8 ff ff       	call   c010507a <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077f2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01077f6:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01077fa:	7e dc                	jle    c01077d8 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pa2page(pgdir[0]));
c01077fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01077ff:	8b 00                	mov    (%eax),%eax
c0107801:	89 04 24             	mov    %eax,(%esp)
c0107804:	e8 6b f4 ff ff       	call   c0106c74 <pa2page>
c0107809:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107810:	00 
c0107811:	89 04 24             	mov    %eax,(%esp)
c0107814:	e8 61 d8 ff ff       	call   c010507a <free_pages>
     pgdir[0] = 0;
c0107819:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010781c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107822:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107825:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c010782c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010782f:	89 04 24             	mov    %eax,(%esp)
c0107832:	e8 8c 08 00 00       	call   c01080c3 <mm_destroy>
     check_mm_struct = NULL;
c0107837:	c7 05 cc 55 1c c0 00 	movl   $0x0,0xc01c55cc
c010783e:	00 00 00 
     
     nr_free = nr_free_store;
c0107841:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107844:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
     free_list = free_list_store;
c0107849:	8b 45 98             	mov    -0x68(%ebp),%eax
c010784c:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010784f:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
c0107854:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0

     
     le = &free_list;
c010785a:	c7 45 e8 dc 54 1c c0 	movl   $0xc01c54dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107861:	eb 1d                	jmp    c0107880 <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0107863:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107866:	83 e8 0c             	sub    $0xc,%eax
c0107869:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c010786c:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107870:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107873:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107876:	8b 40 08             	mov    0x8(%eax),%eax
c0107879:	29 c2                	sub    %eax,%edx
c010787b:	89 d0                	mov    %edx,%eax
c010787d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107880:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107883:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107886:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107889:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010788c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010788f:	81 7d e8 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x18(%ebp)
c0107896:	75 cb                	jne    c0107863 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107898:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010789b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010789f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01078a6:	c7 04 24 45 ee 10 c0 	movl   $0xc010ee45,(%esp)
c01078ad:	e8 a6 8a ff ff       	call   c0100358 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c01078b2:	c7 04 24 5f ee 10 c0 	movl   $0xc010ee5f,(%esp)
c01078b9:	e8 9a 8a ff ff       	call   c0100358 <cprintf>
}
c01078be:	83 c4 74             	add    $0x74,%esp
c01078c1:	5b                   	pop    %ebx
c01078c2:	5d                   	pop    %ebp
c01078c3:	c3                   	ret    

c01078c4 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01078c4:	55                   	push   %ebp
c01078c5:	89 e5                	mov    %esp,%ebp
c01078c7:	83 ec 10             	sub    $0x10,%esp
c01078ca:	c7 45 fc c4 55 1c c0 	movl   $0xc01c55c4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01078d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01078d4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01078d7:	89 50 04             	mov    %edx,0x4(%eax)
c01078da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01078dd:	8b 50 04             	mov    0x4(%eax),%edx
c01078e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01078e3:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01078e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01078e8:	c7 40 14 c4 55 1c c0 	movl   $0xc01c55c4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01078ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01078f4:	c9                   	leave  
c01078f5:	c3                   	ret    

c01078f6 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01078f6:	55                   	push   %ebp
c01078f7:	89 e5                	mov    %esp,%ebp
c01078f9:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01078fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01078ff:	8b 40 14             	mov    0x14(%eax),%eax
c0107902:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107905:	8b 45 10             	mov    0x10(%ebp),%eax
c0107908:	83 c0 14             	add    $0x14,%eax
c010790b:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c010790e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107912:	74 06                	je     c010791a <_fifo_map_swappable+0x24>
c0107914:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107918:	75 24                	jne    c010793e <_fifo_map_swappable+0x48>
c010791a:	c7 44 24 0c 78 ee 10 	movl   $0xc010ee78,0xc(%esp)
c0107921:	c0 
c0107922:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107929:	c0 
c010792a:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107931:	00 
c0107932:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107939:	e8 9c 94 ff ff       	call   c0100dda <__panic>
c010793e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107941:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107944:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107947:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010794a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010794d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107950:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107953:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107956:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107959:	8b 40 04             	mov    0x4(%eax),%eax
c010795c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010795f:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107962:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107965:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107968:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010796b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010796e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107971:	89 10                	mov    %edx,(%eax)
c0107973:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107976:	8b 10                	mov    (%eax),%edx
c0107978:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010797b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010797e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107981:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107984:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107987:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010798a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010798d:	89 10                	mov    %edx,(%eax)
    //record the page access situlation（情况）
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    // 在头部插入
    list_add(head, entry);				// 用list_add()和list_add_after()都行，查看下这个双向链表的操作函数（在list.h）就知道了。
    return 0;
c010798f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107994:	c9                   	leave  
c0107995:	c3                   	ret    

c0107996 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107996:	55                   	push   %ebp
c0107997:	89 e5                	mov    %esp,%ebp
c0107999:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c010799c:	8b 45 08             	mov    0x8(%ebp),%eax
c010799f:	8b 40 14             	mov    0x14(%eax),%eax
c01079a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c01079a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01079a9:	75 24                	jne    c01079cf <_fifo_swap_out_victim+0x39>
c01079ab:	c7 44 24 0c bf ee 10 	movl   $0xc010eebf,0xc(%esp)
c01079b2:	c0 
c01079b3:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c01079ba:	c0 
c01079bb:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c01079c2:	00 
c01079c3:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c01079ca:	e8 0b 94 ff ff       	call   c0100dda <__panic>
     assert(in_tick==0);
c01079cf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01079d3:	74 24                	je     c01079f9 <_fifo_swap_out_victim+0x63>
c01079d5:	c7 44 24 0c cc ee 10 	movl   $0xc010eecc,0xc(%esp)
c01079dc:	c0 
c01079dd:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c01079e4:	c0 
c01079e5:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c01079ec:	00 
c01079ed:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c01079f4:	e8 e1 93 ff ff       	call   c0100dda <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     // 尾部删除，因为是双向链表，所以很方便找到尾部
     // tail指向尾部
     list_entry_t *tail = head->prev;
c01079f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079fc:	8b 00                	mov    (%eax),%eax
c01079fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
     struct Page *page = le2page(tail, pra_page_link);
c0107a01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a04:	83 e8 14             	sub    $0x14,%eax
c0107a07:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a0d:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107a10:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a13:	8b 40 04             	mov    0x4(%eax),%eax
c0107a16:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107a19:	8b 12                	mov    (%edx),%edx
c0107a1b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107a1e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107a21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107a24:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107a27:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107a2a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107a2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107a30:	89 10                	mov    %edx,(%eax)
     list_del(tail);
     //(2)  set the addr of addr of this page to ptr_page
     *ptr_page = page;
c0107a32:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a35:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107a38:	89 10                	mov    %edx,(%eax)
     return 0;
c0107a3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a3f:	c9                   	leave  
c0107a40:	c3                   	ret    

c0107a41 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107a41:	55                   	push   %ebp
c0107a42:	89 e5                	mov    %esp,%ebp
c0107a44:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107a47:	c7 04 24 d8 ee 10 c0 	movl   $0xc010eed8,(%esp)
c0107a4e:	e8 05 89 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107a53:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107a58:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107a5b:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107a60:	83 f8 04             	cmp    $0x4,%eax
c0107a63:	74 24                	je     c0107a89 <_fifo_check_swap+0x48>
c0107a65:	c7 44 24 0c fe ee 10 	movl   $0xc010eefe,0xc(%esp)
c0107a6c:	c0 
c0107a6d:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107a74:	c0 
c0107a75:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0107a7c:	00 
c0107a7d:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107a84:	e8 51 93 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107a89:	c7 04 24 10 ef 10 c0 	movl   $0xc010ef10,(%esp)
c0107a90:	e8 c3 88 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107a95:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107a9a:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107a9d:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107aa2:	83 f8 04             	cmp    $0x4,%eax
c0107aa5:	74 24                	je     c0107acb <_fifo_check_swap+0x8a>
c0107aa7:	c7 44 24 0c fe ee 10 	movl   $0xc010eefe,0xc(%esp)
c0107aae:	c0 
c0107aaf:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107ab6:	c0 
c0107ab7:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0107abe:	00 
c0107abf:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107ac6:	e8 0f 93 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107acb:	c7 04 24 38 ef 10 c0 	movl   $0xc010ef38,(%esp)
c0107ad2:	e8 81 88 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107ad7:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107adc:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107adf:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107ae4:	83 f8 04             	cmp    $0x4,%eax
c0107ae7:	74 24                	je     c0107b0d <_fifo_check_swap+0xcc>
c0107ae9:	c7 44 24 0c fe ee 10 	movl   $0xc010eefe,0xc(%esp)
c0107af0:	c0 
c0107af1:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107af8:	c0 
c0107af9:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c0107b00:	00 
c0107b01:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107b08:	e8 cd 92 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107b0d:	c7 04 24 60 ef 10 c0 	movl   $0xc010ef60,(%esp)
c0107b14:	e8 3f 88 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107b19:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107b1e:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107b21:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107b26:	83 f8 04             	cmp    $0x4,%eax
c0107b29:	74 24                	je     c0107b4f <_fifo_check_swap+0x10e>
c0107b2b:	c7 44 24 0c fe ee 10 	movl   $0xc010eefe,0xc(%esp)
c0107b32:	c0 
c0107b33:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107b3a:	c0 
c0107b3b:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107b42:	00 
c0107b43:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107b4a:	e8 8b 92 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107b4f:	c7 04 24 88 ef 10 c0 	movl   $0xc010ef88,(%esp)
c0107b56:	e8 fd 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107b5b:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107b60:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107b63:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107b68:	83 f8 05             	cmp    $0x5,%eax
c0107b6b:	74 24                	je     c0107b91 <_fifo_check_swap+0x150>
c0107b6d:	c7 44 24 0c ae ef 10 	movl   $0xc010efae,0xc(%esp)
c0107b74:	c0 
c0107b75:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107b7c:	c0 
c0107b7d:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0107b84:	00 
c0107b85:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107b8c:	e8 49 92 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107b91:	c7 04 24 60 ef 10 c0 	movl   $0xc010ef60,(%esp)
c0107b98:	e8 bb 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107b9d:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107ba2:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107ba5:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107baa:	83 f8 05             	cmp    $0x5,%eax
c0107bad:	74 24                	je     c0107bd3 <_fifo_check_swap+0x192>
c0107baf:	c7 44 24 0c ae ef 10 	movl   $0xc010efae,0xc(%esp)
c0107bb6:	c0 
c0107bb7:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107bbe:	c0 
c0107bbf:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0107bc6:	00 
c0107bc7:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107bce:	e8 07 92 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107bd3:	c7 04 24 10 ef 10 c0 	movl   $0xc010ef10,(%esp)
c0107bda:	e8 79 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107bdf:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107be4:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107be7:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107bec:	83 f8 06             	cmp    $0x6,%eax
c0107bef:	74 24                	je     c0107c15 <_fifo_check_swap+0x1d4>
c0107bf1:	c7 44 24 0c bd ef 10 	movl   $0xc010efbd,0xc(%esp)
c0107bf8:	c0 
c0107bf9:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107c00:	c0 
c0107c01:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107c08:	00 
c0107c09:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107c10:	e8 c5 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107c15:	c7 04 24 60 ef 10 c0 	movl   $0xc010ef60,(%esp)
c0107c1c:	e8 37 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107c21:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107c26:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107c29:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107c2e:	83 f8 07             	cmp    $0x7,%eax
c0107c31:	74 24                	je     c0107c57 <_fifo_check_swap+0x216>
c0107c33:	c7 44 24 0c cc ef 10 	movl   $0xc010efcc,0xc(%esp)
c0107c3a:	c0 
c0107c3b:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107c42:	c0 
c0107c43:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0107c4a:	00 
c0107c4b:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107c52:	e8 83 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107c57:	c7 04 24 d8 ee 10 c0 	movl   $0xc010eed8,(%esp)
c0107c5e:	e8 f5 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107c63:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107c68:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107c6b:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107c70:	83 f8 08             	cmp    $0x8,%eax
c0107c73:	74 24                	je     c0107c99 <_fifo_check_swap+0x258>
c0107c75:	c7 44 24 0c db ef 10 	movl   $0xc010efdb,0xc(%esp)
c0107c7c:	c0 
c0107c7d:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107c84:	c0 
c0107c85:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107c8c:	00 
c0107c8d:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107c94:	e8 41 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107c99:	c7 04 24 38 ef 10 c0 	movl   $0xc010ef38,(%esp)
c0107ca0:	e8 b3 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107ca5:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107caa:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107cad:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107cb2:	83 f8 09             	cmp    $0x9,%eax
c0107cb5:	74 24                	je     c0107cdb <_fifo_check_swap+0x29a>
c0107cb7:	c7 44 24 0c ea ef 10 	movl   $0xc010efea,0xc(%esp)
c0107cbe:	c0 
c0107cbf:	c7 44 24 08 96 ee 10 	movl   $0xc010ee96,0x8(%esp)
c0107cc6:	c0 
c0107cc7:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0107cce:	00 
c0107ccf:	c7 04 24 ab ee 10 c0 	movl   $0xc010eeab,(%esp)
c0107cd6:	e8 ff 90 ff ff       	call   c0100dda <__panic>
    return 0;
c0107cdb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ce0:	c9                   	leave  
c0107ce1:	c3                   	ret    

c0107ce2 <_fifo_init>:


static int
_fifo_init(void)
{
c0107ce2:	55                   	push   %ebp
c0107ce3:	89 e5                	mov    %esp,%ebp
    return 0;
c0107ce5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107cea:	5d                   	pop    %ebp
c0107ceb:	c3                   	ret    

c0107cec <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107cec:	55                   	push   %ebp
c0107ced:	89 e5                	mov    %esp,%ebp
    return 0;
c0107cef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107cf4:	5d                   	pop    %ebp
c0107cf5:	c3                   	ret    

c0107cf6 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107cf6:	55                   	push   %ebp
c0107cf7:	89 e5                	mov    %esp,%ebp
c0107cf9:	b8 00 00 00 00       	mov    $0x0,%eax
c0107cfe:	5d                   	pop    %ebp
c0107cff:	c3                   	ret    

c0107d00 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0107d00:	55                   	push   %ebp
c0107d01:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107d03:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d06:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107d09:	5d                   	pop    %ebp
c0107d0a:	c3                   	ret    

c0107d0b <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107d0b:	55                   	push   %ebp
c0107d0c:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107d0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d11:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107d14:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107d17:	5d                   	pop    %ebp
c0107d18:	c3                   	ret    

c0107d19 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107d19:	55                   	push   %ebp
c0107d1a:	89 e5                	mov    %esp,%ebp
c0107d1c:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107d1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d22:	c1 e8 0c             	shr    $0xc,%eax
c0107d25:	89 c2                	mov    %eax,%edx
c0107d27:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0107d2c:	39 c2                	cmp    %eax,%edx
c0107d2e:	72 1c                	jb     c0107d4c <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107d30:	c7 44 24 08 0c f0 10 	movl   $0xc010f00c,0x8(%esp)
c0107d37:	c0 
c0107d38:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107d3f:	00 
c0107d40:	c7 04 24 2b f0 10 c0 	movl   $0xc010f02b,(%esp)
c0107d47:	e8 8e 90 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0107d4c:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0107d51:	8b 55 08             	mov    0x8(%ebp),%edx
c0107d54:	c1 ea 0c             	shr    $0xc,%edx
c0107d57:	c1 e2 05             	shl    $0x5,%edx
c0107d5a:	01 d0                	add    %edx,%eax
}
c0107d5c:	c9                   	leave  
c0107d5d:	c3                   	ret    

c0107d5e <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107d5e:	55                   	push   %ebp
c0107d5f:	89 e5                	mov    %esp,%ebp
c0107d61:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107d64:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107d6b:	e8 2a ce ff ff       	call   c0104b9a <kmalloc>
c0107d70:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107d73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d77:	0f 84 81 00 00 00    	je     c0107dfe <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d80:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107d83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d86:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107d89:	89 50 04             	mov    %edx,0x4(%eax)
c0107d8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d8f:	8b 50 04             	mov    0x4(%eax),%edx
c0107d92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d95:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107d97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d9a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107da1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107da4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107dae:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107db5:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c0107dba:	85 c0                	test   %eax,%eax
c0107dbc:	74 0d                	je     c0107dcb <mm_create+0x6d>
c0107dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107dc1:	89 04 24             	mov    %eax,(%esp)
c0107dc4:	e8 be ef ff ff       	call   c0106d87 <swap_init_mm>
c0107dc9:	eb 0a                	jmp    c0107dd5 <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107dcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107dce:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107dd5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107ddc:	00 
c0107ddd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107de0:	89 04 24             	mov    %eax,(%esp)
c0107de3:	e8 23 ff ff ff       	call   c0107d0b <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107de8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107deb:	83 c0 1c             	add    $0x1c,%eax
c0107dee:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107df5:	00 
c0107df6:	89 04 24             	mov    %eax,(%esp)
c0107df9:	e8 ec 1b 00 00       	call   c01099ea <sem_init>
    }    
    return mm;
c0107dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107e01:	c9                   	leave  
c0107e02:	c3                   	ret    

c0107e03 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107e03:	55                   	push   %ebp
c0107e04:	89 e5                	mov    %esp,%ebp
c0107e06:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107e09:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107e10:	e8 85 cd ff ff       	call   c0104b9a <kmalloc>
c0107e15:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107e18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107e1c:	74 1b                	je     c0107e39 <vma_create+0x36>
        vma->vm_start = vm_start;
c0107e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e21:	8b 55 08             	mov    0x8(%ebp),%edx
c0107e24:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0107e27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e2a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107e2d:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0107e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e33:	8b 55 10             	mov    0x10(%ebp),%edx
c0107e36:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0107e39:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107e3c:	c9                   	leave  
c0107e3d:	c3                   	ret    

c0107e3e <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0107e3e:	55                   	push   %ebp
c0107e3f:	89 e5                	mov    %esp,%ebp
c0107e41:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0107e44:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0107e4b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107e4f:	0f 84 95 00 00 00    	je     c0107eea <find_vma+0xac>
        vma = mm->mmap_cache;
c0107e55:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e58:	8b 40 08             	mov    0x8(%eax),%eax
c0107e5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0107e5e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107e62:	74 16                	je     c0107e7a <find_vma+0x3c>
c0107e64:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e67:	8b 40 04             	mov    0x4(%eax),%eax
c0107e6a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107e6d:	77 0b                	ja     c0107e7a <find_vma+0x3c>
c0107e6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e72:	8b 40 08             	mov    0x8(%eax),%eax
c0107e75:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107e78:	77 61                	ja     c0107edb <find_vma+0x9d>
                bool found = 0;
c0107e7a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0107e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0107e8d:	eb 28                	jmp    c0107eb7 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0107e8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e92:	83 e8 10             	sub    $0x10,%eax
c0107e95:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0107e98:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107e9b:	8b 40 04             	mov    0x4(%eax),%eax
c0107e9e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107ea1:	77 14                	ja     c0107eb7 <find_vma+0x79>
c0107ea3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107ea6:	8b 40 08             	mov    0x8(%eax),%eax
c0107ea9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107eac:	76 09                	jbe    c0107eb7 <find_vma+0x79>
                        found = 1;
c0107eae:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0107eb5:	eb 17                	jmp    c0107ece <find_vma+0x90>
c0107eb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107eba:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107ebd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ec0:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0107ec3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107ec6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ec9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107ecc:	75 c1                	jne    c0107e8f <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0107ece:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0107ed2:	75 07                	jne    c0107edb <find_vma+0x9d>
                    vma = NULL;
c0107ed4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0107edb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107edf:	74 09                	je     c0107eea <find_vma+0xac>
            mm->mmap_cache = vma;
c0107ee1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ee4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107ee7:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0107eea:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0107eed:	c9                   	leave  
c0107eee:	c3                   	ret    

c0107eef <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0107eef:	55                   	push   %ebp
c0107ef0:	89 e5                	mov    %esp,%ebp
c0107ef2:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0107ef5:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ef8:	8b 50 04             	mov    0x4(%eax),%edx
c0107efb:	8b 45 08             	mov    0x8(%ebp),%eax
c0107efe:	8b 40 08             	mov    0x8(%eax),%eax
c0107f01:	39 c2                	cmp    %eax,%edx
c0107f03:	72 24                	jb     c0107f29 <check_vma_overlap+0x3a>
c0107f05:	c7 44 24 0c 39 f0 10 	movl   $0xc010f039,0xc(%esp)
c0107f0c:	c0 
c0107f0d:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0107f14:	c0 
c0107f15:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0107f1c:	00 
c0107f1d:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0107f24:	e8 b1 8e ff ff       	call   c0100dda <__panic>
    assert(prev->vm_end <= next->vm_start);
c0107f29:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f2c:	8b 50 08             	mov    0x8(%eax),%edx
c0107f2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f32:	8b 40 04             	mov    0x4(%eax),%eax
c0107f35:	39 c2                	cmp    %eax,%edx
c0107f37:	76 24                	jbe    c0107f5d <check_vma_overlap+0x6e>
c0107f39:	c7 44 24 0c 7c f0 10 	movl   $0xc010f07c,0xc(%esp)
c0107f40:	c0 
c0107f41:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0107f48:	c0 
c0107f49:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107f50:	00 
c0107f51:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0107f58:	e8 7d 8e ff ff       	call   c0100dda <__panic>
    assert(next->vm_start < next->vm_end);
c0107f5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f60:	8b 50 04             	mov    0x4(%eax),%edx
c0107f63:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f66:	8b 40 08             	mov    0x8(%eax),%eax
c0107f69:	39 c2                	cmp    %eax,%edx
c0107f6b:	72 24                	jb     c0107f91 <check_vma_overlap+0xa2>
c0107f6d:	c7 44 24 0c 9b f0 10 	movl   $0xc010f09b,0xc(%esp)
c0107f74:	c0 
c0107f75:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0107f7c:	c0 
c0107f7d:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107f84:	00 
c0107f85:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0107f8c:	e8 49 8e ff ff       	call   c0100dda <__panic>
}
c0107f91:	c9                   	leave  
c0107f92:	c3                   	ret    

c0107f93 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0107f93:	55                   	push   %ebp
c0107f94:	89 e5                	mov    %esp,%ebp
c0107f96:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0107f99:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f9c:	8b 50 04             	mov    0x4(%eax),%edx
c0107f9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107fa2:	8b 40 08             	mov    0x8(%eax),%eax
c0107fa5:	39 c2                	cmp    %eax,%edx
c0107fa7:	72 24                	jb     c0107fcd <insert_vma_struct+0x3a>
c0107fa9:	c7 44 24 0c b9 f0 10 	movl   $0xc010f0b9,0xc(%esp)
c0107fb0:	c0 
c0107fb1:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0107fb8:	c0 
c0107fb9:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0107fc0:	00 
c0107fc1:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0107fc8:	e8 0d 8e ff ff       	call   c0100dda <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0107fcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fd0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0107fd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107fd6:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0107fd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107fdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0107fdf:	eb 21                	jmp    c0108002 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0107fe1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fe4:	83 e8 10             	sub    $0x10,%eax
c0107fe7:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0107fea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107fed:	8b 50 04             	mov    0x4(%eax),%edx
c0107ff0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ff3:	8b 40 04             	mov    0x4(%eax),%eax
c0107ff6:	39 c2                	cmp    %eax,%edx
c0107ff8:	76 02                	jbe    c0107ffc <insert_vma_struct+0x69>
                break;
c0107ffa:	eb 1d                	jmp    c0108019 <insert_vma_struct+0x86>
            }
            le_prev = le;
c0107ffc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108002:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108005:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108008:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010800b:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010800e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108011:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108014:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108017:	75 c8                	jne    c0107fe1 <insert_vma_struct+0x4e>
c0108019:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010801c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010801f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108022:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108025:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108028:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010802b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010802e:	74 15                	je     c0108045 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0108030:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108033:	8d 50 f0             	lea    -0x10(%eax),%edx
c0108036:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108039:	89 44 24 04          	mov    %eax,0x4(%esp)
c010803d:	89 14 24             	mov    %edx,(%esp)
c0108040:	e8 aa fe ff ff       	call   c0107eef <check_vma_overlap>
    }
    if (le_next != list) {
c0108045:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108048:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010804b:	74 15                	je     c0108062 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c010804d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108050:	83 e8 10             	sub    $0x10,%eax
c0108053:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108057:	8b 45 0c             	mov    0xc(%ebp),%eax
c010805a:	89 04 24             	mov    %eax,(%esp)
c010805d:	e8 8d fe ff ff       	call   c0107eef <check_vma_overlap>
    }

    vma->vm_mm = mm;
c0108062:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108065:	8b 55 08             	mov    0x8(%ebp),%edx
c0108068:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c010806a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010806d:	8d 50 10             	lea    0x10(%eax),%edx
c0108070:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108073:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108076:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0108079:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010807c:	8b 40 04             	mov    0x4(%eax),%eax
c010807f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108082:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0108085:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108088:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010808b:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010808e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108091:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0108094:	89 10                	mov    %edx,(%eax)
c0108096:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108099:	8b 10                	mov    (%eax),%edx
c010809b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010809e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01080a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01080a4:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01080a7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01080aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01080ad:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01080b0:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01080b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01080b5:	8b 40 10             	mov    0x10(%eax),%eax
c01080b8:	8d 50 01             	lea    0x1(%eax),%edx
c01080bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01080be:	89 50 10             	mov    %edx,0x10(%eax)
}
c01080c1:	c9                   	leave  
c01080c2:	c3                   	ret    

c01080c3 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01080c3:	55                   	push   %ebp
c01080c4:	89 e5                	mov    %esp,%ebp
c01080c6:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01080c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01080cc:	89 04 24             	mov    %eax,(%esp)
c01080cf:	e8 2c fc ff ff       	call   c0107d00 <mm_count>
c01080d4:	85 c0                	test   %eax,%eax
c01080d6:	74 24                	je     c01080fc <mm_destroy+0x39>
c01080d8:	c7 44 24 0c d5 f0 10 	movl   $0xc010f0d5,0xc(%esp)
c01080df:	c0 
c01080e0:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01080e7:	c0 
c01080e8:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01080ef:	00 
c01080f0:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01080f7:	e8 de 8c ff ff       	call   c0100dda <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01080fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01080ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108102:	eb 36                	jmp    c010813a <mm_destroy+0x77>
c0108104:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108107:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010810a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010810d:	8b 40 04             	mov    0x4(%eax),%eax
c0108110:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108113:	8b 12                	mov    (%edx),%edx
c0108115:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108118:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010811b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010811e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108121:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108124:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108127:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010812a:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c010812c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010812f:	83 e8 10             	sub    $0x10,%eax
c0108132:	89 04 24             	mov    %eax,(%esp)
c0108135:	e8 7b ca ff ff       	call   c0104bb5 <kfree>
c010813a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010813d:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108140:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108143:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0108146:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108149:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010814c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010814f:	75 b3                	jne    c0108104 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0108151:	8b 45 08             	mov    0x8(%ebp),%eax
c0108154:	89 04 24             	mov    %eax,(%esp)
c0108157:	e8 59 ca ff ff       	call   c0104bb5 <kfree>
    mm=NULL;
c010815c:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0108163:	c9                   	leave  
c0108164:	c3                   	ret    

c0108165 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0108165:	55                   	push   %ebp
c0108166:	89 e5                	mov    %esp,%ebp
c0108168:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c010816b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010816e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108171:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108174:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108179:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010817c:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0108183:	8b 45 10             	mov    0x10(%ebp),%eax
c0108186:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108189:	01 c2                	add    %eax,%edx
c010818b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010818e:	01 d0                	add    %edx,%eax
c0108190:	83 e8 01             	sub    $0x1,%eax
c0108193:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108196:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108199:	ba 00 00 00 00       	mov    $0x0,%edx
c010819e:	f7 75 e8             	divl   -0x18(%ebp)
c01081a1:	89 d0                	mov    %edx,%eax
c01081a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01081a6:	29 c2                	sub    %eax,%edx
c01081a8:	89 d0                	mov    %edx,%eax
c01081aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01081ad:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01081b4:	76 11                	jbe    c01081c7 <mm_map+0x62>
c01081b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081b9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01081bc:	73 09                	jae    c01081c7 <mm_map+0x62>
c01081be:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01081c5:	76 0a                	jbe    c01081d1 <mm_map+0x6c>
        return -E_INVAL;
c01081c7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01081cc:	e9 ae 00 00 00       	jmp    c010827f <mm_map+0x11a>
    }

    assert(mm != NULL);
c01081d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01081d5:	75 24                	jne    c01081fb <mm_map+0x96>
c01081d7:	c7 44 24 0c e7 f0 10 	movl   $0xc010f0e7,0xc(%esp)
c01081de:	c0 
c01081df:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01081e6:	c0 
c01081e7:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01081ee:	00 
c01081ef:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01081f6:	e8 df 8b ff ff       	call   c0100dda <__panic>

    int ret = -E_INVAL;
c01081fb:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108202:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108205:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108209:	8b 45 08             	mov    0x8(%ebp),%eax
c010820c:	89 04 24             	mov    %eax,(%esp)
c010820f:	e8 2a fc ff ff       	call   c0107e3e <find_vma>
c0108214:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108217:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010821b:	74 0d                	je     c010822a <mm_map+0xc5>
c010821d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108220:	8b 40 04             	mov    0x4(%eax),%eax
c0108223:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108226:	73 02                	jae    c010822a <mm_map+0xc5>
        goto out;
c0108228:	eb 52                	jmp    c010827c <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c010822a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0108231:	8b 45 14             	mov    0x14(%ebp),%eax
c0108234:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108238:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010823b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010823f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108242:	89 04 24             	mov    %eax,(%esp)
c0108245:	e8 b9 fb ff ff       	call   c0107e03 <vma_create>
c010824a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010824d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108251:	75 02                	jne    c0108255 <mm_map+0xf0>
        goto out;
c0108253:	eb 27                	jmp    c010827c <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c0108255:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108258:	89 44 24 04          	mov    %eax,0x4(%esp)
c010825c:	8b 45 08             	mov    0x8(%ebp),%eax
c010825f:	89 04 24             	mov    %eax,(%esp)
c0108262:	e8 2c fd ff ff       	call   c0107f93 <insert_vma_struct>
    if (vma_store != NULL) {
c0108267:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010826b:	74 08                	je     c0108275 <mm_map+0x110>
        *vma_store = vma;
c010826d:	8b 45 18             	mov    0x18(%ebp),%eax
c0108270:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108273:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0108275:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c010827c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010827f:	c9                   	leave  
c0108280:	c3                   	ret    

c0108281 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0108281:	55                   	push   %ebp
c0108282:	89 e5                	mov    %esp,%ebp
c0108284:	56                   	push   %esi
c0108285:	53                   	push   %ebx
c0108286:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c0108289:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010828d:	74 06                	je     c0108295 <dup_mmap+0x14>
c010828f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108293:	75 24                	jne    c01082b9 <dup_mmap+0x38>
c0108295:	c7 44 24 0c f2 f0 10 	movl   $0xc010f0f2,0xc(%esp)
c010829c:	c0 
c010829d:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01082a4:	c0 
c01082a5:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01082ac:	00 
c01082ad:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01082b4:	e8 21 8b ff ff       	call   c0100dda <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01082b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01082c5:	e9 92 00 00 00       	jmp    c010835c <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01082ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082cd:	83 e8 10             	sub    $0x10,%eax
c01082d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01082d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082d6:	8b 48 0c             	mov    0xc(%eax),%ecx
c01082d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082dc:	8b 50 08             	mov    0x8(%eax),%edx
c01082df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082e2:	8b 40 04             	mov    0x4(%eax),%eax
c01082e5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01082e9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01082ed:	89 04 24             	mov    %eax,(%esp)
c01082f0:	e8 0e fb ff ff       	call   c0107e03 <vma_create>
c01082f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01082f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01082fc:	75 07                	jne    c0108305 <dup_mmap+0x84>
            return -E_NO_MEM;
c01082fe:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108303:	eb 76                	jmp    c010837b <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108305:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108308:	89 44 24 04          	mov    %eax,0x4(%esp)
c010830c:	8b 45 08             	mov    0x8(%ebp),%eax
c010830f:	89 04 24             	mov    %eax,(%esp)
c0108312:	e8 7c fc ff ff       	call   c0107f93 <insert_vma_struct>

        bool share = 0;
c0108317:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010831e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108321:	8b 58 08             	mov    0x8(%eax),%ebx
c0108324:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108327:	8b 48 04             	mov    0x4(%eax),%ecx
c010832a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010832d:	8b 50 0c             	mov    0xc(%eax),%edx
c0108330:	8b 45 08             	mov    0x8(%ebp),%eax
c0108333:	8b 40 0c             	mov    0xc(%eax),%eax
c0108336:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0108339:	89 74 24 10          	mov    %esi,0x10(%esp)
c010833d:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108341:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108345:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108349:	89 04 24             	mov    %eax,(%esp)
c010834c:	e8 19 d8 ff ff       	call   c0105b6a <copy_range>
c0108351:	85 c0                	test   %eax,%eax
c0108353:	74 07                	je     c010835c <dup_mmap+0xdb>
            return -E_NO_MEM;
c0108355:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010835a:	eb 1f                	jmp    c010837b <dup_mmap+0xfa>
c010835c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010835f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0108362:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108365:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0108367:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010836a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010836d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108370:	0f 85 54 ff ff ff    	jne    c01082ca <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0108376:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010837b:	83 c4 40             	add    $0x40,%esp
c010837e:	5b                   	pop    %ebx
c010837f:	5e                   	pop    %esi
c0108380:	5d                   	pop    %ebp
c0108381:	c3                   	ret    

c0108382 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0108382:	55                   	push   %ebp
c0108383:	89 e5                	mov    %esp,%ebp
c0108385:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0108388:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010838c:	74 0f                	je     c010839d <exit_mmap+0x1b>
c010838e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108391:	89 04 24             	mov    %eax,(%esp)
c0108394:	e8 67 f9 ff ff       	call   c0107d00 <mm_count>
c0108399:	85 c0                	test   %eax,%eax
c010839b:	74 24                	je     c01083c1 <exit_mmap+0x3f>
c010839d:	c7 44 24 0c 10 f1 10 	movl   $0xc010f110,0xc(%esp)
c01083a4:	c0 
c01083a5:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01083ac:	c0 
c01083ad:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01083b4:	00 
c01083b5:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01083bc:	e8 19 8a ff ff       	call   c0100dda <__panic>
    pde_t *pgdir = mm->pgdir;
c01083c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01083c4:	8b 40 0c             	mov    0xc(%eax),%eax
c01083c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01083ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01083cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01083d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01083d6:	eb 28                	jmp    c0108400 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01083d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083db:	83 e8 10             	sub    $0x10,%eax
c01083de:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c01083e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01083e4:	8b 50 08             	mov    0x8(%eax),%edx
c01083e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01083ea:	8b 40 04             	mov    0x4(%eax),%eax
c01083ed:	89 54 24 08          	mov    %edx,0x8(%esp)
c01083f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083f8:	89 04 24             	mov    %eax,(%esp)
c01083fb:	e8 6f d5 ff ff       	call   c010596f <unmap_range>
c0108400:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108403:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108406:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108409:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c010840c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010840f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108412:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108415:	75 c1                	jne    c01083d8 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108417:	eb 28                	jmp    c0108441 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0108419:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010841c:	83 e8 10             	sub    $0x10,%eax
c010841f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108422:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108425:	8b 50 08             	mov    0x8(%eax),%edx
c0108428:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010842b:	8b 40 04             	mov    0x4(%eax),%eax
c010842e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108432:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108436:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108439:	89 04 24             	mov    %eax,(%esp)
c010843c:	e8 22 d6 ff ff       	call   c0105a63 <exit_range>
c0108441:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108444:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108447:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010844a:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c010844d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108450:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108453:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108456:	75 c1                	jne    c0108419 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0108458:	c9                   	leave  
c0108459:	c3                   	ret    

c010845a <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c010845a:	55                   	push   %ebp
c010845b:	89 e5                	mov    %esp,%ebp
c010845d:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0108460:	8b 45 10             	mov    0x10(%ebp),%eax
c0108463:	8b 55 18             	mov    0x18(%ebp),%edx
c0108466:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010846a:	8b 55 14             	mov    0x14(%ebp),%edx
c010846d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108471:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108475:	8b 45 08             	mov    0x8(%ebp),%eax
c0108478:	89 04 24             	mov    %eax,(%esp)
c010847b:	e8 99 09 00 00       	call   c0108e19 <user_mem_check>
c0108480:	85 c0                	test   %eax,%eax
c0108482:	75 07                	jne    c010848b <copy_from_user+0x31>
        return 0;
c0108484:	b8 00 00 00 00       	mov    $0x0,%eax
c0108489:	eb 1e                	jmp    c01084a9 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c010848b:	8b 45 14             	mov    0x14(%ebp),%eax
c010848e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108492:	8b 45 10             	mov    0x10(%ebp),%eax
c0108495:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108499:	8b 45 0c             	mov    0xc(%ebp),%eax
c010849c:	89 04 24             	mov    %eax,(%esp)
c010849f:	e8 9f 50 00 00       	call   c010d543 <memcpy>
    return 1;
c01084a4:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01084a9:	c9                   	leave  
c01084aa:	c3                   	ret    

c01084ab <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c01084ab:	55                   	push   %ebp
c01084ac:	89 e5                	mov    %esp,%ebp
c01084ae:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c01084b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084b4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01084bb:	00 
c01084bc:	8b 55 14             	mov    0x14(%ebp),%edx
c01084bf:	89 54 24 08          	mov    %edx,0x8(%esp)
c01084c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01084ca:	89 04 24             	mov    %eax,(%esp)
c01084cd:	e8 47 09 00 00       	call   c0108e19 <user_mem_check>
c01084d2:	85 c0                	test   %eax,%eax
c01084d4:	75 07                	jne    c01084dd <copy_to_user+0x32>
        return 0;
c01084d6:	b8 00 00 00 00       	mov    $0x0,%eax
c01084db:	eb 1e                	jmp    c01084fb <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c01084dd:	8b 45 14             	mov    0x14(%ebp),%eax
c01084e0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01084e4:	8b 45 10             	mov    0x10(%ebp),%eax
c01084e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084ee:	89 04 24             	mov    %eax,(%esp)
c01084f1:	e8 4d 50 00 00       	call   c010d543 <memcpy>
    return 1;
c01084f6:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01084fb:	c9                   	leave  
c01084fc:	c3                   	ret    

c01084fd <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c01084fd:	55                   	push   %ebp
c01084fe:	89 e5                	mov    %esp,%ebp
c0108500:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108503:	e8 02 00 00 00       	call   c010850a <check_vmm>
}
c0108508:	c9                   	leave  
c0108509:	c3                   	ret    

c010850a <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c010850a:	55                   	push   %ebp
c010850b:	89 e5                	mov    %esp,%ebp
c010850d:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108510:	e8 97 cb ff ff       	call   c01050ac <nr_free_pages>
c0108515:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0108518:	e8 13 00 00 00       	call   c0108530 <check_vma_struct>
    check_pgfault();
c010851d:	e8 a7 04 00 00       	call   c01089c9 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0108522:	c7 04 24 30 f1 10 c0 	movl   $0xc010f130,(%esp)
c0108529:	e8 2a 7e ff ff       	call   c0100358 <cprintf>
}
c010852e:	c9                   	leave  
c010852f:	c3                   	ret    

c0108530 <check_vma_struct>:

static void
check_vma_struct(void) {
c0108530:	55                   	push   %ebp
c0108531:	89 e5                	mov    %esp,%ebp
c0108533:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108536:	e8 71 cb ff ff       	call   c01050ac <nr_free_pages>
c010853b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c010853e:	e8 1b f8 ff ff       	call   c0107d5e <mm_create>
c0108543:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0108546:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010854a:	75 24                	jne    c0108570 <check_vma_struct+0x40>
c010854c:	c7 44 24 0c e7 f0 10 	movl   $0xc010f0e7,0xc(%esp)
c0108553:	c0 
c0108554:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c010855b:	c0 
c010855c:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0108563:	00 
c0108564:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c010856b:	e8 6a 88 ff ff       	call   c0100dda <__panic>

    int step1 = 10, step2 = step1 * 10;
c0108570:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0108577:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010857a:	89 d0                	mov    %edx,%eax
c010857c:	c1 e0 02             	shl    $0x2,%eax
c010857f:	01 d0                	add    %edx,%eax
c0108581:	01 c0                	add    %eax,%eax
c0108583:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0108586:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108589:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010858c:	eb 70                	jmp    c01085fe <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c010858e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108591:	89 d0                	mov    %edx,%eax
c0108593:	c1 e0 02             	shl    $0x2,%eax
c0108596:	01 d0                	add    %edx,%eax
c0108598:	83 c0 02             	add    $0x2,%eax
c010859b:	89 c1                	mov    %eax,%ecx
c010859d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01085a0:	89 d0                	mov    %edx,%eax
c01085a2:	c1 e0 02             	shl    $0x2,%eax
c01085a5:	01 d0                	add    %edx,%eax
c01085a7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01085ae:	00 
c01085af:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01085b3:	89 04 24             	mov    %eax,(%esp)
c01085b6:	e8 48 f8 ff ff       	call   c0107e03 <vma_create>
c01085bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01085be:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01085c2:	75 24                	jne    c01085e8 <check_vma_struct+0xb8>
c01085c4:	c7 44 24 0c 48 f1 10 	movl   $0xc010f148,0xc(%esp)
c01085cb:	c0 
c01085cc:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01085d3:	c0 
c01085d4:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c01085db:	00 
c01085dc:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01085e3:	e8 f2 87 ff ff       	call   c0100dda <__panic>
        insert_vma_struct(mm, vma);
c01085e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01085eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085f2:	89 04 24             	mov    %eax,(%esp)
c01085f5:	e8 99 f9 ff ff       	call   c0107f93 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c01085fa:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01085fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108602:	7f 8a                	jg     c010858e <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108604:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108607:	83 c0 01             	add    $0x1,%eax
c010860a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010860d:	eb 70                	jmp    c010867f <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c010860f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108612:	89 d0                	mov    %edx,%eax
c0108614:	c1 e0 02             	shl    $0x2,%eax
c0108617:	01 d0                	add    %edx,%eax
c0108619:	83 c0 02             	add    $0x2,%eax
c010861c:	89 c1                	mov    %eax,%ecx
c010861e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108621:	89 d0                	mov    %edx,%eax
c0108623:	c1 e0 02             	shl    $0x2,%eax
c0108626:	01 d0                	add    %edx,%eax
c0108628:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010862f:	00 
c0108630:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108634:	89 04 24             	mov    %eax,(%esp)
c0108637:	e8 c7 f7 ff ff       	call   c0107e03 <vma_create>
c010863c:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c010863f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0108643:	75 24                	jne    c0108669 <check_vma_struct+0x139>
c0108645:	c7 44 24 0c 48 f1 10 	movl   $0xc010f148,0xc(%esp)
c010864c:	c0 
c010864d:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108654:	c0 
c0108655:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c010865c:	00 
c010865d:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108664:	e8 71 87 ff ff       	call   c0100dda <__panic>
        insert_vma_struct(mm, vma);
c0108669:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010866c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108670:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108673:	89 04 24             	mov    %eax,(%esp)
c0108676:	e8 18 f9 ff ff       	call   c0107f93 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c010867b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010867f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108682:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108685:	7e 88                	jle    c010860f <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0108687:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010868a:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010868d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108690:	8b 40 04             	mov    0x4(%eax),%eax
c0108693:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0108696:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010869d:	e9 97 00 00 00       	jmp    c0108739 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c01086a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01086a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01086a8:	75 24                	jne    c01086ce <check_vma_struct+0x19e>
c01086aa:	c7 44 24 0c 54 f1 10 	movl   $0xc010f154,0xc(%esp)
c01086b1:	c0 
c01086b2:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01086b9:	c0 
c01086ba:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c01086c1:	00 
c01086c2:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01086c9:	e8 0c 87 ff ff       	call   c0100dda <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01086ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086d1:	83 e8 10             	sub    $0x10,%eax
c01086d4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01086d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01086da:	8b 48 04             	mov    0x4(%eax),%ecx
c01086dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01086e0:	89 d0                	mov    %edx,%eax
c01086e2:	c1 e0 02             	shl    $0x2,%eax
c01086e5:	01 d0                	add    %edx,%eax
c01086e7:	39 c1                	cmp    %eax,%ecx
c01086e9:	75 17                	jne    c0108702 <check_vma_struct+0x1d2>
c01086eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01086ee:	8b 48 08             	mov    0x8(%eax),%ecx
c01086f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01086f4:	89 d0                	mov    %edx,%eax
c01086f6:	c1 e0 02             	shl    $0x2,%eax
c01086f9:	01 d0                	add    %edx,%eax
c01086fb:	83 c0 02             	add    $0x2,%eax
c01086fe:	39 c1                	cmp    %eax,%ecx
c0108700:	74 24                	je     c0108726 <check_vma_struct+0x1f6>
c0108702:	c7 44 24 0c 6c f1 10 	movl   $0xc010f16c,0xc(%esp)
c0108709:	c0 
c010870a:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108711:	c0 
c0108712:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108719:	00 
c010871a:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108721:	e8 b4 86 ff ff       	call   c0100dda <__panic>
c0108726:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108729:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010872c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010872f:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108732:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0108735:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108739:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010873c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010873f:	0f 8e 5d ff ff ff    	jle    c01086a2 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108745:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c010874c:	e9 cd 01 00 00       	jmp    c010891e <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108751:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108754:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108758:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010875b:	89 04 24             	mov    %eax,(%esp)
c010875e:	e8 db f6 ff ff       	call   c0107e3e <find_vma>
c0108763:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0108766:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010876a:	75 24                	jne    c0108790 <check_vma_struct+0x260>
c010876c:	c7 44 24 0c a1 f1 10 	movl   $0xc010f1a1,0xc(%esp)
c0108773:	c0 
c0108774:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c010877b:	c0 
c010877c:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0108783:	00 
c0108784:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c010878b:	e8 4a 86 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108790:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108793:	83 c0 01             	add    $0x1,%eax
c0108796:	89 44 24 04          	mov    %eax,0x4(%esp)
c010879a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010879d:	89 04 24             	mov    %eax,(%esp)
c01087a0:	e8 99 f6 ff ff       	call   c0107e3e <find_vma>
c01087a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c01087a8:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01087ac:	75 24                	jne    c01087d2 <check_vma_struct+0x2a2>
c01087ae:	c7 44 24 0c ae f1 10 	movl   $0xc010f1ae,0xc(%esp)
c01087b5:	c0 
c01087b6:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01087bd:	c0 
c01087be:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c01087c5:	00 
c01087c6:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01087cd:	e8 08 86 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c01087d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087d5:	83 c0 02             	add    $0x2,%eax
c01087d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087df:	89 04 24             	mov    %eax,(%esp)
c01087e2:	e8 57 f6 ff ff       	call   c0107e3e <find_vma>
c01087e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c01087ea:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01087ee:	74 24                	je     c0108814 <check_vma_struct+0x2e4>
c01087f0:	c7 44 24 0c bb f1 10 	movl   $0xc010f1bb,0xc(%esp)
c01087f7:	c0 
c01087f8:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01087ff:	c0 
c0108800:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108807:	00 
c0108808:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c010880f:	e8 c6 85 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108814:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108817:	83 c0 03             	add    $0x3,%eax
c010881a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010881e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108821:	89 04 24             	mov    %eax,(%esp)
c0108824:	e8 15 f6 ff ff       	call   c0107e3e <find_vma>
c0108829:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c010882c:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108830:	74 24                	je     c0108856 <check_vma_struct+0x326>
c0108832:	c7 44 24 0c c8 f1 10 	movl   $0xc010f1c8,0xc(%esp)
c0108839:	c0 
c010883a:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108841:	c0 
c0108842:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108849:	00 
c010884a:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108851:	e8 84 85 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108856:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108859:	83 c0 04             	add    $0x4,%eax
c010885c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108860:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108863:	89 04 24             	mov    %eax,(%esp)
c0108866:	e8 d3 f5 ff ff       	call   c0107e3e <find_vma>
c010886b:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c010886e:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108872:	74 24                	je     c0108898 <check_vma_struct+0x368>
c0108874:	c7 44 24 0c d5 f1 10 	movl   $0xc010f1d5,0xc(%esp)
c010887b:	c0 
c010887c:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108883:	c0 
c0108884:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c010888b:	00 
c010888c:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108893:	e8 42 85 ff ff       	call   c0100dda <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108898:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010889b:	8b 50 04             	mov    0x4(%eax),%edx
c010889e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088a1:	39 c2                	cmp    %eax,%edx
c01088a3:	75 10                	jne    c01088b5 <check_vma_struct+0x385>
c01088a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01088a8:	8b 50 08             	mov    0x8(%eax),%edx
c01088ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088ae:	83 c0 02             	add    $0x2,%eax
c01088b1:	39 c2                	cmp    %eax,%edx
c01088b3:	74 24                	je     c01088d9 <check_vma_struct+0x3a9>
c01088b5:	c7 44 24 0c e4 f1 10 	movl   $0xc010f1e4,0xc(%esp)
c01088bc:	c0 
c01088bd:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01088c4:	c0 
c01088c5:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c01088cc:	00 
c01088cd:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01088d4:	e8 01 85 ff ff       	call   c0100dda <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01088d9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01088dc:	8b 50 04             	mov    0x4(%eax),%edx
c01088df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088e2:	39 c2                	cmp    %eax,%edx
c01088e4:	75 10                	jne    c01088f6 <check_vma_struct+0x3c6>
c01088e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01088e9:	8b 50 08             	mov    0x8(%eax),%edx
c01088ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088ef:	83 c0 02             	add    $0x2,%eax
c01088f2:	39 c2                	cmp    %eax,%edx
c01088f4:	74 24                	je     c010891a <check_vma_struct+0x3ea>
c01088f6:	c7 44 24 0c 14 f2 10 	movl   $0xc010f214,0xc(%esp)
c01088fd:	c0 
c01088fe:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108905:	c0 
c0108906:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c010890d:	00 
c010890e:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108915:	e8 c0 84 ff ff       	call   c0100dda <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c010891a:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c010891e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108921:	89 d0                	mov    %edx,%eax
c0108923:	c1 e0 02             	shl    $0x2,%eax
c0108926:	01 d0                	add    %edx,%eax
c0108928:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010892b:	0f 8d 20 fe ff ff    	jge    c0108751 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108931:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108938:	eb 70                	jmp    c01089aa <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c010893a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010893d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108941:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108944:	89 04 24             	mov    %eax,(%esp)
c0108947:	e8 f2 f4 ff ff       	call   c0107e3e <find_vma>
c010894c:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c010894f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108953:	74 27                	je     c010897c <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108955:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108958:	8b 50 08             	mov    0x8(%eax),%edx
c010895b:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010895e:	8b 40 04             	mov    0x4(%eax),%eax
c0108961:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108965:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108969:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010896c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108970:	c7 04 24 44 f2 10 c0 	movl   $0xc010f244,(%esp)
c0108977:	e8 dc 79 ff ff       	call   c0100358 <cprintf>
        }
        assert(vma_below_5 == NULL);
c010897c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108980:	74 24                	je     c01089a6 <check_vma_struct+0x476>
c0108982:	c7 44 24 0c 69 f2 10 	movl   $0xc010f269,0xc(%esp)
c0108989:	c0 
c010898a:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108991:	c0 
c0108992:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108999:	00 
c010899a:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01089a1:	e8 34 84 ff ff       	call   c0100dda <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01089a6:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01089aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01089ae:	79 8a                	jns    c010893a <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c01089b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089b3:	89 04 24             	mov    %eax,(%esp)
c01089b6:	e8 08 f7 ff ff       	call   c01080c3 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c01089bb:	c7 04 24 80 f2 10 c0 	movl   $0xc010f280,(%esp)
c01089c2:	e8 91 79 ff ff       	call   c0100358 <cprintf>
}
c01089c7:	c9                   	leave  
c01089c8:	c3                   	ret    

c01089c9 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c01089c9:	55                   	push   %ebp
c01089ca:	89 e5                	mov    %esp,%ebp
c01089cc:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01089cf:	e8 d8 c6 ff ff       	call   c01050ac <nr_free_pages>
c01089d4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c01089d7:	e8 82 f3 ff ff       	call   c0107d5e <mm_create>
c01089dc:	a3 cc 55 1c c0       	mov    %eax,0xc01c55cc
    assert(check_mm_struct != NULL);
c01089e1:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c01089e6:	85 c0                	test   %eax,%eax
c01089e8:	75 24                	jne    c0108a0e <check_pgfault+0x45>
c01089ea:	c7 44 24 0c 9f f2 10 	movl   $0xc010f29f,0xc(%esp)
c01089f1:	c0 
c01089f2:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01089f9:	c0 
c01089fa:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108a01:	00 
c0108a02:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108a09:	e8 cc 83 ff ff       	call   c0100dda <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108a0e:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0108a13:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108a16:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
c0108a1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a1f:	89 50 0c             	mov    %edx,0xc(%eax)
c0108a22:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a25:	8b 40 0c             	mov    0xc(%eax),%eax
c0108a28:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108a2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108a2e:	8b 00                	mov    (%eax),%eax
c0108a30:	85 c0                	test   %eax,%eax
c0108a32:	74 24                	je     c0108a58 <check_pgfault+0x8f>
c0108a34:	c7 44 24 0c b7 f2 10 	movl   $0xc010f2b7,0xc(%esp)
c0108a3b:	c0 
c0108a3c:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108a43:	c0 
c0108a44:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108a4b:	00 
c0108a4c:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108a53:	e8 82 83 ff ff       	call   c0100dda <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108a58:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108a5f:	00 
c0108a60:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108a67:	00 
c0108a68:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108a6f:	e8 8f f3 ff ff       	call   c0107e03 <vma_create>
c0108a74:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108a77:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108a7b:	75 24                	jne    c0108aa1 <check_pgfault+0xd8>
c0108a7d:	c7 44 24 0c 48 f1 10 	movl   $0xc010f148,0xc(%esp)
c0108a84:	c0 
c0108a85:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108a8c:	c0 
c0108a8d:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108a94:	00 
c0108a95:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108a9c:	e8 39 83 ff ff       	call   c0100dda <__panic>

    insert_vma_struct(mm, vma);
c0108aa1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108aa4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108aa8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108aab:	89 04 24             	mov    %eax,(%esp)
c0108aae:	e8 e0 f4 ff ff       	call   c0107f93 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108ab3:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108aba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108abd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ac1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ac4:	89 04 24             	mov    %eax,(%esp)
c0108ac7:	e8 72 f3 ff ff       	call   c0107e3e <find_vma>
c0108acc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108acf:	74 24                	je     c0108af5 <check_pgfault+0x12c>
c0108ad1:	c7 44 24 0c c5 f2 10 	movl   $0xc010f2c5,0xc(%esp)
c0108ad8:	c0 
c0108ad9:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108ae0:	c0 
c0108ae1:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108ae8:	00 
c0108ae9:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108af0:	e8 e5 82 ff ff       	call   c0100dda <__panic>

    int i, sum = 0;
c0108af5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108afc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108b03:	eb 17                	jmp    c0108b1c <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108b05:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108b08:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108b0b:	01 d0                	add    %edx,%eax
c0108b0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108b10:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b15:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108b18:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108b1c:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108b20:	7e e3                	jle    c0108b05 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108b22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108b29:	eb 15                	jmp    c0108b40 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108b2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108b2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108b31:	01 d0                	add    %edx,%eax
c0108b33:	0f b6 00             	movzbl (%eax),%eax
c0108b36:	0f be c0             	movsbl %al,%eax
c0108b39:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108b3c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108b40:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108b44:	7e e5                	jle    c0108b2b <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108b46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108b4a:	74 24                	je     c0108b70 <check_pgfault+0x1a7>
c0108b4c:	c7 44 24 0c df f2 10 	movl   $0xc010f2df,0xc(%esp)
c0108b53:	c0 
c0108b54:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108b5b:	c0 
c0108b5c:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108b63:	00 
c0108b64:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108b6b:	e8 6a 82 ff ff       	call   c0100dda <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108b70:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108b73:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108b76:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108b79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108b7e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b85:	89 04 24             	mov    %eax,(%esp)
c0108b88:	e8 00 d2 ff ff       	call   c0105d8d <page_remove>
    free_page(pa2page(pgdir[0]));
c0108b8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b90:	8b 00                	mov    (%eax),%eax
c0108b92:	89 04 24             	mov    %eax,(%esp)
c0108b95:	e8 7f f1 ff ff       	call   c0107d19 <pa2page>
c0108b9a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108ba1:	00 
c0108ba2:	89 04 24             	mov    %eax,(%esp)
c0108ba5:	e8 d0 c4 ff ff       	call   c010507a <free_pages>
    pgdir[0] = 0;
c0108baa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108bad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108bb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bb6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108bbd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bc0:	89 04 24             	mov    %eax,(%esp)
c0108bc3:	e8 fb f4 ff ff       	call   c01080c3 <mm_destroy>
    check_mm_struct = NULL;
c0108bc8:	c7 05 cc 55 1c c0 00 	movl   $0x0,0xc01c55cc
c0108bcf:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108bd2:	e8 d5 c4 ff ff       	call   c01050ac <nr_free_pages>
c0108bd7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108bda:	74 24                	je     c0108c00 <check_pgfault+0x237>
c0108bdc:	c7 44 24 0c e8 f2 10 	movl   $0xc010f2e8,0xc(%esp)
c0108be3:	c0 
c0108be4:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0108beb:	c0 
c0108bec:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108bf3:	00 
c0108bf4:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0108bfb:	e8 da 81 ff ff       	call   c0100dda <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108c00:	c7 04 24 0f f3 10 c0 	movl   $0xc010f30f,(%esp)
c0108c07:	e8 4c 77 ff ff       	call   c0100358 <cprintf>
}
c0108c0c:	c9                   	leave  
c0108c0d:	c3                   	ret    

c0108c0e <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108c0e:	55                   	push   %ebp
c0108c0f:	89 e5                	mov    %esp,%ebp
c0108c11:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108c14:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108c1b:	8b 45 10             	mov    0x10(%ebp),%eax
c0108c1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c22:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c25:	89 04 24             	mov    %eax,(%esp)
c0108c28:	e8 11 f2 ff ff       	call   c0107e3e <find_vma>
c0108c2d:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108c30:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0108c35:	83 c0 01             	add    $0x1,%eax
c0108c38:	a3 38 34 1c c0       	mov    %eax,0xc01c3438
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108c3d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108c41:	74 0b                	je     c0108c4e <do_pgfault+0x40>
c0108c43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c46:	8b 40 04             	mov    0x4(%eax),%eax
c0108c49:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108c4c:	76 18                	jbe    c0108c66 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108c4e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108c51:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c55:	c7 04 24 2c f3 10 c0 	movl   $0xc010f32c,(%esp)
c0108c5c:	e8 f7 76 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108c61:	e9 ae 01 00 00       	jmp    c0108e14 <do_pgfault+0x206>
    }
    //check the error_code
    switch (error_code & 3) {
c0108c66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108c69:	83 e0 03             	and    $0x3,%eax
c0108c6c:	85 c0                	test   %eax,%eax
c0108c6e:	74 36                	je     c0108ca6 <do_pgfault+0x98>
c0108c70:	83 f8 01             	cmp    $0x1,%eax
c0108c73:	74 20                	je     c0108c95 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108c75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c78:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c7b:	83 e0 02             	and    $0x2,%eax
c0108c7e:	85 c0                	test   %eax,%eax
c0108c80:	75 11                	jne    c0108c93 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108c82:	c7 04 24 5c f3 10 c0 	movl   $0xc010f35c,(%esp)
c0108c89:	e8 ca 76 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108c8e:	e9 81 01 00 00       	jmp    c0108e14 <do_pgfault+0x206>
        }
        break;
c0108c93:	eb 2f                	jmp    c0108cc4 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108c95:	c7 04 24 bc f3 10 c0 	movl   $0xc010f3bc,(%esp)
c0108c9c:	e8 b7 76 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108ca1:	e9 6e 01 00 00       	jmp    c0108e14 <do_pgfault+0x206>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108ca6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ca9:	8b 40 0c             	mov    0xc(%eax),%eax
c0108cac:	83 e0 05             	and    $0x5,%eax
c0108caf:	85 c0                	test   %eax,%eax
c0108cb1:	75 11                	jne    c0108cc4 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108cb3:	c7 04 24 f4 f3 10 c0 	movl   $0xc010f3f4,(%esp)
c0108cba:	e8 99 76 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108cbf:	e9 50 01 00 00       	jmp    c0108e14 <do_pgfault+0x206>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108cc4:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108ccb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108cce:	8b 40 0c             	mov    0xc(%eax),%eax
c0108cd1:	83 e0 02             	and    $0x2,%eax
c0108cd4:	85 c0                	test   %eax,%eax
c0108cd6:	74 04                	je     c0108cdc <do_pgfault+0xce>
        perm |= PTE_W;
c0108cd8:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108cdc:	8b 45 10             	mov    0x10(%ebp),%eax
c0108cdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108ce2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ce5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108cea:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108ced:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108cf4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    *
    */

    /*LAB3 EXERCISE 1: YOUR CODE*/
    // 通过addr这个线性地址返回对应的虚拟页pte 如果没有get_pte会创建一个虚拟页 同时ptep等于0
    ptep = get_pte(mm->pgdir, addr, 1);             //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
c0108cfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cfe:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d01:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108d08:	00 
c0108d09:	8b 55 10             	mov    0x10(%ebp),%edx
c0108d0c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108d10:	89 04 24             	mov    %eax,(%esp)
c0108d13:	e8 5e ca ff ff       	call   c0105776 <get_pte>
c0108d18:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    // ptep等于NULL代表alloc_page创建虚拟页失败
    if (ptep == NULL) {
c0108d1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108d1f:	75 11                	jne    c0108d32 <do_pgfault+0x124>
    	cprintf("ptep == NULL");		// 方便调试
c0108d21:	c7 04 24 57 f4 10 c0 	movl   $0xc010f457,(%esp)
c0108d28:	e8 2b 76 ff ff       	call   c0100358 <cprintf>
    	goto failed;
c0108d2d:	e9 e2 00 00 00       	jmp    c0108e14 <do_pgfault+0x206>
    }
    // 等于0是创建好虚拟页后还没有物理页与之对应
    if (*ptep == 0) {
c0108d32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d35:	8b 00                	mov    (%eax),%eax
c0108d37:	85 c0                	test   %eax,%eax
c0108d39:	75 35                	jne    c0108d70 <do_pgfault+0x162>
    	// 尝试分配物理页
    	if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {     //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c0108d3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d3e:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d41:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108d44:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108d48:	8b 55 10             	mov    0x10(%ebp),%edx
c0108d4b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108d4f:	89 04 24             	mov    %eax,(%esp)
c0108d52:	e8 90 d1 ff ff       	call   c0105ee7 <pgdir_alloc_page>
c0108d57:	85 c0                	test   %eax,%eax
c0108d59:	0f 85 ae 00 00 00    	jne    c0108e0d <do_pgfault+0x1ff>
    		cprintf("pgdir_alloc_page(mm->pgdir, addr, perm) == NULL");
c0108d5f:	c7 04 24 64 f4 10 c0 	movl   $0xc010f464,(%esp)
c0108d66:	e8 ed 75 ff ff       	call   c0100358 <cprintf>
    		goto failed;
c0108d6b:	e9 a4 00 00 00       	jmp    c0108e14 <do_pgfault+0x206>
		     If the vma includes this addr is writable, then we can set the page writable by rewrite the *ptep.
		     This method could be used to implement the Copy on Write (COW) thchnology(a fast fork process method).
		  2) *ptep & PTE_P == 0 & but *ptep!=0, it means this pte is a  swap entry.
		     We should add the LAB3's results here.
     */
        if(swap_init_ok) {
c0108d70:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c0108d75:	85 c0                	test   %eax,%eax
c0108d77:	74 7d                	je     c0108df6 <do_pgfault+0x1e8>
            // 将磁盘中的页换入到内存
			struct Page *page=NULL;
c0108d79:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            ret = swap_in(mm, addr, &page);                        //(1）According to the mm AND addr, try to load the content of right disk page
c0108d80:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108d83:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108d87:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d91:	89 04 24             	mov    %eax,(%esp)
c0108d94:	e8 e7 e1 ff ff       	call   c0106f80 <swap_in>
c0108d99:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (ret != 0) {
c0108d9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108da0:	74 0e                	je     c0108db0 <do_pgfault+0x1a2>
            	cprintf("swap_in in do_pgfault failed\n");
c0108da2:	c7 04 24 94 f4 10 c0 	movl   $0xc010f494,(%esp)
c0108da9:	e8 aa 75 ff ff       	call   c0100358 <cprintf>
c0108dae:	eb 64                	jmp    c0108e14 <do_pgfault+0x206>
            	goto failed;
            }
            // 建立虚拟地址和物理地址之间的对应关系            //    into the memory which page managed.
            page_insert(mm->pgdir, page, addr, perm);                        //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
c0108db0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108db3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108db6:	8b 40 0c             	mov    0xc(%eax),%eax
c0108db9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108dbc:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108dc0:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108dc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108dc7:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108dcb:	89 04 24             	mov    %eax,(%esp)
c0108dce:	e8 fe cf ff ff       	call   c0105dd1 <page_insert>
            // 最后的swap_in等于1使页面可替换
            swap_map_swappable(mm, addr, page, 1);            //(3) make the page swappable.
c0108dd3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108dd6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108ddd:	00 
c0108dde:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108de2:	8b 45 10             	mov    0x10(%ebp),%eax
c0108de5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108de9:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dec:	89 04 24             	mov    %eax,(%esp)
c0108def:	e8 c3 df ff ff       	call   c0106db7 <swap_map_swappable>
c0108df4:	eb 17                	jmp    c0108e0d <do_pgfault+0x1ff>
            //page->pra_vaddr = addr;
                        //(4) [NOTICE]: you myabe need to update your lab3's implementation for LAB5's normal execution.
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108df6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108df9:	8b 00                	mov    (%eax),%eax
c0108dfb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108dff:	c7 04 24 b4 f4 10 c0 	movl   $0xc010f4b4,(%esp)
c0108e06:	e8 4d 75 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108e0b:	eb 07                	jmp    c0108e14 <do_pgfault+0x206>
        }
   }

   ret = 0;
c0108e0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0108e14:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108e17:	c9                   	leave  
c0108e18:	c3                   	ret    

c0108e19 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0108e19:	55                   	push   %ebp
c0108e1a:	89 e5                	mov    %esp,%ebp
c0108e1c:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0108e1f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108e23:	0f 84 e0 00 00 00    	je     c0108f09 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0108e29:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108e30:	76 1c                	jbe    c0108e4e <user_mem_check+0x35>
c0108e32:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e35:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108e38:	01 d0                	add    %edx,%eax
c0108e3a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108e3d:	76 0f                	jbe    c0108e4e <user_mem_check+0x35>
c0108e3f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e42:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108e45:	01 d0                	add    %edx,%eax
c0108e47:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0108e4c:	76 0a                	jbe    c0108e58 <user_mem_check+0x3f>
            return 0;
c0108e4e:	b8 00 00 00 00       	mov    $0x0,%eax
c0108e53:	e9 e2 00 00 00       	jmp    c0108f3a <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0108e58:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108e5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0108e5e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e61:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108e64:	01 d0                	add    %edx,%eax
c0108e66:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0108e69:	e9 88 00 00 00       	jmp    c0108ef6 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0108e6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108e71:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e75:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e78:	89 04 24             	mov    %eax,(%esp)
c0108e7b:	e8 be ef ff ff       	call   c0107e3e <find_vma>
c0108e80:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108e83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108e87:	74 0b                	je     c0108e94 <user_mem_check+0x7b>
c0108e89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e8c:	8b 40 04             	mov    0x4(%eax),%eax
c0108e8f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108e92:	76 0a                	jbe    c0108e9e <user_mem_check+0x85>
                return 0;
c0108e94:	b8 00 00 00 00       	mov    $0x0,%eax
c0108e99:	e9 9c 00 00 00       	jmp    c0108f3a <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0108e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ea1:	8b 50 0c             	mov    0xc(%eax),%edx
c0108ea4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108ea8:	74 07                	je     c0108eb1 <user_mem_check+0x98>
c0108eaa:	b8 02 00 00 00       	mov    $0x2,%eax
c0108eaf:	eb 05                	jmp    c0108eb6 <user_mem_check+0x9d>
c0108eb1:	b8 01 00 00 00       	mov    $0x1,%eax
c0108eb6:	21 d0                	and    %edx,%eax
c0108eb8:	85 c0                	test   %eax,%eax
c0108eba:	75 07                	jne    c0108ec3 <user_mem_check+0xaa>
                return 0;
c0108ebc:	b8 00 00 00 00       	mov    $0x0,%eax
c0108ec1:	eb 77                	jmp    c0108f3a <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0108ec3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108ec7:	74 24                	je     c0108eed <user_mem_check+0xd4>
c0108ec9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ecc:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ecf:	83 e0 08             	and    $0x8,%eax
c0108ed2:	85 c0                	test   %eax,%eax
c0108ed4:	74 17                	je     c0108eed <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0108ed6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ed9:	8b 40 04             	mov    0x4(%eax),%eax
c0108edc:	05 00 10 00 00       	add    $0x1000,%eax
c0108ee1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108ee4:	76 07                	jbe    c0108eed <user_mem_check+0xd4>
                    return 0;
c0108ee6:	b8 00 00 00 00       	mov    $0x0,%eax
c0108eeb:	eb 4d                	jmp    c0108f3a <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0108eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ef0:	8b 40 08             	mov    0x8(%eax),%eax
c0108ef3:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0108ef6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108ef9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0108efc:	0f 82 6c ff ff ff    	jb     c0108e6e <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0108f02:	b8 01 00 00 00       	mov    $0x1,%eax
c0108f07:	eb 31                	jmp    c0108f3a <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0108f09:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0108f10:	76 23                	jbe    c0108f35 <user_mem_check+0x11c>
c0108f12:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f15:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f18:	01 d0                	add    %edx,%eax
c0108f1a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108f1d:	76 16                	jbe    c0108f35 <user_mem_check+0x11c>
c0108f1f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f22:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f25:	01 d0                	add    %edx,%eax
c0108f27:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0108f2c:	77 07                	ja     c0108f35 <user_mem_check+0x11c>
c0108f2e:	b8 01 00 00 00       	mov    $0x1,%eax
c0108f33:	eb 05                	jmp    c0108f3a <user_mem_check+0x121>
c0108f35:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108f3a:	c9                   	leave  
c0108f3b:	c3                   	ret    

c0108f3c <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0108f3c:	55                   	push   %ebp
c0108f3d:	89 e5                	mov    %esp,%ebp
c0108f3f:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0108f42:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f45:	8b 04 85 e0 55 1c c0 	mov    -0x3fe3aa20(,%eax,4),%eax
c0108f4c:	83 f8 01             	cmp    $0x1,%eax
c0108f4f:	0f 85 85 00 00 00    	jne    c0108fda <phi_test_sema+0x9e>
c0108f55:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f58:	8d 48 04             	lea    0x4(%eax),%ecx
c0108f5b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108f60:	89 c8                	mov    %ecx,%eax
c0108f62:	f7 ea                	imul   %edx
c0108f64:	d1 fa                	sar    %edx
c0108f66:	89 c8                	mov    %ecx,%eax
c0108f68:	c1 f8 1f             	sar    $0x1f,%eax
c0108f6b:	29 c2                	sub    %eax,%edx
c0108f6d:	89 d0                	mov    %edx,%eax
c0108f6f:	c1 e0 02             	shl    $0x2,%eax
c0108f72:	01 d0                	add    %edx,%eax
c0108f74:	29 c1                	sub    %eax,%ecx
c0108f76:	89 ca                	mov    %ecx,%edx
c0108f78:	8b 04 95 e0 55 1c c0 	mov    -0x3fe3aa20(,%edx,4),%eax
c0108f7f:	83 f8 02             	cmp    $0x2,%eax
c0108f82:	74 56                	je     c0108fda <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c0108f84:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f87:	8d 48 01             	lea    0x1(%eax),%ecx
c0108f8a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108f8f:	89 c8                	mov    %ecx,%eax
c0108f91:	f7 ea                	imul   %edx
c0108f93:	d1 fa                	sar    %edx
c0108f95:	89 c8                	mov    %ecx,%eax
c0108f97:	c1 f8 1f             	sar    $0x1f,%eax
c0108f9a:	29 c2                	sub    %eax,%edx
c0108f9c:	89 d0                	mov    %edx,%eax
c0108f9e:	c1 e0 02             	shl    $0x2,%eax
c0108fa1:	01 d0                	add    %edx,%eax
c0108fa3:	29 c1                	sub    %eax,%ecx
c0108fa5:	89 ca                	mov    %ecx,%edx
c0108fa7:	8b 04 95 e0 55 1c c0 	mov    -0x3fe3aa20(,%edx,4),%eax
c0108fae:	83 f8 02             	cmp    $0x2,%eax
c0108fb1:	74 27                	je     c0108fda <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c0108fb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fb6:	c7 04 85 e0 55 1c c0 	movl   $0x2,-0x3fe3aa20(,%eax,4)
c0108fbd:	02 00 00 00 
        up(&s[i]);
c0108fc1:	8b 55 08             	mov    0x8(%ebp),%edx
c0108fc4:	89 d0                	mov    %edx,%eax
c0108fc6:	01 c0                	add    %eax,%eax
c0108fc8:	01 d0                	add    %edx,%eax
c0108fca:	c1 e0 02             	shl    $0x2,%eax
c0108fcd:	05 80 56 1c c0       	add    $0xc01c5680,%eax
c0108fd2:	89 04 24             	mov    %eax,(%esp)
c0108fd5:	e8 83 0b 00 00       	call   c0109b5d <up>
    }
}
c0108fda:	c9                   	leave  
c0108fdb:	c3                   	ret    

c0108fdc <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108fdc:	55                   	push   %ebp
c0108fdd:	89 e5                	mov    %esp,%ebp
c0108fdf:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0108fe2:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c0108fe9:	e8 8a 0b 00 00       	call   c0109b78 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108fee:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ff1:	c7 04 85 e0 55 1c c0 	movl   $0x1,-0x3fe3aa20(,%eax,4)
c0108ff8:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0108ffc:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fff:	89 04 24             	mov    %eax,(%esp)
c0109002:	e8 35 ff ff ff       	call   c0108f3c <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109007:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c010900e:	e8 4a 0b 00 00       	call   c0109b5d <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0109013:	8b 55 08             	mov    0x8(%ebp),%edx
c0109016:	89 d0                	mov    %edx,%eax
c0109018:	01 c0                	add    %eax,%eax
c010901a:	01 d0                	add    %edx,%eax
c010901c:	c1 e0 02             	shl    $0x2,%eax
c010901f:	05 80 56 1c c0       	add    $0xc01c5680,%eax
c0109024:	89 04 24             	mov    %eax,(%esp)
c0109027:	e8 4c 0b 00 00       	call   c0109b78 <down>
}
c010902c:	c9                   	leave  
c010902d:	c3                   	ret    

c010902e <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010902e:	55                   	push   %ebp
c010902f:	89 e5                	mov    %esp,%ebp
c0109031:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109034:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c010903b:	e8 38 0b 00 00       	call   c0109b78 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0109040:	8b 45 08             	mov    0x8(%ebp),%eax
c0109043:	c7 04 85 e0 55 1c c0 	movl   $0x0,-0x3fe3aa20(,%eax,4)
c010904a:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c010904e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109051:	8d 48 04             	lea    0x4(%eax),%ecx
c0109054:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109059:	89 c8                	mov    %ecx,%eax
c010905b:	f7 ea                	imul   %edx
c010905d:	d1 fa                	sar    %edx
c010905f:	89 c8                	mov    %ecx,%eax
c0109061:	c1 f8 1f             	sar    $0x1f,%eax
c0109064:	29 c2                	sub    %eax,%edx
c0109066:	89 d0                	mov    %edx,%eax
c0109068:	c1 e0 02             	shl    $0x2,%eax
c010906b:	01 d0                	add    %edx,%eax
c010906d:	29 c1                	sub    %eax,%ecx
c010906f:	89 ca                	mov    %ecx,%edx
c0109071:	89 14 24             	mov    %edx,(%esp)
c0109074:	e8 c3 fe ff ff       	call   c0108f3c <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0109079:	8b 45 08             	mov    0x8(%ebp),%eax
c010907c:	8d 48 01             	lea    0x1(%eax),%ecx
c010907f:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109084:	89 c8                	mov    %ecx,%eax
c0109086:	f7 ea                	imul   %edx
c0109088:	d1 fa                	sar    %edx
c010908a:	89 c8                	mov    %ecx,%eax
c010908c:	c1 f8 1f             	sar    $0x1f,%eax
c010908f:	29 c2                	sub    %eax,%edx
c0109091:	89 d0                	mov    %edx,%eax
c0109093:	c1 e0 02             	shl    $0x2,%eax
c0109096:	01 d0                	add    %edx,%eax
c0109098:	29 c1                	sub    %eax,%ecx
c010909a:	89 ca                	mov    %ecx,%edx
c010909c:	89 14 24             	mov    %edx,(%esp)
c010909f:	e8 98 fe ff ff       	call   c0108f3c <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01090a4:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c01090ab:	e8 ad 0a 00 00       	call   c0109b5d <up>
}
c01090b0:	c9                   	leave  
c01090b1:	c3                   	ret    

c01090b2 <philosopher_using_semaphore>:

// 基于信号量的哲学家就餐问题 主函数
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01090b2:	55                   	push   %ebp
c01090b3:	89 e5                	mov    %esp,%ebp
c01090b5:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c01090b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01090bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01090c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c01090c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01090c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090cc:	c7 04 24 dc f4 10 c0 	movl   $0xc010f4dc,(%esp)
c01090d3:	e8 80 72 ff ff       	call   c0100358 <cprintf>
    while(iter++<TIMES)
c01090d8:	eb 62                	jmp    c010913c <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c01090da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01090dd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01090e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090e8:	c7 04 24 fc f4 10 c0 	movl   $0xc010f4fc,(%esp)
c01090ef:	e8 64 72 ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c01090f4:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01090fb:	e8 e0 2d 00 00       	call   c010bee0 <do_sleep>
        phi_take_forks_sema(i); // 尝试拿叉子
c0109100:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109103:	89 04 24             	mov    %eax,(%esp)
c0109106:	e8 d1 fe ff ff       	call   c0108fdc <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c010910b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010910e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109112:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109115:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109119:	c7 04 24 2c f5 10 c0 	movl   $0xc010f52c,(%esp)
c0109120:	e8 33 72 ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c0109125:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010912c:	e8 af 2d 00 00       	call   c010bee0 <do_sleep>
        phi_put_forks_sema(i); 	// 尝试放下叉子
c0109131:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109134:	89 04 24             	mov    %eax,(%esp)
c0109137:	e8 f2 fe ff ff       	call   c010902e <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c010913c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010913f:	8d 50 01             	lea    0x1(%eax),%edx
c0109142:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109145:	83 f8 03             	cmp    $0x3,%eax
c0109148:	7e 90                	jle    c01090da <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 	// 尝试放下叉子
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c010914a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010914d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109151:	c7 04 24 57 f5 10 c0 	movl   $0xc010f557,(%esp)
c0109158:	e8 fb 71 ff ff       	call   c0100358 <cprintf>
    return 0;    
c010915d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109162:	c9                   	leave  
c0109163:	c3                   	ret    

c0109164 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0109164:	55                   	push   %ebp
c0109165:	89 e5                	mov    %esp,%ebp
c0109167:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c010916a:	8b 45 08             	mov    0x8(%ebp),%eax
c010916d:	8b 04 85 40 56 1c c0 	mov    -0x3fe3a9c0(,%eax,4),%eax
c0109174:	83 f8 01             	cmp    $0x1,%eax
c0109177:	0f 85 b5 00 00 00    	jne    c0109232 <phi_test_condvar+0xce>
c010917d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109180:	8d 48 04             	lea    0x4(%eax),%ecx
c0109183:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109188:	89 c8                	mov    %ecx,%eax
c010918a:	f7 ea                	imul   %edx
c010918c:	d1 fa                	sar    %edx
c010918e:	89 c8                	mov    %ecx,%eax
c0109190:	c1 f8 1f             	sar    $0x1f,%eax
c0109193:	29 c2                	sub    %eax,%edx
c0109195:	89 d0                	mov    %edx,%eax
c0109197:	c1 e0 02             	shl    $0x2,%eax
c010919a:	01 d0                	add    %edx,%eax
c010919c:	29 c1                	sub    %eax,%ecx
c010919e:	89 ca                	mov    %ecx,%edx
c01091a0:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c01091a7:	83 f8 02             	cmp    $0x2,%eax
c01091aa:	0f 84 82 00 00 00    	je     c0109232 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01091b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01091b3:	8d 48 01             	lea    0x1(%eax),%ecx
c01091b6:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01091bb:	89 c8                	mov    %ecx,%eax
c01091bd:	f7 ea                	imul   %edx
c01091bf:	d1 fa                	sar    %edx
c01091c1:	89 c8                	mov    %ecx,%eax
c01091c3:	c1 f8 1f             	sar    $0x1f,%eax
c01091c6:	29 c2                	sub    %eax,%edx
c01091c8:	89 d0                	mov    %edx,%eax
c01091ca:	c1 e0 02             	shl    $0x2,%eax
c01091cd:	01 d0                	add    %edx,%eax
c01091cf:	29 c1                	sub    %eax,%ecx
c01091d1:	89 ca                	mov    %ecx,%edx
c01091d3:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c01091da:	83 f8 02             	cmp    $0x2,%eax
c01091dd:	74 53                	je     c0109232 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c01091df:	8b 45 08             	mov    0x8(%ebp),%eax
c01091e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091e6:	c7 04 24 74 f5 10 c0 	movl   $0xc010f574,(%esp)
c01091ed:	e8 66 71 ff ff       	call   c0100358 <cprintf>
        state_condvar[i] = EATING ;
c01091f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01091f5:	c7 04 85 40 56 1c c0 	movl   $0x2,-0x3fe3a9c0(,%eax,4)
c01091fc:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0109200:	8b 45 08             	mov    0x8(%ebp),%eax
c0109203:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109207:	c7 04 24 a8 f5 10 c0 	movl   $0xc010f5a8,(%esp)
c010920e:	e8 45 71 ff ff       	call   c0100358 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0109213:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109218:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010921b:	8b 55 08             	mov    0x8(%ebp),%edx
c010921e:	89 d0                	mov    %edx,%eax
c0109220:	c1 e0 02             	shl    $0x2,%eax
c0109223:	01 d0                	add    %edx,%eax
c0109225:	c1 e0 02             	shl    $0x2,%eax
c0109228:	01 c8                	add    %ecx,%eax
c010922a:	89 04 24             	mov    %eax,(%esp)
c010922d:	e8 1b 06 00 00       	call   c010984d <cond_signal>
    }
}
c0109232:	c9                   	leave  
c0109233:	c3                   	ret    

c0109234 <phi_take_forks_condvar>:

// 尝试取叉子
void phi_take_forks_condvar(int i) {
c0109234:	55                   	push   %ebp
c0109235:	89 e5                	mov    %esp,%ebp
c0109237:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));		// 互斥信号量的等待；互斥信号量的等待的唤醒保证了中间的操作是互斥的。
c010923a:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010923f:	89 04 24             	mov    %eax,(%esp)
c0109242:	e8 31 09 00 00       	call   c0109b78 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     state_condvar[i] = HUNGRY;
c0109247:	8b 45 08             	mov    0x8(%ebp),%eax
c010924a:	c7 04 85 40 56 1c c0 	movl   $0x1,-0x3fe3a9c0(,%eax,4)
c0109251:	01 00 00 00 
     // try to get fork
     // 对共享变量访问（这里就是叉子），如果满足就执行，不满足就等待。
      if ((state_condvar[(i+4)%5] != EATING) && (state_condvar[(i+1)%5] != EATING)) {
c0109255:	8b 45 08             	mov    0x8(%ebp),%eax
c0109258:	8d 48 04             	lea    0x4(%eax),%ecx
c010925b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109260:	89 c8                	mov    %ecx,%eax
c0109262:	f7 ea                	imul   %edx
c0109264:	d1 fa                	sar    %edx
c0109266:	89 c8                	mov    %ecx,%eax
c0109268:	c1 f8 1f             	sar    $0x1f,%eax
c010926b:	29 c2                	sub    %eax,%edx
c010926d:	89 d0                	mov    %edx,%eax
c010926f:	c1 e0 02             	shl    $0x2,%eax
c0109272:	01 d0                	add    %edx,%eax
c0109274:	29 c1                	sub    %eax,%ecx
c0109276:	89 ca                	mov    %ecx,%edx
c0109278:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c010927f:	83 f8 02             	cmp    $0x2,%eax
c0109282:	74 3f                	je     c01092c3 <phi_take_forks_condvar+0x8f>
c0109284:	8b 45 08             	mov    0x8(%ebp),%eax
c0109287:	8d 48 01             	lea    0x1(%eax),%ecx
c010928a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010928f:	89 c8                	mov    %ecx,%eax
c0109291:	f7 ea                	imul   %edx
c0109293:	d1 fa                	sar    %edx
c0109295:	89 c8                	mov    %ecx,%eax
c0109297:	c1 f8 1f             	sar    $0x1f,%eax
c010929a:	29 c2                	sub    %eax,%edx
c010929c:	89 d0                	mov    %edx,%eax
c010929e:	c1 e0 02             	shl    $0x2,%eax
c01092a1:	01 d0                	add    %edx,%eax
c01092a3:	29 c1                	sub    %eax,%ecx
c01092a5:	89 ca                	mov    %ecx,%edx
c01092a7:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c01092ae:	83 f8 02             	cmp    $0x2,%eax
c01092b1:	74 10                	je     c01092c3 <phi_take_forks_condvar+0x8f>
    	  state_condvar[i] = EATING;
c01092b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01092b6:	c7 04 85 40 56 1c c0 	movl   $0x2,-0x3fe3a9c0(,%eax,4)
c01092bd:	02 00 00 00 
c01092c1:	eb 1f                	jmp    c01092e2 <phi_take_forks_condvar+0xae>
      }
      else {
      	  cond_wait(&(mtp->cv[i]));	// 不满足，做条件等待！代码参考了 cond_signal(&mtp->cv[i]) ;
c01092c3:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01092c8:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01092cb:	8b 55 08             	mov    0x8(%ebp),%edx
c01092ce:	89 d0                	mov    %edx,%eax
c01092d0:	c1 e0 02             	shl    $0x2,%eax
c01092d3:	01 d0                	add    %edx,%eax
c01092d5:	c1 e0 02             	shl    $0x2,%eax
c01092d8:	01 c8                	add    %ecx,%eax
c01092da:	89 04 24             	mov    %eax,(%esp)
c01092dd:	e8 0b 06 00 00       	call   c01098ed <cond_wait>
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)		// next_count：发出signal的进程个数
c01092e2:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01092e7:	8b 40 18             	mov    0x18(%eax),%eax
c01092ea:	85 c0                	test   %eax,%eax
c01092ec:	7e 12                	jle    c0109300 <phi_take_forks_condvar+0xcc>
         up(&(mtp->next));		// 再最后的最后，唤醒B自身的睡眠。
c01092ee:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01092f3:	83 c0 0c             	add    $0xc,%eax
c01092f6:	89 04 24             	mov    %eax,(%esp)
c01092f9:	e8 5f 08 00 00       	call   c0109b5d <up>
c01092fe:	eb 0d                	jmp    c010930d <phi_take_forks_condvar+0xd9>
      else
         up(&(mtp->mutex));		// 互斥信号量的唤醒
c0109300:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109305:	89 04 24             	mov    %eax,(%esp)
c0109308:	e8 50 08 00 00       	call   c0109b5d <up>
}
c010930d:	c9                   	leave  
c010930e:	c3                   	ret    

c010930f <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c010930f:	55                   	push   %ebp
c0109310:	89 e5                	mov    %esp,%ebp
c0109312:	53                   	push   %ebx
c0109313:	83 ec 14             	sub    $0x14,%esp
     down(&(mtp->mutex));		// 互斥信号量的等待
c0109316:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010931b:	89 04 24             	mov    %eax,(%esp)
c010931e:	e8 55 08 00 00       	call   c0109b78 <down>

//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     state_condvar[i] = THINKING;   // 声明吃完了，吃完后就思考
c0109323:	8b 45 08             	mov    0x8(%ebp),%eax
c0109326:	c7 04 85 40 56 1c c0 	movl   $0x0,-0x3fe3a9c0(,%eax,4)
c010932d:	00 00 00 00 
     // test left and right neighbors
     // 判断，如果刚才的条件A被满足，就唤醒它。
     if ((state_condvar[(i+4)%5] == HUNGRY) && (state_condvar[(i+3)%5] != EATING)) {
c0109331:	8b 45 08             	mov    0x8(%ebp),%eax
c0109334:	8d 48 04             	lea    0x4(%eax),%ecx
c0109337:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010933c:	89 c8                	mov    %ecx,%eax
c010933e:	f7 ea                	imul   %edx
c0109340:	d1 fa                	sar    %edx
c0109342:	89 c8                	mov    %ecx,%eax
c0109344:	c1 f8 1f             	sar    $0x1f,%eax
c0109347:	29 c2                	sub    %eax,%edx
c0109349:	89 d0                	mov    %edx,%eax
c010934b:	c1 e0 02             	shl    $0x2,%eax
c010934e:	01 d0                	add    %edx,%eax
c0109350:	29 c1                	sub    %eax,%ecx
c0109352:	89 ca                	mov    %ecx,%edx
c0109354:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c010935b:	83 f8 01             	cmp    $0x1,%eax
c010935e:	0f 85 9c 00 00 00    	jne    c0109400 <phi_put_forks_condvar+0xf1>
c0109364:	8b 45 08             	mov    0x8(%ebp),%eax
c0109367:	8d 48 03             	lea    0x3(%eax),%ecx
c010936a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010936f:	89 c8                	mov    %ecx,%eax
c0109371:	f7 ea                	imul   %edx
c0109373:	d1 fa                	sar    %edx
c0109375:	89 c8                	mov    %ecx,%eax
c0109377:	c1 f8 1f             	sar    $0x1f,%eax
c010937a:	29 c2                	sub    %eax,%edx
c010937c:	89 d0                	mov    %edx,%eax
c010937e:	c1 e0 02             	shl    $0x2,%eax
c0109381:	01 d0                	add    %edx,%eax
c0109383:	29 c1                	sub    %eax,%ecx
c0109385:	89 ca                	mov    %ecx,%edx
c0109387:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c010938e:	83 f8 02             	cmp    $0x2,%eax
c0109391:	74 6d                	je     c0109400 <phi_put_forks_condvar+0xf1>
    	 state_condvar[(i+4)%5] = EATING;
c0109393:	8b 45 08             	mov    0x8(%ebp),%eax
c0109396:	8d 48 04             	lea    0x4(%eax),%ecx
c0109399:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010939e:	89 c8                	mov    %ecx,%eax
c01093a0:	f7 ea                	imul   %edx
c01093a2:	d1 fa                	sar    %edx
c01093a4:	89 c8                	mov    %ecx,%eax
c01093a6:	c1 f8 1f             	sar    $0x1f,%eax
c01093a9:	29 c2                	sub    %eax,%edx
c01093ab:	89 d0                	mov    %edx,%eax
c01093ad:	c1 e0 02             	shl    $0x2,%eax
c01093b0:	01 d0                	add    %edx,%eax
c01093b2:	29 c1                	sub    %eax,%ecx
c01093b4:	89 ca                	mov    %ecx,%edx
c01093b6:	c7 04 95 40 56 1c c0 	movl   $0x2,-0x3fe3a9c0(,%edx,4)
c01093bd:	02 00 00 00 
         cond_signal(&(mtp->cv[(i+4)%5])); 	// 唤醒！代码参考 cond_signal(&mtp->cv[i]) ;
c01093c1:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01093c6:	8b 58 1c             	mov    0x1c(%eax),%ebx
c01093c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01093cc:	8d 48 04             	lea    0x4(%eax),%ecx
c01093cf:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093d4:	89 c8                	mov    %ecx,%eax
c01093d6:	f7 ea                	imul   %edx
c01093d8:	d1 fa                	sar    %edx
c01093da:	89 c8                	mov    %ecx,%eax
c01093dc:	c1 f8 1f             	sar    $0x1f,%eax
c01093df:	29 c2                	sub    %eax,%edx
c01093e1:	89 d0                	mov    %edx,%eax
c01093e3:	c1 e0 02             	shl    $0x2,%eax
c01093e6:	01 d0                	add    %edx,%eax
c01093e8:	29 c1                	sub    %eax,%ecx
c01093ea:	89 ca                	mov    %ecx,%edx
c01093ec:	89 d0                	mov    %edx,%eax
c01093ee:	c1 e0 02             	shl    $0x2,%eax
c01093f1:	01 d0                	add    %edx,%eax
c01093f3:	c1 e0 02             	shl    $0x2,%eax
c01093f6:	01 d8                	add    %ebx,%eax
c01093f8:	89 04 24             	mov    %eax,(%esp)
c01093fb:	e8 4d 04 00 00       	call   c010984d <cond_signal>
     }
     if ((state_condvar[(i+1)%5] == HUNGRY) && (state_condvar[(i+2)%5] != EATING)) {
c0109400:	8b 45 08             	mov    0x8(%ebp),%eax
c0109403:	8d 48 01             	lea    0x1(%eax),%ecx
c0109406:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010940b:	89 c8                	mov    %ecx,%eax
c010940d:	f7 ea                	imul   %edx
c010940f:	d1 fa                	sar    %edx
c0109411:	89 c8                	mov    %ecx,%eax
c0109413:	c1 f8 1f             	sar    $0x1f,%eax
c0109416:	29 c2                	sub    %eax,%edx
c0109418:	89 d0                	mov    %edx,%eax
c010941a:	c1 e0 02             	shl    $0x2,%eax
c010941d:	01 d0                	add    %edx,%eax
c010941f:	29 c1                	sub    %eax,%ecx
c0109421:	89 ca                	mov    %ecx,%edx
c0109423:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c010942a:	83 f8 01             	cmp    $0x1,%eax
c010942d:	0f 85 9c 00 00 00    	jne    c01094cf <phi_put_forks_condvar+0x1c0>
c0109433:	8b 45 08             	mov    0x8(%ebp),%eax
c0109436:	8d 48 02             	lea    0x2(%eax),%ecx
c0109439:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010943e:	89 c8                	mov    %ecx,%eax
c0109440:	f7 ea                	imul   %edx
c0109442:	d1 fa                	sar    %edx
c0109444:	89 c8                	mov    %ecx,%eax
c0109446:	c1 f8 1f             	sar    $0x1f,%eax
c0109449:	29 c2                	sub    %eax,%edx
c010944b:	89 d0                	mov    %edx,%eax
c010944d:	c1 e0 02             	shl    $0x2,%eax
c0109450:	01 d0                	add    %edx,%eax
c0109452:	29 c1                	sub    %eax,%ecx
c0109454:	89 ca                	mov    %ecx,%edx
c0109456:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c010945d:	83 f8 02             	cmp    $0x2,%eax
c0109460:	74 6d                	je     c01094cf <phi_put_forks_condvar+0x1c0>
    	 state_condvar[(i+1)%5] = EATING;
c0109462:	8b 45 08             	mov    0x8(%ebp),%eax
c0109465:	8d 48 01             	lea    0x1(%eax),%ecx
c0109468:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010946d:	89 c8                	mov    %ecx,%eax
c010946f:	f7 ea                	imul   %edx
c0109471:	d1 fa                	sar    %edx
c0109473:	89 c8                	mov    %ecx,%eax
c0109475:	c1 f8 1f             	sar    $0x1f,%eax
c0109478:	29 c2                	sub    %eax,%edx
c010947a:	89 d0                	mov    %edx,%eax
c010947c:	c1 e0 02             	shl    $0x2,%eax
c010947f:	01 d0                	add    %edx,%eax
c0109481:	29 c1                	sub    %eax,%ecx
c0109483:	89 ca                	mov    %ecx,%edx
c0109485:	c7 04 95 40 56 1c c0 	movl   $0x2,-0x3fe3a9c0(,%edx,4)
c010948c:	02 00 00 00 
         cond_signal(&(mtp->cv[(i+1)%5]));
c0109490:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109495:	8b 58 1c             	mov    0x1c(%eax),%ebx
c0109498:	8b 45 08             	mov    0x8(%ebp),%eax
c010949b:	8d 48 01             	lea    0x1(%eax),%ecx
c010949e:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094a3:	89 c8                	mov    %ecx,%eax
c01094a5:	f7 ea                	imul   %edx
c01094a7:	d1 fa                	sar    %edx
c01094a9:	89 c8                	mov    %ecx,%eax
c01094ab:	c1 f8 1f             	sar    $0x1f,%eax
c01094ae:	29 c2                	sub    %eax,%edx
c01094b0:	89 d0                	mov    %edx,%eax
c01094b2:	c1 e0 02             	shl    $0x2,%eax
c01094b5:	01 d0                	add    %edx,%eax
c01094b7:	29 c1                	sub    %eax,%ecx
c01094b9:	89 ca                	mov    %ecx,%edx
c01094bb:	89 d0                	mov    %edx,%eax
c01094bd:	c1 e0 02             	shl    $0x2,%eax
c01094c0:	01 d0                	add    %edx,%eax
c01094c2:	c1 e0 02             	shl    $0x2,%eax
c01094c5:	01 d8                	add    %ebx,%eax
c01094c7:	89 04 24             	mov    %eax,(%esp)
c01094ca:	e8 7e 03 00 00       	call   c010984d <cond_signal>
     }
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c01094cf:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01094d4:	8b 40 18             	mov    0x18(%eax),%eax
c01094d7:	85 c0                	test   %eax,%eax
c01094d9:	7e 12                	jle    c01094ed <phi_put_forks_condvar+0x1de>
        up(&(mtp->next));
c01094db:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01094e0:	83 c0 0c             	add    $0xc,%eax
c01094e3:	89 04 24             	mov    %eax,(%esp)
c01094e6:	e8 72 06 00 00       	call   c0109b5d <up>
c01094eb:	eb 0d                	jmp    c01094fa <phi_put_forks_condvar+0x1eb>
     else
        up(&(mtp->mutex));			// 互斥信号量的唤醒
c01094ed:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01094f2:	89 04 24             	mov    %eax,(%esp)
c01094f5:	e8 63 06 00 00       	call   c0109b5d <up>
}
c01094fa:	83 c4 14             	add    $0x14,%esp
c01094fd:	5b                   	pop    %ebx
c01094fe:	5d                   	pop    %ebp
c01094ff:	c3                   	ret    

c0109500 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0109500:	55                   	push   %ebp
c0109501:	89 e5                	mov    %esp,%ebp
c0109503:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0109506:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010950d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109510:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0109513:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109516:	89 44 24 04          	mov    %eax,0x4(%esp)
c010951a:	c7 04 24 d0 f5 10 c0 	movl   $0xc010f5d0,(%esp)
c0109521:	e8 32 6e ff ff       	call   c0100358 <cprintf>
    while(iter++<TIMES)
c0109526:	eb 62                	jmp    c010958a <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0109528:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010952b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010952f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109532:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109536:	c7 04 24 f0 f5 10 c0 	movl   $0xc010f5f0,(%esp)
c010953d:	e8 16 6e ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c0109542:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109549:	e8 92 29 00 00       	call   c010bee0 <do_sleep>
        phi_take_forks_condvar(i); 
c010954e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109551:	89 04 24             	mov    %eax,(%esp)
c0109554:	e8 db fc ff ff       	call   c0109234 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c0109559:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010955c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109560:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109563:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109567:	c7 04 24 20 f6 10 c0 	movl   $0xc010f620,(%esp)
c010956e:	e8 e5 6d ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c0109573:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010957a:	e8 61 29 00 00       	call   c010bee0 <do_sleep>
        phi_put_forks_condvar(i); 
c010957f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109582:	89 04 24             	mov    %eax,(%esp)
c0109585:	e8 85 fd ff ff       	call   c010930f <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c010958a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010958d:	8d 50 01             	lea    0x1(%eax),%edx
c0109590:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109593:	83 f8 03             	cmp    $0x3,%eax
c0109596:	7e 90                	jle    c0109528 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0109598:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010959b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010959f:	c7 04 24 50 f6 10 c0 	movl   $0xc010f650,(%esp)
c01095a6:	e8 ad 6d ff ff       	call   c0100358 <cprintf>
    return 0;    
c01095ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01095b0:	c9                   	leave  
c01095b1:	c3                   	ret    

c01095b2 <check_sync>:

void check_sync(void){
c01095b2:	55                   	push   %ebp
c01095b3:	89 e5                	mov    %esp,%ebp
c01095b5:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c01095b8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01095bf:	00 
c01095c0:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c01095c7:	e8 1e 04 00 00       	call   c01099ea <sem_init>
    for(i=0;i<N;i++){
c01095cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01095d3:	e9 94 00 00 00       	jmp    c010966c <check_sync+0xba>
        sem_init(&s[i], 0);
c01095d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01095db:	89 d0                	mov    %edx,%eax
c01095dd:	01 c0                	add    %eax,%eax
c01095df:	01 d0                	add    %edx,%eax
c01095e1:	c1 e0 02             	shl    $0x2,%eax
c01095e4:	05 80 56 1c c0       	add    $0xc01c5680,%eax
c01095e9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01095f0:	00 
c01095f1:	89 04 24             	mov    %eax,(%esp)
c01095f4:	e8 f1 03 00 00       	call   c01099ea <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c01095f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095fc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109603:	00 
c0109604:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109608:	c7 04 24 b2 90 10 c0 	movl   $0xc01090b2,(%esp)
c010960f:	e8 61 14 00 00       	call   c010aa75 <kernel_thread>
c0109614:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0109617:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010961b:	7f 1c                	jg     c0109639 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c010961d:	c7 44 24 08 70 f6 10 	movl   $0xc010f670,0x8(%esp)
c0109624:	c0 
c0109625:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c010962c:	00 
c010962d:	c7 04 24 a2 f6 10 c0 	movl   $0xc010f6a2,(%esp)
c0109634:	e8 a1 77 ff ff       	call   c0100dda <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c0109639:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010963c:	89 04 24             	mov    %eax,(%esp)
c010963f:	e8 bd 13 00 00       	call   c010aa01 <find_proc>
c0109644:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109647:	89 04 95 54 56 1c c0 	mov    %eax,-0x3fe3a9ac(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c010964e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109651:	8b 04 85 54 56 1c c0 	mov    -0x3fe3a9ac(,%eax,4),%eax
c0109658:	c7 44 24 04 b9 f6 10 	movl   $0xc010f6b9,0x4(%esp)
c010965f:	c0 
c0109660:	89 04 24             	mov    %eax,(%esp)
c0109663:	e8 80 0f 00 00       	call   c010a5e8 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c0109668:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010966c:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109670:	0f 8e 62 ff ff ff    	jle    c01095d8 <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c0109676:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010967d:	00 
c010967e:	c7 04 24 20 56 1c c0 	movl   $0xc01c5620,(%esp)
c0109685:	e8 99 00 00 00       	call   c0109723 <monitor_init>
    for(i=0;i<N;i++){
c010968a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109691:	e9 81 00 00 00       	jmp    c0109717 <check_sync+0x165>
        state_condvar[i]=THINKING;
c0109696:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109699:	c7 04 85 40 56 1c c0 	movl   $0x0,-0x3fe3a9c0(,%eax,4)
c01096a0:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c01096a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096a7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01096ae:	00 
c01096af:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096b3:	c7 04 24 00 95 10 c0 	movl   $0xc0109500,(%esp)
c01096ba:	e8 b6 13 00 00       	call   c010aa75 <kernel_thread>
c01096bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c01096c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01096c6:	7f 1c                	jg     c01096e4 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c01096c8:	c7 44 24 08 d0 f6 10 	movl   $0xc010f6d0,0x8(%esp)
c01096cf:	c0 
c01096d0:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c01096d7:	00 
c01096d8:	c7 04 24 a2 f6 10 c0 	movl   $0xc010f6a2,(%esp)
c01096df:	e8 f6 76 ff ff       	call   c0100dda <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c01096e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01096e7:	89 04 24             	mov    %eax,(%esp)
c01096ea:	e8 12 13 00 00       	call   c010aa01 <find_proc>
c01096ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01096f2:	89 04 95 f4 55 1c c0 	mov    %eax,-0x3fe3aa0c(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c01096f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096fc:	8b 04 85 f4 55 1c c0 	mov    -0x3fe3aa0c(,%eax,4),%eax
c0109703:	c7 44 24 04 00 f7 10 	movl   $0xc010f700,0x4(%esp)
c010970a:	c0 
c010970b:	89 04 24             	mov    %eax,(%esp)
c010970e:	e8 d5 0e 00 00       	call   c010a5e8 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0109713:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109717:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010971b:	0f 8e 75 ff ff ff    	jle    c0109696 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c0109721:	c9                   	leave  
c0109722:	c3                   	ret    

c0109723 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0109723:	55                   	push   %ebp
c0109724:	89 e5                	mov    %esp,%ebp
c0109726:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c0109729:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010972d:	75 24                	jne    c0109753 <monitor_init+0x30>
c010972f:	c7 44 24 0c 1c f7 10 	movl   $0xc010f71c,0xc(%esp)
c0109736:	c0 
c0109737:	c7 44 24 08 25 f7 10 	movl   $0xc010f725,0x8(%esp)
c010973e:	c0 
c010973f:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c0109746:	00 
c0109747:	c7 04 24 3a f7 10 c0 	movl   $0xc010f73a,(%esp)
c010974e:	e8 87 76 ff ff       	call   c0100dda <__panic>
    mtp->next_count = 0;
c0109753:	8b 45 08             	mov    0x8(%ebp),%eax
c0109756:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c010975d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109760:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109767:	8b 45 08             	mov    0x8(%ebp),%eax
c010976a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109771:	00 
c0109772:	89 04 24             	mov    %eax,(%esp)
c0109775:	e8 70 02 00 00       	call   c01099ea <sem_init>
    sem_init(&(mtp->next), 0);
c010977a:	8b 45 08             	mov    0x8(%ebp),%eax
c010977d:	83 c0 0c             	add    $0xc,%eax
c0109780:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109787:	00 
c0109788:	89 04 24             	mov    %eax,(%esp)
c010978b:	e8 5a 02 00 00       	call   c01099ea <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0109790:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109793:	89 d0                	mov    %edx,%eax
c0109795:	c1 e0 02             	shl    $0x2,%eax
c0109798:	01 d0                	add    %edx,%eax
c010979a:	c1 e0 02             	shl    $0x2,%eax
c010979d:	89 04 24             	mov    %eax,(%esp)
c01097a0:	e8 f5 b3 ff ff       	call   c0104b9a <kmalloc>
c01097a5:	8b 55 08             	mov    0x8(%ebp),%edx
c01097a8:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c01097ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01097ae:	8b 40 1c             	mov    0x1c(%eax),%eax
c01097b1:	85 c0                	test   %eax,%eax
c01097b3:	75 24                	jne    c01097d9 <monitor_init+0xb6>
c01097b5:	c7 44 24 0c 4e f7 10 	movl   $0xc010f74e,0xc(%esp)
c01097bc:	c0 
c01097bd:	c7 44 24 08 25 f7 10 	movl   $0xc010f725,0x8(%esp)
c01097c4:	c0 
c01097c5:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c01097cc:	00 
c01097cd:	c7 04 24 3a f7 10 c0 	movl   $0xc010f73a,(%esp)
c01097d4:	e8 01 76 ff ff       	call   c0100dda <__panic>
    for(i=0; i<num_cv; i++){
c01097d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01097e0:	eb 61                	jmp    c0109843 <monitor_init+0x120>
        mtp->cv[i].count=0;
c01097e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01097e5:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01097e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01097eb:	89 d0                	mov    %edx,%eax
c01097ed:	c1 e0 02             	shl    $0x2,%eax
c01097f0:	01 d0                	add    %edx,%eax
c01097f2:	c1 e0 02             	shl    $0x2,%eax
c01097f5:	01 c8                	add    %ecx,%eax
c01097f7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c01097fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109801:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109804:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109807:	89 d0                	mov    %edx,%eax
c0109809:	c1 e0 02             	shl    $0x2,%eax
c010980c:	01 d0                	add    %edx,%eax
c010980e:	c1 e0 02             	shl    $0x2,%eax
c0109811:	01 c8                	add    %ecx,%eax
c0109813:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010981a:	00 
c010981b:	89 04 24             	mov    %eax,(%esp)
c010981e:	e8 c7 01 00 00       	call   c01099ea <sem_init>
        mtp->cv[i].owner=mtp;
c0109823:	8b 45 08             	mov    0x8(%ebp),%eax
c0109826:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109829:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010982c:	89 d0                	mov    %edx,%eax
c010982e:	c1 e0 02             	shl    $0x2,%eax
c0109831:	01 d0                	add    %edx,%eax
c0109833:	c1 e0 02             	shl    $0x2,%eax
c0109836:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109839:	8b 45 08             	mov    0x8(%ebp),%eax
c010983c:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c010983f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109843:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109846:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109849:	72 97                	jb     c01097e2 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c010984b:	c9                   	leave  
c010984c:	c3                   	ret    

c010984d <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c010984d:	55                   	push   %ebp
c010984e:	89 e5                	mov    %esp,%ebp
c0109850:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109853:	8b 45 08             	mov    0x8(%ebp),%eax
c0109856:	8b 40 10             	mov    0x10(%eax),%eax
c0109859:	8b 50 18             	mov    0x18(%eax),%edx
c010985c:	8b 45 08             	mov    0x8(%ebp),%eax
c010985f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109862:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109866:	89 44 24 08          	mov    %eax,0x8(%esp)
c010986a:	8b 45 08             	mov    0x8(%ebp),%eax
c010986d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109871:	c7 04 24 5c f7 10 c0 	movl   $0xc010f75c,(%esp)
c0109878:	e8 db 6a ff ff       	call   c0100358 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
   if (cvp->count >0) {		// 发现有进程在等待，若条件满足就要唤醒它。
c010987d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109880:	8b 40 0c             	mov    0xc(%eax),%eax
c0109883:	85 c0                	test   %eax,%eax
c0109885:	7e 3a                	jle    c01098c1 <cond_signal+0x74>
	   cvp->owner->next_count++;
c0109887:	8b 45 08             	mov    0x8(%ebp),%eax
c010988a:	8b 40 10             	mov    0x10(%eax),%eax
c010988d:	8b 50 18             	mov    0x18(%eax),%edx
c0109890:	83 c2 01             	add    $0x1,%edx
c0109893:	89 50 18             	mov    %edx,0x18(%eax)
	   up(&(cvp->sem));		// 唤醒线程A
c0109896:	8b 45 08             	mov    0x8(%ebp),%eax
c0109899:	89 04 24             	mov    %eax,(%esp)
c010989c:	e8 bc 02 00 00       	call   c0109b5d <up>
	   down(&(cvp->owner->next));	// 使得线程B自身进入睡眠状态
c01098a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01098a4:	8b 40 10             	mov    0x10(%eax),%eax
c01098a7:	83 c0 0c             	add    $0xc,%eax
c01098aa:	89 04 24             	mov    %eax,(%esp)
c01098ad:	e8 c6 02 00 00       	call   c0109b78 <down>
	   cvp->owner->next_count--;
c01098b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01098b5:	8b 40 10             	mov    0x10(%eax),%eax
c01098b8:	8b 50 18             	mov    0x18(%eax),%edx
c01098bb:	83 ea 01             	sub    $0x1,%edx
c01098be:	89 50 18             	mov    %edx,0x18(%eax)
   }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01098c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c4:	8b 40 10             	mov    0x10(%eax),%eax
c01098c7:	8b 50 18             	mov    0x18(%eax),%edx
c01098ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01098cd:	8b 40 0c             	mov    0xc(%eax),%eax
c01098d0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01098d4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01098d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01098db:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098df:	c7 04 24 a4 f7 10 c0 	movl   $0xc010f7a4,(%esp)
c01098e6:	e8 6d 6a ff ff       	call   c0100358 <cprintf>
}
c01098eb:	c9                   	leave  
c01098ec:	c3                   	ret    

c01098ed <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
// 如果进程A执行了cond_wait函数，表示此进程等待某个条件Cond不为真，需要睡眠。
void
cond_wait (condvar_t *cvp) {
c01098ed:	55                   	push   %ebp
c01098ee:	89 e5                	mov    %esp,%ebp
c01098f0:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01098f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f6:	8b 40 10             	mov    0x10(%eax),%eax
c01098f9:	8b 50 18             	mov    0x18(%eax),%edx
c01098fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ff:	8b 40 0c             	mov    0xc(%eax),%eax
c0109902:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109906:	89 44 24 08          	mov    %eax,0x8(%esp)
c010990a:	8b 45 08             	mov    0x8(%ebp),%eax
c010990d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109911:	c7 04 24 e8 f7 10 c0 	movl   $0xc010f7e8,(%esp)
c0109918:	e8 3b 6a ff ff       	call   c0100358 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    cvp->count++;		// 因为需要等待，所以线程的个数执行++操作。
c010991d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109920:	8b 40 0c             	mov    0xc(%eax),%eax
c0109923:	8d 50 01             	lea    0x1(%eax),%edx
c0109926:	8b 45 08             	mov    0x8(%ebp),%eax
c0109929:	89 50 0c             	mov    %edx,0xc(%eax)

    if (cvp->owner->next_count >0) {
c010992c:	8b 45 08             	mov    0x8(%ebp),%eax
c010992f:	8b 40 10             	mov    0x10(%eax),%eax
c0109932:	8b 40 18             	mov    0x18(%eax),%eax
c0109935:	85 c0                	test   %eax,%eax
c0109937:	7e 13                	jle    c010994c <cond_wait+0x5f>
    	up(&(cvp->owner->next));
c0109939:	8b 45 08             	mov    0x8(%ebp),%eax
c010993c:	8b 40 10             	mov    0x10(%eax),%eax
c010993f:	83 c0 0c             	add    $0xc,%eax
c0109942:	89 04 24             	mov    %eax,(%esp)
c0109945:	e8 13 02 00 00       	call   c0109b5d <up>
c010994a:	eb 1b                	jmp    c0109967 <cond_wait+0x7a>
    }
    // 要释放管程的mutux，不然其他进程就用不了这个互斥变量了。（相当于生产者，相当于V操作）
    else if (cvp->owner->next_count <= 0) {
c010994c:	8b 45 08             	mov    0x8(%ebp),%eax
c010994f:	8b 40 10             	mov    0x10(%eax),%eax
c0109952:	8b 40 18             	mov    0x18(%eax),%eax
c0109955:	85 c0                	test   %eax,%eax
c0109957:	7f 0e                	jg     c0109967 <cond_wait+0x7a>
    	up(&(cvp->owner->mutex));		// 互斥变量。代码参考了check_sync里面对应的代码
c0109959:	8b 45 08             	mov    0x8(%ebp),%eax
c010995c:	8b 40 10             	mov    0x10(%eax),%eax
c010995f:	89 04 24             	mov    %eax,(%esp)
c0109962:	e8 f6 01 00 00       	call   c0109b5d <up>
    }
    // 条件不满足，当前进程要执行等待的操作
    down(&(cvp->sem));		// 然后A自己睡眠
c0109967:	8b 45 08             	mov    0x8(%ebp),%eax
c010996a:	89 04 24             	mov    %eax,(%esp)
c010996d:	e8 06 02 00 00       	call   c0109b78 <down>
    cvp->count--;			// 唤醒的时候，会把个数再减去。
c0109972:	8b 45 08             	mov    0x8(%ebp),%eax
c0109975:	8b 40 0c             	mov    0xc(%eax),%eax
c0109978:	8d 50 ff             	lea    -0x1(%eax),%edx
c010997b:	8b 45 08             	mov    0x8(%ebp),%eax
c010997e:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109981:	8b 45 08             	mov    0x8(%ebp),%eax
c0109984:	8b 40 10             	mov    0x10(%eax),%eax
c0109987:	8b 50 18             	mov    0x18(%eax),%edx
c010998a:	8b 45 08             	mov    0x8(%ebp),%eax
c010998d:	8b 40 0c             	mov    0xc(%eax),%eax
c0109990:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109994:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109998:	8b 45 08             	mov    0x8(%ebp),%eax
c010999b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010999f:	c7 04 24 2c f8 10 c0 	movl   $0xc010f82c,(%esp)
c01099a6:	e8 ad 69 ff ff       	call   c0100358 <cprintf>
}
c01099ab:	c9                   	leave  
c01099ac:	c3                   	ret    

c01099ad <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01099ad:	55                   	push   %ebp
c01099ae:	89 e5                	mov    %esp,%ebp
c01099b0:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01099b3:	9c                   	pushf  
c01099b4:	58                   	pop    %eax
c01099b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01099b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01099bb:	25 00 02 00 00       	and    $0x200,%eax
c01099c0:	85 c0                	test   %eax,%eax
c01099c2:	74 0c                	je     c01099d0 <__intr_save+0x23>
        intr_disable();
c01099c4:	e8 69 86 ff ff       	call   c0102032 <intr_disable>
        return 1;
c01099c9:	b8 01 00 00 00       	mov    $0x1,%eax
c01099ce:	eb 05                	jmp    c01099d5 <__intr_save+0x28>
    }
    return 0;
c01099d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01099d5:	c9                   	leave  
c01099d6:	c3                   	ret    

c01099d7 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01099d7:	55                   	push   %ebp
c01099d8:	89 e5                	mov    %esp,%ebp
c01099da:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01099dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01099e1:	74 05                	je     c01099e8 <__intr_restore+0x11>
        intr_enable();
c01099e3:	e8 44 86 ff ff       	call   c010202c <intr_enable>
    }
}
c01099e8:	c9                   	leave  
c01099e9:	c3                   	ret    

c01099ea <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c01099ea:	55                   	push   %ebp
c01099eb:	89 e5                	mov    %esp,%ebp
c01099ed:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c01099f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01099f3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01099f6:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c01099f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099fb:	83 c0 04             	add    $0x4,%eax
c01099fe:	89 04 24             	mov    %eax,(%esp)
c0109a01:	e8 33 02 00 00       	call   c0109c39 <wait_queue_init>
}
c0109a06:	c9                   	leave  
c0109a07:	c3                   	ret    

c0109a08 <__up>:

// 信号年量的V操作， Thread B干的事情
static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109a08:	55                   	push   %ebp
c0109a09:	89 e5                	mov    %esp,%ebp
c0109a0b:	83 ec 28             	sub    $0x28,%esp
    // 临界区
	bool intr_flag;
    local_intr_save(intr_flag);
c0109a0e:	e8 9a ff ff ff       	call   c01099ad <__intr_save>
c0109a13:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
    	// 如果等待队列为空，就说明没有等待唤醒的进程。所以直接让信号量的值+1
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a19:	83 c0 04             	add    $0x4,%eax
c0109a1c:	89 04 24             	mov    %eax,(%esp)
c0109a1f:	e8 69 04 00 00       	call   c0109e8d <wait_queue_first>
c0109a24:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109a27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109a2b:	75 0f                	jne    c0109a3c <__up+0x34>
            sem->value ++;
c0109a2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a30:	8b 00                	mov    (%eax),%eax
c0109a32:	8d 50 01             	lea    0x1(%eax),%edx
c0109a35:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a38:	89 10                	mov    %edx,(%eax)
c0109a3a:	eb 58                	jmp    c0109a94 <__up+0x8c>
        }
        // 反之，有等待激活的进程，就要去告知它。
        else {
            assert(wait->proc->wait_state == wait_state);
c0109a3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a3f:	8b 00                	mov    (%eax),%eax
c0109a41:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109a47:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109a4a:	74 24                	je     c0109a70 <__up+0x68>
c0109a4c:	c7 44 24 0c 70 f8 10 	movl   $0xc010f870,0xc(%esp)
c0109a53:	c0 
c0109a54:	c7 44 24 08 95 f8 10 	movl   $0xc010f895,0x8(%esp)
c0109a5b:	c0 
c0109a5c:	c7 44 24 04 1d 00 00 	movl   $0x1d,0x4(%esp)
c0109a63:	00 
c0109a64:	c7 04 24 aa f8 10 c0 	movl   $0xc010f8aa,(%esp)
c0109a6b:	e8 6a 73 ff ff       	call   c0100dda <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);	// 唤醒等待队列 即Thread A
c0109a70:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a73:	8d 50 04             	lea    0x4(%eax),%edx
c0109a76:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109a7d:	00 
c0109a7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a81:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a8c:	89 14 24             	mov    %edx,(%esp)
c0109a8f:	e8 95 04 00 00       	call   c0109f29 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a97:	89 04 24             	mov    %eax,(%esp)
c0109a9a:	e8 38 ff ff ff       	call   c01099d7 <__intr_restore>
    // 临界区
}
c0109a9f:	c9                   	leave  
c0109aa0:	c3                   	ret    

c0109aa1 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109aa1:	55                   	push   %ebp
c0109aa2:	89 e5                	mov    %esp,%ebp
c0109aa4:	83 ec 38             	sub    $0x38,%esp
    // 临界区 start
	bool intr_flag;
    local_intr_save(intr_flag);
c0109aa7:	e8 01 ff ff ff       	call   c01099ad <__intr_save>
c0109aac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 如果信号量还有（>0），就表示可以正常使用资源，不需要等待。
    if (sem->value > 0) {
c0109aaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ab2:	8b 00                	mov    (%eax),%eax
c0109ab4:	85 c0                	test   %eax,%eax
c0109ab6:	7e 22                	jle    c0109ada <__down+0x39>
        sem->value --;
c0109ab8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109abb:	8b 00                	mov    (%eax),%eax
c0109abd:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109ac0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ac3:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109ac5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ac8:	89 04 24             	mov    %eax,(%esp)
c0109acb:	e8 07 ff ff ff       	call   c01099d7 <__intr_restore>
        return 0;
c0109ad0:	b8 00 00 00 00       	mov    $0x0,%eax
c0109ad5:	e9 81 00 00 00       	jmp    c0109b5b <__down+0xba>
    }
    // 如果信号量没有了，就需要将自身进程休眠，等待Thread B唤醒
    wait_t __wait, *wait = &__wait;							// 将进程休眠
c0109ada:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109add:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);	// 将当前进程 Thread A 放入等待队列。
c0109ae0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae3:	8d 50 04             	lea    0x4(%eax),%edx
c0109ae6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ae9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109aed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109af0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109af4:	89 14 24             	mov    %edx,(%esp)
c0109af7:	e8 34 05 00 00       	call   c010a030 <wait_current_set>
    local_intr_restore(intr_flag);
c0109afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109aff:	89 04 24             	mov    %eax,(%esp)
c0109b02:	e8 d0 fe ff ff       	call   c01099d7 <__intr_restore>
    // 临界区 over

    schedule();	// 休眠后，执行调度，允许调度器唤醒任意一个处在sleep状态的进程。
c0109b07:	e8 9c 28 00 00       	call   c010c3a8 <schedule>

    local_intr_save(intr_flag);
c0109b0c:	e8 9c fe ff ff       	call   c01099ad <__intr_save>
c0109b11:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);		// 函数的作用是不断的扫描等待队列，发现合适机会（在信号量中是指信号量 >0）就唤醒Thread A进程（就是刚才让其休眠的进程）
c0109b14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b17:	89 04 24             	mov    %eax,(%esp)
c0109b1a:	e8 e2 03 00 00       	call   c0109f01 <wait_in_queue>
c0109b1f:	85 c0                	test   %eax,%eax
c0109b21:	74 15                	je     c0109b38 <__down+0x97>
c0109b23:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b26:	8d 50 04             	lea    0x4(%eax),%edx
c0109b29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b30:	89 14 24             	mov    %edx,(%esp)
c0109b33:	e8 c4 01 00 00       	call   c0109cfc <wait_queue_del>
    local_intr_restore(intr_flag);
c0109b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b3b:	89 04 24             	mov    %eax,(%esp)
c0109b3e:	e8 94 fe ff ff       	call   c01099d7 <__intr_restore>

    // 如果被唤醒的进程的唤醒原因和休眠原因不同，就交给上层应用去判断。看究竟是合理的还是存错误，这不是我们在同步机制中研究的问题。
    if (wait->wakeup_flags != wait_state) {
c0109b43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b46:	8b 40 04             	mov    0x4(%eax),%eax
c0109b49:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109b4c:	74 08                	je     c0109b56 <__down+0xb5>
        return wait->wakeup_flags;
c0109b4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b51:	8b 40 04             	mov    0x4(%eax),%eax
c0109b54:	eb 05                	jmp    c0109b5b <__down+0xba>
    }
    return 0;
c0109b56:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109b5b:	c9                   	leave  
c0109b5c:	c3                   	ret    

c0109b5d <up>:

void
up(semaphore_t *sem) {
c0109b5d:	55                   	push   %ebp
c0109b5e:	89 e5                	mov    %esp,%ebp
c0109b60:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109b63:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109b6a:	00 
c0109b6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b6e:	89 04 24             	mov    %eax,(%esp)
c0109b71:	e8 92 fe ff ff       	call   c0109a08 <__up>
}
c0109b76:	c9                   	leave  
c0109b77:	c3                   	ret    

c0109b78 <down>:

void
down(semaphore_t *sem) {
c0109b78:	55                   	push   %ebp
c0109b79:	89 e5                	mov    %esp,%ebp
c0109b7b:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109b7e:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109b85:	00 
c0109b86:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b89:	89 04 24             	mov    %eax,(%esp)
c0109b8c:	e8 10 ff ff ff       	call   c0109aa1 <__down>
c0109b91:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109b94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109b98:	74 24                	je     c0109bbe <down+0x46>
c0109b9a:	c7 44 24 0c ba f8 10 	movl   $0xc010f8ba,0xc(%esp)
c0109ba1:	c0 
c0109ba2:	c7 44 24 08 95 f8 10 	movl   $0xc010f895,0x8(%esp)
c0109ba9:	c0 
c0109baa:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c0109bb1:	00 
c0109bb2:	c7 04 24 aa f8 10 c0 	movl   $0xc010f8aa,(%esp)
c0109bb9:	e8 1c 72 ff ff       	call   c0100dda <__panic>
}
c0109bbe:	c9                   	leave  
c0109bbf:	c3                   	ret    

c0109bc0 <try_down>:

bool
try_down(semaphore_t *sem) {
c0109bc0:	55                   	push   %ebp
c0109bc1:	89 e5                	mov    %esp,%ebp
c0109bc3:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109bc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109bcd:	e8 db fd ff ff       	call   c01099ad <__intr_save>
c0109bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109bd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd8:	8b 00                	mov    (%eax),%eax
c0109bda:	85 c0                	test   %eax,%eax
c0109bdc:	7e 14                	jle    c0109bf2 <try_down+0x32>
        sem->value --, ret = 1;
c0109bde:	8b 45 08             	mov    0x8(%ebp),%eax
c0109be1:	8b 00                	mov    (%eax),%eax
c0109be3:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109be6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109be9:	89 10                	mov    %edx,(%eax)
c0109beb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109bf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bf5:	89 04 24             	mov    %eax,(%esp)
c0109bf8:	e8 da fd ff ff       	call   c01099d7 <__intr_restore>
    return ret;
c0109bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109c00:	c9                   	leave  
c0109c01:	c3                   	ret    

c0109c02 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109c02:	55                   	push   %ebp
c0109c03:	89 e5                	mov    %esp,%ebp
c0109c05:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109c08:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c0b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109c0e:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109c10:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c13:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109c1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c1d:	83 c0 0c             	add    $0xc,%eax
c0109c20:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109c23:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c26:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109c29:	89 50 04             	mov    %edx,0x4(%eax)
c0109c2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c2f:	8b 50 04             	mov    0x4(%eax),%edx
c0109c32:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c35:	89 10                	mov    %edx,(%eax)
}
c0109c37:	c9                   	leave  
c0109c38:	c3                   	ret    

c0109c39 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109c39:	55                   	push   %ebp
c0109c3a:	89 e5                	mov    %esp,%ebp
c0109c3c:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109c3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c42:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109c45:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c48:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109c4b:	89 50 04             	mov    %edx,0x4(%eax)
c0109c4e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c51:	8b 50 04             	mov    0x4(%eax),%edx
c0109c54:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c57:	89 10                	mov    %edx,(%eax)
}
c0109c59:	c9                   	leave  
c0109c5a:	c3                   	ret    

c0109c5b <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109c5b:	55                   	push   %ebp
c0109c5c:	89 e5                	mov    %esp,%ebp
c0109c5e:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109c61:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c64:	83 c0 0c             	add    $0xc,%eax
c0109c67:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109c6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c6d:	8b 40 04             	mov    0x4(%eax),%eax
c0109c70:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109c73:	0f 94 c0             	sete   %al
c0109c76:	0f b6 c0             	movzbl %al,%eax
c0109c79:	85 c0                	test   %eax,%eax
c0109c7b:	74 09                	je     c0109c86 <wait_queue_add+0x2b>
c0109c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c80:	8b 00                	mov    (%eax),%eax
c0109c82:	85 c0                	test   %eax,%eax
c0109c84:	75 24                	jne    c0109caa <wait_queue_add+0x4f>
c0109c86:	c7 44 24 0c c8 f8 10 	movl   $0xc010f8c8,0xc(%esp)
c0109c8d:	c0 
c0109c8e:	c7 44 24 08 fd f8 10 	movl   $0xc010f8fd,0x8(%esp)
c0109c95:	c0 
c0109c96:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109c9d:	00 
c0109c9e:	c7 04 24 12 f9 10 c0 	movl   $0xc010f912,(%esp)
c0109ca5:	e8 30 71 ff ff       	call   c0100dda <__panic>
    wait->wait_queue = queue;
c0109caa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cad:	8b 55 08             	mov    0x8(%ebp),%edx
c0109cb0:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109cb3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cb6:	8d 50 0c             	lea    0xc(%eax),%edx
c0109cb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109cbf:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109cc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cc5:	8b 00                	mov    (%eax),%eax
c0109cc7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109cca:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109ccd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109cd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cd3:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109cd9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109cdc:	89 10                	mov    %edx,(%eax)
c0109cde:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ce1:	8b 10                	mov    (%eax),%edx
c0109ce3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ce6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109ce9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109cec:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109cef:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109cf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109cf5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109cf8:	89 10                	mov    %edx,(%eax)
}
c0109cfa:	c9                   	leave  
c0109cfb:	c3                   	ret    

c0109cfc <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109cfc:	55                   	push   %ebp
c0109cfd:	89 e5                	mov    %esp,%ebp
c0109cff:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109d02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d05:	83 c0 0c             	add    $0xc,%eax
c0109d08:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d0e:	8b 40 04             	mov    0x4(%eax),%eax
c0109d11:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109d14:	0f 94 c0             	sete   %al
c0109d17:	0f b6 c0             	movzbl %al,%eax
c0109d1a:	85 c0                	test   %eax,%eax
c0109d1c:	75 0b                	jne    c0109d29 <wait_queue_del+0x2d>
c0109d1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d21:	8b 40 08             	mov    0x8(%eax),%eax
c0109d24:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109d27:	74 24                	je     c0109d4d <wait_queue_del+0x51>
c0109d29:	c7 44 24 0c 24 f9 10 	movl   $0xc010f924,0xc(%esp)
c0109d30:	c0 
c0109d31:	c7 44 24 08 fd f8 10 	movl   $0xc010f8fd,0x8(%esp)
c0109d38:	c0 
c0109d39:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109d40:	00 
c0109d41:	c7 04 24 12 f9 10 c0 	movl   $0xc010f912,(%esp)
c0109d48:	e8 8d 70 ff ff       	call   c0100dda <__panic>
    list_del_init(&(wait->wait_link));
c0109d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d50:	83 c0 0c             	add    $0xc,%eax
c0109d53:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d59:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109d5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d5f:	8b 40 04             	mov    0x4(%eax),%eax
c0109d62:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109d65:	8b 12                	mov    (%edx),%edx
c0109d67:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109d6a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109d6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d70:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109d73:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109d76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d79:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109d7c:	89 10                	mov    %edx,(%eax)
c0109d7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d81:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109d84:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109d87:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109d8a:	89 50 04             	mov    %edx,0x4(%eax)
c0109d8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109d90:	8b 50 04             	mov    0x4(%eax),%edx
c0109d93:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109d96:	89 10                	mov    %edx,(%eax)
}
c0109d98:	c9                   	leave  
c0109d99:	c3                   	ret    

c0109d9a <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109d9a:	55                   	push   %ebp
c0109d9b:	89 e5                	mov    %esp,%ebp
c0109d9d:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109da0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109da3:	83 c0 0c             	add    $0xc,%eax
c0109da6:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109da9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dac:	8b 40 04             	mov    0x4(%eax),%eax
c0109daf:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109db2:	0f 94 c0             	sete   %al
c0109db5:	0f b6 c0             	movzbl %al,%eax
c0109db8:	85 c0                	test   %eax,%eax
c0109dba:	75 0b                	jne    c0109dc7 <wait_queue_next+0x2d>
c0109dbc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dbf:	8b 40 08             	mov    0x8(%eax),%eax
c0109dc2:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109dc5:	74 24                	je     c0109deb <wait_queue_next+0x51>
c0109dc7:	c7 44 24 0c 24 f9 10 	movl   $0xc010f924,0xc(%esp)
c0109dce:	c0 
c0109dcf:	c7 44 24 08 fd f8 10 	movl   $0xc010f8fd,0x8(%esp)
c0109dd6:	c0 
c0109dd7:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109dde:	00 
c0109ddf:	c7 04 24 12 f9 10 c0 	movl   $0xc010f912,(%esp)
c0109de6:	e8 ef 6f ff ff       	call   c0100dda <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109deb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dee:	83 c0 0c             	add    $0xc,%eax
c0109df1:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109df4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109df7:	8b 40 04             	mov    0x4(%eax),%eax
c0109dfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109dfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109e03:	74 08                	je     c0109e0d <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109e05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e08:	83 e8 0c             	sub    $0xc,%eax
c0109e0b:	eb 05                	jmp    c0109e12 <wait_queue_next+0x78>
    }
    return NULL;
c0109e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e12:	c9                   	leave  
c0109e13:	c3                   	ret    

c0109e14 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109e14:	55                   	push   %ebp
c0109e15:	89 e5                	mov    %esp,%ebp
c0109e17:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109e1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e1d:	83 c0 0c             	add    $0xc,%eax
c0109e20:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109e23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e26:	8b 40 04             	mov    0x4(%eax),%eax
c0109e29:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109e2c:	0f 94 c0             	sete   %al
c0109e2f:	0f b6 c0             	movzbl %al,%eax
c0109e32:	85 c0                	test   %eax,%eax
c0109e34:	75 0b                	jne    c0109e41 <wait_queue_prev+0x2d>
c0109e36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e39:	8b 40 08             	mov    0x8(%eax),%eax
c0109e3c:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109e3f:	74 24                	je     c0109e65 <wait_queue_prev+0x51>
c0109e41:	c7 44 24 0c 24 f9 10 	movl   $0xc010f924,0xc(%esp)
c0109e48:	c0 
c0109e49:	c7 44 24 08 fd f8 10 	movl   $0xc010f8fd,0x8(%esp)
c0109e50:	c0 
c0109e51:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109e58:	00 
c0109e59:	c7 04 24 12 f9 10 c0 	movl   $0xc010f912,(%esp)
c0109e60:	e8 75 6f ff ff       	call   c0100dda <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109e65:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e68:	83 c0 0c             	add    $0xc,%eax
c0109e6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109e6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e71:	8b 00                	mov    (%eax),%eax
c0109e73:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109e76:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109e7c:	74 08                	je     c0109e86 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109e7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e81:	83 e8 0c             	sub    $0xc,%eax
c0109e84:	eb 05                	jmp    c0109e8b <wait_queue_prev+0x77>
    }
    return NULL;
c0109e86:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e8b:	c9                   	leave  
c0109e8c:	c3                   	ret    

c0109e8d <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109e8d:	55                   	push   %ebp
c0109e8e:	89 e5                	mov    %esp,%ebp
c0109e90:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109e93:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e96:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109e99:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109e9c:	8b 40 04             	mov    0x4(%eax),%eax
c0109e9f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109ea2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ea5:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109ea8:	74 08                	je     c0109eb2 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109eaa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ead:	83 e8 0c             	sub    $0xc,%eax
c0109eb0:	eb 05                	jmp    c0109eb7 <wait_queue_first+0x2a>
    }
    return NULL;
c0109eb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109eb7:	c9                   	leave  
c0109eb8:	c3                   	ret    

c0109eb9 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109eb9:	55                   	push   %ebp
c0109eba:	89 e5                	mov    %esp,%ebp
c0109ebc:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109ebf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ec2:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109ec5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109ec8:	8b 00                	mov    (%eax),%eax
c0109eca:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109ecd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ed0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109ed3:	74 08                	je     c0109edd <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109ed5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ed8:	83 e8 0c             	sub    $0xc,%eax
c0109edb:	eb 05                	jmp    c0109ee2 <wait_queue_last+0x29>
    }
    return NULL;
c0109edd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109ee2:	c9                   	leave  
c0109ee3:	c3                   	ret    

c0109ee4 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109ee4:	55                   	push   %ebp
c0109ee5:	89 e5                	mov    %esp,%ebp
c0109ee7:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109eea:	8b 45 08             	mov    0x8(%ebp),%eax
c0109eed:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109ef0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ef3:	8b 40 04             	mov    0x4(%eax),%eax
c0109ef6:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109ef9:	0f 94 c0             	sete   %al
c0109efc:	0f b6 c0             	movzbl %al,%eax
}
c0109eff:	c9                   	leave  
c0109f00:	c3                   	ret    

c0109f01 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0109f01:	55                   	push   %ebp
c0109f02:	89 e5                	mov    %esp,%ebp
c0109f04:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0109f07:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f0a:	83 c0 0c             	add    $0xc,%eax
c0109f0d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109f10:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f13:	8b 40 04             	mov    0x4(%eax),%eax
c0109f16:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109f19:	0f 94 c0             	sete   %al
c0109f1c:	0f b6 c0             	movzbl %al,%eax
c0109f1f:	85 c0                	test   %eax,%eax
c0109f21:	0f 94 c0             	sete   %al
c0109f24:	0f b6 c0             	movzbl %al,%eax
}
c0109f27:	c9                   	leave  
c0109f28:	c3                   	ret    

c0109f29 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0109f29:	55                   	push   %ebp
c0109f2a:	89 e5                	mov    %esp,%ebp
c0109f2c:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c0109f2f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109f33:	74 12                	je     c0109f47 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c0109f35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f38:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f3f:	89 04 24             	mov    %eax,(%esp)
c0109f42:	e8 b5 fd ff ff       	call   c0109cfc <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c0109f47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f4a:	8b 55 10             	mov    0x10(%ebp),%edx
c0109f4d:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0109f50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f53:	8b 00                	mov    (%eax),%eax
c0109f55:	89 04 24             	mov    %eax,(%esp)
c0109f58:	e8 af 23 00 00       	call   c010c30c <wakeup_proc>
}
c0109f5d:	c9                   	leave  
c0109f5e:	c3                   	ret    

c0109f5f <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109f5f:	55                   	push   %ebp
c0109f60:	89 e5                	mov    %esp,%ebp
c0109f62:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109f65:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f68:	89 04 24             	mov    %eax,(%esp)
c0109f6b:	e8 1d ff ff ff       	call   c0109e8d <wait_queue_first>
c0109f70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109f73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f77:	74 20                	je     c0109f99 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c0109f79:	8b 45 10             	mov    0x10(%ebp),%eax
c0109f7c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109f80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f83:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f91:	89 04 24             	mov    %eax,(%esp)
c0109f94:	e8 90 ff ff ff       	call   c0109f29 <wakeup_wait>
    }
}
c0109f99:	c9                   	leave  
c0109f9a:	c3                   	ret    

c0109f9b <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109f9b:	55                   	push   %ebp
c0109f9c:	89 e5                	mov    %esp,%ebp
c0109f9e:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109fa1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fa4:	89 04 24             	mov    %eax,(%esp)
c0109fa7:	e8 e1 fe ff ff       	call   c0109e8d <wait_queue_first>
c0109fac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109faf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fb3:	74 79                	je     c010a02e <wakeup_queue+0x93>
        if (del) {
c0109fb5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109fb9:	74 37                	je     c0109ff2 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c0109fbb:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109fc2:	00 
c0109fc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fc6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109fca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fcd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109fd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fd4:	89 04 24             	mov    %eax,(%esp)
c0109fd7:	e8 4d ff ff ff       	call   c0109f29 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c0109fdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fdf:	89 04 24             	mov    %eax,(%esp)
c0109fe2:	e8 a6 fe ff ff       	call   c0109e8d <wait_queue_first>
c0109fe7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109fea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fee:	75 cb                	jne    c0109fbb <wakeup_queue+0x20>
c0109ff0:	eb 3c                	jmp    c010a02e <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c0109ff2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109ff9:	00 
c0109ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ffd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a001:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a004:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a008:	8b 45 08             	mov    0x8(%ebp),%eax
c010a00b:	89 04 24             	mov    %eax,(%esp)
c010a00e:	e8 16 ff ff ff       	call   c0109f29 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a013:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a016:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a01a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a01d:	89 04 24             	mov    %eax,(%esp)
c010a020:	e8 75 fd ff ff       	call   c0109d9a <wait_queue_next>
c010a025:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a028:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a02c:	75 c4                	jne    c0109ff2 <wakeup_queue+0x57>
        }
    }
}
c010a02e:	c9                   	leave  
c010a02f:	c3                   	ret    

c010a030 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a030:	55                   	push   %ebp
c010a031:	89 e5                	mov    %esp,%ebp
c010a033:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a036:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a03b:	85 c0                	test   %eax,%eax
c010a03d:	75 24                	jne    c010a063 <wait_current_set+0x33>
c010a03f:	c7 44 24 0c 61 f9 10 	movl   $0xc010f961,0xc(%esp)
c010a046:	c0 
c010a047:	c7 44 24 08 fd f8 10 	movl   $0xc010f8fd,0x8(%esp)
c010a04e:	c0 
c010a04f:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a056:	00 
c010a057:	c7 04 24 12 f9 10 c0 	movl   $0xc010f912,(%esp)
c010a05e:	e8 77 6d ff ff       	call   c0100dda <__panic>
    wait_init(wait, current);
c010a063:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a068:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a06c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a06f:	89 04 24             	mov    %eax,(%esp)
c010a072:	e8 8b fb ff ff       	call   c0109c02 <wait_init>
    current->state = PROC_SLEEPING;
c010a077:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a07c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a082:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a087:	8b 55 10             	mov    0x10(%ebp),%edx
c010a08a:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a090:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a093:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a097:	8b 45 08             	mov    0x8(%ebp),%eax
c010a09a:	89 04 24             	mov    %eax,(%esp)
c010a09d:	e8 b9 fb ff ff       	call   c0109c5b <wait_queue_add>
}
c010a0a2:	c9                   	leave  
c010a0a3:	c3                   	ret    

c010a0a4 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a0a4:	55                   	push   %ebp
c010a0a5:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a0a7:	8b 55 08             	mov    0x8(%ebp),%edx
c010a0aa:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010a0af:	29 c2                	sub    %eax,%edx
c010a0b1:	89 d0                	mov    %edx,%eax
c010a0b3:	c1 f8 05             	sar    $0x5,%eax
}
c010a0b6:	5d                   	pop    %ebp
c010a0b7:	c3                   	ret    

c010a0b8 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a0b8:	55                   	push   %ebp
c010a0b9:	89 e5                	mov    %esp,%ebp
c010a0bb:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a0be:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0c1:	89 04 24             	mov    %eax,(%esp)
c010a0c4:	e8 db ff ff ff       	call   c010a0a4 <page2ppn>
c010a0c9:	c1 e0 0c             	shl    $0xc,%eax
}
c010a0cc:	c9                   	leave  
c010a0cd:	c3                   	ret    

c010a0ce <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010a0ce:	55                   	push   %ebp
c010a0cf:	89 e5                	mov    %esp,%ebp
c010a0d1:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a0d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0d7:	89 04 24             	mov    %eax,(%esp)
c010a0da:	e8 d9 ff ff ff       	call   c010a0b8 <page2pa>
c010a0df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a0e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0e5:	c1 e8 0c             	shr    $0xc,%eax
c010a0e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a0eb:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010a0f0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a0f3:	72 23                	jb     c010a118 <page2kva+0x4a>
c010a0f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0f8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a0fc:	c7 44 24 08 74 f9 10 	movl   $0xc010f974,0x8(%esp)
c010a103:	c0 
c010a104:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a10b:	00 
c010a10c:	c7 04 24 97 f9 10 c0 	movl   $0xc010f997,(%esp)
c010a113:	e8 c2 6c ff ff       	call   c0100dda <__panic>
c010a118:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a11b:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a120:	c9                   	leave  
c010a121:	c3                   	ret    

c010a122 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010a122:	55                   	push   %ebp
c010a123:	89 e5                	mov    %esp,%ebp
c010a125:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010a128:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a12f:	e8 f6 79 ff ff       	call   c0101b2a <ide_device_valid>
c010a134:	85 c0                	test   %eax,%eax
c010a136:	75 1c                	jne    c010a154 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010a138:	c7 44 24 08 a5 f9 10 	movl   $0xc010f9a5,0x8(%esp)
c010a13f:	c0 
c010a140:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010a147:	00 
c010a148:	c7 04 24 bf f9 10 c0 	movl   $0xc010f9bf,(%esp)
c010a14f:	e8 86 6c ff ff       	call   c0100dda <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010a154:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a15b:	e8 09 7a ff ff       	call   c0101b69 <ide_device_size>
c010a160:	c1 e8 03             	shr    $0x3,%eax
c010a163:	a3 9c 55 1c c0       	mov    %eax,0xc01c559c
}
c010a168:	c9                   	leave  
c010a169:	c3                   	ret    

c010a16a <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010a16a:	55                   	push   %ebp
c010a16b:	89 e5                	mov    %esp,%ebp
c010a16d:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a170:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a173:	89 04 24             	mov    %eax,(%esp)
c010a176:	e8 53 ff ff ff       	call   c010a0ce <page2kva>
c010a17b:	8b 55 08             	mov    0x8(%ebp),%edx
c010a17e:	c1 ea 08             	shr    $0x8,%edx
c010a181:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a188:	74 0b                	je     c010a195 <swapfs_read+0x2b>
c010a18a:	8b 15 9c 55 1c c0    	mov    0xc01c559c,%edx
c010a190:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a193:	72 23                	jb     c010a1b8 <swapfs_read+0x4e>
c010a195:	8b 45 08             	mov    0x8(%ebp),%eax
c010a198:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a19c:	c7 44 24 08 d0 f9 10 	movl   $0xc010f9d0,0x8(%esp)
c010a1a3:	c0 
c010a1a4:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a1ab:	00 
c010a1ac:	c7 04 24 bf f9 10 c0 	movl   $0xc010f9bf,(%esp)
c010a1b3:	e8 22 6c ff ff       	call   c0100dda <__panic>
c010a1b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a1bb:	c1 e2 03             	shl    $0x3,%edx
c010a1be:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a1c5:	00 
c010a1c6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a1ca:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a1ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a1d5:	e8 ce 79 ff ff       	call   c0101ba8 <ide_read_secs>
}
c010a1da:	c9                   	leave  
c010a1db:	c3                   	ret    

c010a1dc <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010a1dc:	55                   	push   %ebp
c010a1dd:	89 e5                	mov    %esp,%ebp
c010a1df:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a1e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1e5:	89 04 24             	mov    %eax,(%esp)
c010a1e8:	e8 e1 fe ff ff       	call   c010a0ce <page2kva>
c010a1ed:	8b 55 08             	mov    0x8(%ebp),%edx
c010a1f0:	c1 ea 08             	shr    $0x8,%edx
c010a1f3:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a1f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1fa:	74 0b                	je     c010a207 <swapfs_write+0x2b>
c010a1fc:	8b 15 9c 55 1c c0    	mov    0xc01c559c,%edx
c010a202:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a205:	72 23                	jb     c010a22a <swapfs_write+0x4e>
c010a207:	8b 45 08             	mov    0x8(%ebp),%eax
c010a20a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a20e:	c7 44 24 08 d0 f9 10 	movl   $0xc010f9d0,0x8(%esp)
c010a215:	c0 
c010a216:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010a21d:	00 
c010a21e:	c7 04 24 bf f9 10 c0 	movl   $0xc010f9bf,(%esp)
c010a225:	e8 b0 6b ff ff       	call   c0100dda <__panic>
c010a22a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a22d:	c1 e2 03             	shl    $0x3,%edx
c010a230:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a237:	00 
c010a238:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a23c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a240:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a247:	e8 9e 7b ff ff       	call   c0101dea <ide_write_secs>
}
c010a24c:	c9                   	leave  
c010a24d:	c3                   	ret    

c010a24e <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010a24e:	52                   	push   %edx
    call *%ebx              # call fn
c010a24f:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010a251:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010a252:	e8 ab 0c 00 00       	call   c010af02 <do_exit>

c010a257 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010a257:	55                   	push   %ebp
c010a258:	89 e5                	mov    %esp,%ebp
c010a25a:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010a25d:	8b 55 10             	mov    0x10(%ebp),%edx
c010a260:	8b 45 08             	mov    0x8(%ebp),%eax
c010a263:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010a265:	8b 45 08             	mov    0x8(%ebp),%eax
c010a268:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a26b:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010a26e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a271:	83 c0 08             	add    $0x8,%eax
c010a274:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a277:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a27a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a27d:	89 50 04             	mov    %edx,0x4(%eax)
c010a280:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a283:	8b 50 04             	mov    0x4(%eax),%edx
c010a286:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a289:	89 10                	mov    %edx,(%eax)
    return timer;
c010a28b:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010a28e:	c9                   	leave  
c010a28f:	c3                   	ret    

c010a290 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a290:	55                   	push   %ebp
c010a291:	89 e5                	mov    %esp,%ebp
c010a293:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a296:	9c                   	pushf  
c010a297:	58                   	pop    %eax
c010a298:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a29b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a29e:	25 00 02 00 00       	and    $0x200,%eax
c010a2a3:	85 c0                	test   %eax,%eax
c010a2a5:	74 0c                	je     c010a2b3 <__intr_save+0x23>
        intr_disable();
c010a2a7:	e8 86 7d ff ff       	call   c0102032 <intr_disable>
        return 1;
c010a2ac:	b8 01 00 00 00       	mov    $0x1,%eax
c010a2b1:	eb 05                	jmp    c010a2b8 <__intr_save+0x28>
    }
    return 0;
c010a2b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a2b8:	c9                   	leave  
c010a2b9:	c3                   	ret    

c010a2ba <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a2ba:	55                   	push   %ebp
c010a2bb:	89 e5                	mov    %esp,%ebp
c010a2bd:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a2c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a2c4:	74 05                	je     c010a2cb <__intr_restore+0x11>
        intr_enable();
c010a2c6:	e8 61 7d ff ff       	call   c010202c <intr_enable>
    }
}
c010a2cb:	c9                   	leave  
c010a2cc:	c3                   	ret    

c010a2cd <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a2cd:	55                   	push   %ebp
c010a2ce:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a2d0:	8b 55 08             	mov    0x8(%ebp),%edx
c010a2d3:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010a2d8:	29 c2                	sub    %eax,%edx
c010a2da:	89 d0                	mov    %edx,%eax
c010a2dc:	c1 f8 05             	sar    $0x5,%eax
}
c010a2df:	5d                   	pop    %ebp
c010a2e0:	c3                   	ret    

c010a2e1 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a2e1:	55                   	push   %ebp
c010a2e2:	89 e5                	mov    %esp,%ebp
c010a2e4:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a2e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2ea:	89 04 24             	mov    %eax,(%esp)
c010a2ed:	e8 db ff ff ff       	call   c010a2cd <page2ppn>
c010a2f2:	c1 e0 0c             	shl    $0xc,%eax
}
c010a2f5:	c9                   	leave  
c010a2f6:	c3                   	ret    

c010a2f7 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010a2f7:	55                   	push   %ebp
c010a2f8:	89 e5                	mov    %esp,%ebp
c010a2fa:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a2fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a300:	c1 e8 0c             	shr    $0xc,%eax
c010a303:	89 c2                	mov    %eax,%edx
c010a305:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010a30a:	39 c2                	cmp    %eax,%edx
c010a30c:	72 1c                	jb     c010a32a <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a30e:	c7 44 24 08 f0 f9 10 	movl   $0xc010f9f0,0x8(%esp)
c010a315:	c0 
c010a316:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010a31d:	00 
c010a31e:	c7 04 24 0f fa 10 c0 	movl   $0xc010fa0f,(%esp)
c010a325:	e8 b0 6a ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c010a32a:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010a32f:	8b 55 08             	mov    0x8(%ebp),%edx
c010a332:	c1 ea 0c             	shr    $0xc,%edx
c010a335:	c1 e2 05             	shl    $0x5,%edx
c010a338:	01 d0                	add    %edx,%eax
}
c010a33a:	c9                   	leave  
c010a33b:	c3                   	ret    

c010a33c <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010a33c:	55                   	push   %ebp
c010a33d:	89 e5                	mov    %esp,%ebp
c010a33f:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a342:	8b 45 08             	mov    0x8(%ebp),%eax
c010a345:	89 04 24             	mov    %eax,(%esp)
c010a348:	e8 94 ff ff ff       	call   c010a2e1 <page2pa>
c010a34d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a350:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a353:	c1 e8 0c             	shr    $0xc,%eax
c010a356:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a359:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010a35e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a361:	72 23                	jb     c010a386 <page2kva+0x4a>
c010a363:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a366:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a36a:	c7 44 24 08 20 fa 10 	movl   $0xc010fa20,0x8(%esp)
c010a371:	c0 
c010a372:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a379:	00 
c010a37a:	c7 04 24 0f fa 10 c0 	movl   $0xc010fa0f,(%esp)
c010a381:	e8 54 6a ff ff       	call   c0100dda <__panic>
c010a386:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a389:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a38e:	c9                   	leave  
c010a38f:	c3                   	ret    

c010a390 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010a390:	55                   	push   %ebp
c010a391:	89 e5                	mov    %esp,%ebp
c010a393:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a396:	8b 45 08             	mov    0x8(%ebp),%eax
c010a399:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a39c:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a3a3:	77 23                	ja     c010a3c8 <kva2page+0x38>
c010a3a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a3ac:	c7 44 24 08 44 fa 10 	movl   $0xc010fa44,0x8(%esp)
c010a3b3:	c0 
c010a3b4:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a3bb:	00 
c010a3bc:	c7 04 24 0f fa 10 c0 	movl   $0xc010fa0f,(%esp)
c010a3c3:	e8 12 6a ff ff       	call   c0100dda <__panic>
c010a3c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3cb:	05 00 00 00 40       	add    $0x40000000,%eax
c010a3d0:	89 04 24             	mov    %eax,(%esp)
c010a3d3:	e8 1f ff ff ff       	call   c010a2f7 <pa2page>
}
c010a3d8:	c9                   	leave  
c010a3d9:	c3                   	ret    

c010a3da <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a3da:	55                   	push   %ebp
c010a3db:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a3dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3e0:	8b 40 18             	mov    0x18(%eax),%eax
c010a3e3:	8d 50 01             	lea    0x1(%eax),%edx
c010a3e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3e9:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a3ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3ef:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a3f2:	5d                   	pop    %ebp
c010a3f3:	c3                   	ret    

c010a3f4 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a3f4:	55                   	push   %ebp
c010a3f5:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a3f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3fa:	8b 40 18             	mov    0x18(%eax),%eax
c010a3fd:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a400:	8b 45 08             	mov    0x8(%ebp),%eax
c010a403:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a406:	8b 45 08             	mov    0x8(%ebp),%eax
c010a409:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a40c:	5d                   	pop    %ebp
c010a40d:	c3                   	ret    

c010a40e <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a40e:	55                   	push   %ebp
c010a40f:	89 e5                	mov    %esp,%ebp
c010a411:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a414:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a418:	74 25                	je     c010a43f <lock_mm+0x31>
        down(&(mm->mm_sem));
c010a41a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a41d:	83 c0 1c             	add    $0x1c,%eax
c010a420:	89 04 24             	mov    %eax,(%esp)
c010a423:	e8 50 f7 ff ff       	call   c0109b78 <down>
        if (current != NULL) {
c010a428:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a42d:	85 c0                	test   %eax,%eax
c010a42f:	74 0e                	je     c010a43f <lock_mm+0x31>
            mm->locked_by = current->pid;
c010a431:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a436:	8b 50 04             	mov    0x4(%eax),%edx
c010a439:	8b 45 08             	mov    0x8(%ebp),%eax
c010a43c:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010a43f:	c9                   	leave  
c010a440:	c3                   	ret    

c010a441 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a441:	55                   	push   %ebp
c010a442:	89 e5                	mov    %esp,%ebp
c010a444:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a447:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a44b:	74 18                	je     c010a465 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010a44d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a450:	83 c0 1c             	add    $0x1c,%eax
c010a453:	89 04 24             	mov    %eax,(%esp)
c010a456:	e8 02 f7 ff ff       	call   c0109b5d <up>
        mm->locked_by = 0;
c010a45b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a45e:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010a465:	c9                   	leave  
c010a466:	c3                   	ret    

c010a467 <alloc_proc>:
void forkrets(struct trapframe *tf);						// 调用 trap/trapentry.S 中的 forkrets:
void switch_to(struct context *from, struct context *to);	// 调用switch.S

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a467:	55                   	push   %ebp
c010a468:	89 e5                	mov    %esp,%ebp
c010a46a:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a46d:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
c010a474:	e8 21 a7 ff ff       	call   c0104b9a <kmalloc>
c010a479:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a47c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a480:	0f 84 5d 01 00 00    	je     c010a5e3 <alloc_proc+0x17c>

    	/*
    	 * 执行的是第一步初始化工作
    	 */

    	proc->state = PROC_UNINIT;							// 设置了进程的状态为“初始”态，这表示进程已经 “出生”了，正在获取资源茁壮成长中；
c010a486:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a489:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    	proc->pid = -1;										// 未分配的进程pid是-1 先设置pid为无效值-1，用户调完alloc_proc函数后再根据实际情况设置pid。
c010a48f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a492:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
															// 设置了进程的pid为-1，这表示进程的“身份证号”还没有办好；

    	proc->cr3 = boot_cr3;								// boot_cr3指向了uCore启动时建立好的内核虚拟空间的页目录表首地址
c010a499:	8b 15 ec 54 1c c0    	mov    0xc01c54ec,%edx
c010a49f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4a2:	89 50 40             	mov    %edx,0x40(%eax)
															// 表明由于该内核线程在内核中运行，故采用为uCore内核已经建立的页表，即设置为在uCore内核页表的起始地址boot_cr3。

    	proc->runs = 0;
c010a4a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4a8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		proc->kstack = 0;									// 记录了分配给该进程/线程的内核栈的位置
c010a4af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4b2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
		proc->need_resched = 0;								// 是否需要调度
c010a4b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4bc:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
		proc->parent = NULL;								// 父进程
c010a4c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4c6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
		proc->mm = 0;									// 虚拟内存结构体（lab4实验可忽略）
c010a4cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4d0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
		 * 该函数用于清空一个结构体中所有的成员变量，下面解释三个参数：
		 * 第一个参数：位置指针，例如数组名、结构体首地址
		 * 第二个参数：替换为什么
		 * memset 函数的第三个参数 n 的值一般用 sizeof() 获取
		 */
		memset(&(proc->context), 0, sizeof(struct context)); 	// 上下文结构体
c010a4d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4da:	83 c0 1c             	add    $0x1c,%eax
c010a4dd:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010a4e4:	00 
c010a4e5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a4ec:	00 
c010a4ed:	89 04 24             	mov    %eax,(%esp)
c010a4f0:	e8 6c 2f 00 00       	call   c010d461 <memset>
		proc->tf = NULL;
c010a4f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4f8:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)

		proc->flags = 0;
c010a4ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a502:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
		// 清空数组就不用sizeof了，第三个参数直接写数组的大小-1即可
		memset(proc->name, 0, PROC_NAME_LEN);
c010a509:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a50c:	83 c0 48             	add    $0x48,%eax
c010a50f:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a516:	00 
c010a517:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a51e:	00 
c010a51f:	89 04 24             	mov    %eax,(%esp)
c010a522:	e8 3a 2f 00 00       	call   c010d461 <memset>

		// LAB5新增的
		proc->wait_state = 0;							// 进程刚开始创建，都是等待状态。原因是因为需要调度。
c010a527:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a52a:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010a531:	00 00 00 
		proc->cptr = proc->yptr = proc->optr = NULL;
c010a534:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a537:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c010a53e:	00 00 00 
c010a541:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a544:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010a54a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a54d:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
c010a553:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a556:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010a55c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a55f:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)

		// LAB6新增
		proc->rq = NULL;                       			// 运行队列，刚alloc进程肯定没有放入任何队列，所以为NULL
c010a565:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a568:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010a56f:	00 00 00 
		// 下面这个 run_link 我刚开始也不知道是什么玩意儿，但我知道 run_link 肯定要在调度函数中使用到。我就去 default_sched.c 里面搜，慢慢就懂用途了。
		// run_link 是个双向链表，list_entry_t 这个结构体我们已经很熟悉了，ucore整个数据结构很多都基于 list_entry_t 。
		// 那我们想啊，你要用这个双向链表，这个数据结构本身已经封装好了，那应该是有函数可以供其初始化的，也就是新创建一个双向链表。
		// lish.h 文件中查下，可以用 list_init(list_entry_t *elm) 这个函数新建。
		list_init(&(proc->run_link));                   // 运行队列的指针
c010a572:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a575:	05 a4 00 00 00       	add    $0xa4,%eax
c010a57a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a57d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a580:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a583:	89 50 04             	mov    %edx,0x4(%eax)
c010a586:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a589:	8b 50 04             	mov    0x4(%eax),%edx
c010a58c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a58f:	89 10                	mov    %edx,(%eax)
		proc->time_slice = 0;                           // 时间片，初始化为0
c010a591:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a594:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010a59b:	00 00 00 
		// 下面这 skew_heap_entry_t lab6_run_pool;
		// lab6_run_pool 又是啥玩意儿？？
		// 点 skew_heap_entry_t 进入看看，指不定和刚才的 list_entry_t 是差不多的东西，或许已经封装好函数了可以直接调用。
		// 果然发现一个函数 skew_heap_init(skew_heap_entry_t *a)
		skew_heap_init(&(proc->lab6_run_pool));			// FOR LAB6 ONLY: the entry in the run pool
c010a59e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5a1:	05 b0 00 00 00       	add    $0xb0,%eax
c010a5a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010a5a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a5ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a5b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a5b5:	8b 10                	mov    (%eax),%edx
c010a5b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a5ba:	89 50 08             	mov    %edx,0x8(%eax)
c010a5bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a5c0:	8b 50 08             	mov    0x8(%eax),%edx
c010a5c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a5c6:	89 50 04             	mov    %edx,0x4(%eax)
		proc->lab6_stride = 0;                       	// 初始化步数
c010a5c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5cc:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010a5d3:	00 00 00 
		proc->lab6_priority = 0;                     	// 初始化优先级
c010a5d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5d9:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010a5e0:	00 00 00 

    }
    return proc;
c010a5e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a5e6:	c9                   	leave  
c010a5e7:	c3                   	ret    

c010a5e8 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a5e8:	55                   	push   %ebp
c010a5e9:	89 e5                	mov    %esp,%ebp
c010a5eb:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a5ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5f1:	83 c0 48             	add    $0x48,%eax
c010a5f4:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a5fb:	00 
c010a5fc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a603:	00 
c010a604:	89 04 24             	mov    %eax,(%esp)
c010a607:	e8 55 2e 00 00       	call   c010d461 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a60c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a60f:	8d 50 48             	lea    0x48(%eax),%edx
c010a612:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a619:	00 
c010a61a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a61d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a621:	89 14 24             	mov    %edx,(%esp)
c010a624:	e8 1a 2f 00 00       	call   c010d543 <memcpy>
}
c010a629:	c9                   	leave  
c010a62a:	c3                   	ret    

c010a62b <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a62b:	55                   	push   %ebp
c010a62c:	89 e5                	mov    %esp,%ebp
c010a62e:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a631:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a638:	00 
c010a639:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a640:	00 
c010a641:	c7 04 24 80 54 1c c0 	movl   $0xc01c5480,(%esp)
c010a648:	e8 14 2e 00 00       	call   c010d461 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a64d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a650:	83 c0 48             	add    $0x48,%eax
c010a653:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a65a:	00 
c010a65b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a65f:	c7 04 24 80 54 1c c0 	movl   $0xc01c5480,(%esp)
c010a666:	e8 d8 2e 00 00       	call   c010d543 <memcpy>
}
c010a66b:	c9                   	leave  
c010a66c:	c3                   	ret    

c010a66d <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a66d:	55                   	push   %ebp
c010a66e:	89 e5                	mov    %esp,%ebp
c010a670:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a673:	8b 45 08             	mov    0x8(%ebp),%eax
c010a676:	83 c0 7c             	add    $0x7c,%eax
c010a679:	c7 45 fc bc 56 1c c0 	movl   $0xc01c56bc,-0x4(%ebp)
c010a680:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010a683:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a686:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a689:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a68c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a68f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a692:	8b 40 04             	mov    0x4(%eax),%eax
c010a695:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a698:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010a69b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a69e:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a6a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a6a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a6a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a6aa:	89 10                	mov    %edx,(%eax)
c010a6ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a6af:	8b 10                	mov    (%eax),%edx
c010a6b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a6b4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a6b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a6ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a6bd:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a6c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a6c3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a6c6:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010a6c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6cb:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a6d2:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010a6d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6d8:	8b 40 14             	mov    0x14(%eax),%eax
c010a6db:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010a6e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6e4:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a6ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6ed:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a6f3:	85 c0                	test   %eax,%eax
c010a6f5:	74 12                	je     c010a709 <set_links+0x9c>
        proc->optr->yptr = proc;
c010a6f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6fa:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a700:	8b 55 08             	mov    0x8(%ebp),%edx
c010a703:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010a709:	8b 45 08             	mov    0x8(%ebp),%eax
c010a70c:	8b 40 14             	mov    0x14(%eax),%eax
c010a70f:	8b 55 08             	mov    0x8(%ebp),%edx
c010a712:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010a718:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010a71d:	83 c0 01             	add    $0x1,%eax
c010a720:	a3 60 54 1c c0       	mov    %eax,0xc01c5460
}
c010a725:	c9                   	leave  
c010a726:	c3                   	ret    

c010a727 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010a727:	55                   	push   %ebp
c010a728:	89 e5                	mov    %esp,%ebp
c010a72a:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010a72d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a730:	83 c0 7c             	add    $0x7c,%eax
c010a733:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a736:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a739:	8b 40 04             	mov    0x4(%eax),%eax
c010a73c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a73f:	8b 12                	mov    (%edx),%edx
c010a741:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a744:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a747:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a74a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a74d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a750:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a753:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a756:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010a758:	8b 45 08             	mov    0x8(%ebp),%eax
c010a75b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a761:	85 c0                	test   %eax,%eax
c010a763:	74 18                	je     c010a77d <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010a765:	8b 45 08             	mov    0x8(%ebp),%eax
c010a768:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a76e:	8b 55 08             	mov    0x8(%ebp),%edx
c010a771:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010a777:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010a77d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a780:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a786:	85 c0                	test   %eax,%eax
c010a788:	74 1a                	je     c010a7a4 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010a78a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a78d:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a793:	8b 55 08             	mov    0x8(%ebp),%edx
c010a796:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a79c:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a7a2:	eb 15                	jmp    c010a7b9 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010a7a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7a7:	8b 40 14             	mov    0x14(%eax),%eax
c010a7aa:	8b 55 08             	mov    0x8(%ebp),%edx
c010a7ad:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a7b3:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010a7b9:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010a7be:	83 e8 01             	sub    $0x1,%eax
c010a7c1:	a3 60 54 1c c0       	mov    %eax,0xc01c5460
}
c010a7c6:	c9                   	leave  
c010a7c7:	c3                   	ret    

c010a7c8 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010a7c8:	55                   	push   %ebp
c010a7c9:	89 e5                	mov    %esp,%ebp
c010a7cb:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010a7ce:	c7 45 f8 bc 56 1c c0 	movl   $0xc01c56bc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010a7d5:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a7da:	83 c0 01             	add    $0x1,%eax
c010a7dd:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
c010a7e2:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a7e7:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a7ec:	7e 0c                	jle    c010a7fa <get_pid+0x32>
        last_pid = 1;
c010a7ee:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
c010a7f5:	00 00 00 
        goto inside;
c010a7f8:	eb 13                	jmp    c010a80d <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010a7fa:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
c010a800:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a805:	39 c2                	cmp    %eax,%edx
c010a807:	0f 8c ac 00 00 00    	jl     c010a8b9 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010a80d:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
c010a814:	20 00 00 
    repeat:
        le = list;
c010a817:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a81a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010a81d:	eb 7f                	jmp    c010a89e <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010a81f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a822:	83 e8 7c             	sub    $0x7c,%eax
c010a825:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010a828:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a82b:	8b 50 04             	mov    0x4(%eax),%edx
c010a82e:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a833:	39 c2                	cmp    %eax,%edx
c010a835:	75 3e                	jne    c010a875 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010a837:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a83c:	83 c0 01             	add    $0x1,%eax
c010a83f:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
c010a844:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
c010a84a:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a84f:	39 c2                	cmp    %eax,%edx
c010a851:	7c 4b                	jl     c010a89e <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010a853:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a858:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a85d:	7e 0a                	jle    c010a869 <get_pid+0xa1>
                        last_pid = 1;
c010a85f:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
c010a866:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010a869:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
c010a870:	20 00 00 
                    goto repeat;
c010a873:	eb a2                	jmp    c010a817 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010a875:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a878:	8b 50 04             	mov    0x4(%eax),%edx
c010a87b:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a880:	39 c2                	cmp    %eax,%edx
c010a882:	7e 1a                	jle    c010a89e <get_pid+0xd6>
c010a884:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a887:	8b 50 04             	mov    0x4(%eax),%edx
c010a88a:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a88f:	39 c2                	cmp    %eax,%edx
c010a891:	7d 0b                	jge    c010a89e <get_pid+0xd6>
                next_safe = proc->pid;
c010a893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a896:	8b 40 04             	mov    0x4(%eax),%eax
c010a899:	a3 88 1a 13 c0       	mov    %eax,0xc0131a88
c010a89e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a8a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a8a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8a7:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010a8aa:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a8ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a8b0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a8b3:	0f 85 66 ff ff ff    	jne    c010a81f <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010a8b9:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
}
c010a8be:	c9                   	leave  
c010a8bf:	c3                   	ret    

c010a8c0 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010a8c0:	55                   	push   %ebp
c010a8c1:	89 e5                	mov    %esp,%ebp
c010a8c3:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010a8c6:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a8cb:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a8ce:	74 63                	je     c010a933 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010a8d0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a8d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8db:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010a8de:	e8 ad f9 ff ff       	call   c010a290 <__intr_save>
c010a8e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010a8e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8e9:	a3 48 34 1c c0       	mov    %eax,0xc01c3448
            // 切换栈
            load_esp0(next->kstack + KSTACKSIZE);
c010a8ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8f1:	8b 40 0c             	mov    0xc(%eax),%eax
c010a8f4:	05 00 20 00 00       	add    $0x2000,%eax
c010a8f9:	89 04 24             	mov    %eax,(%esp)
c010a8fc:	e8 c0 a5 ff ff       	call   c0104ec1 <load_esp0>
            // 切换目录表
            lcr3(next->cr3);
c010a901:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a904:	8b 40 40             	mov    0x40(%eax),%eax
c010a907:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010a90a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a90d:	0f 22 d8             	mov    %eax,%cr3
            // 切换context; context函数是由汇编语言实现的（switch.S）
            switch_to(&(prev->context), &(next->context));
c010a910:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a913:	8d 50 1c             	lea    0x1c(%eax),%edx
c010a916:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a919:	83 c0 1c             	add    $0x1c,%eax
c010a91c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a920:	89 04 24             	mov    %eax,(%esp)
c010a923:	e8 38 16 00 00       	call   c010bf60 <switch_to>
        }
        local_intr_restore(intr_flag);
c010a928:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a92b:	89 04 24             	mov    %eax,(%esp)
c010a92e:	e8 87 f9 ff ff       	call   c010a2ba <__intr_restore>
    }
}
c010a933:	c9                   	leave  
c010a934:	c3                   	ret    

c010a935 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010a935:	55                   	push   %ebp
c010a936:	89 e5                	mov    %esp,%ebp
c010a938:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010a93b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a940:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a943:	89 04 24             	mov    %eax,(%esp)
c010a946:	e8 ee 80 ff ff       	call   c0102a39 <forkrets>
}
c010a94b:	c9                   	leave  
c010a94c:	c3                   	ret    

c010a94d <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010a94d:	55                   	push   %ebp
c010a94e:	89 e5                	mov    %esp,%ebp
c010a950:	53                   	push   %ebx
c010a951:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010a954:	8b 45 08             	mov    0x8(%ebp),%eax
c010a957:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010a95d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a960:	8b 40 04             	mov    0x4(%eax),%eax
c010a963:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010a96a:	00 
c010a96b:	89 04 24             	mov    %eax,(%esp)
c010a96e:	e8 41 20 00 00       	call   c010c9b4 <hash32>
c010a973:	c1 e0 03             	shl    $0x3,%eax
c010a976:	05 60 34 1c c0       	add    $0xc01c3460,%eax
c010a97b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a97e:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010a981:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a984:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a987:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a98a:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a98d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a990:	8b 40 04             	mov    0x4(%eax),%eax
c010a993:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a996:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010a999:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a99c:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010a99f:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a9a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a9a5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a9a8:	89 10                	mov    %edx,(%eax)
c010a9aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a9ad:	8b 10                	mov    (%eax),%edx
c010a9af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a9b2:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a9b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9b8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a9bb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a9be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9c1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a9c4:	89 10                	mov    %edx,(%eax)
}
c010a9c6:	83 c4 34             	add    $0x34,%esp
c010a9c9:	5b                   	pop    %ebx
c010a9ca:	5d                   	pop    %ebp
c010a9cb:	c3                   	ret    

c010a9cc <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010a9cc:	55                   	push   %ebp
c010a9cd:	89 e5                	mov    %esp,%ebp
c010a9cf:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010a9d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9d5:	05 84 00 00 00       	add    $0x84,%eax
c010a9da:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a9dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a9e0:	8b 40 04             	mov    0x4(%eax),%eax
c010a9e3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a9e6:	8b 12                	mov    (%edx),%edx
c010a9e8:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a9eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a9ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a9f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a9f4:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a9f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9fa:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a9fd:	89 10                	mov    %edx,(%eax)
}
c010a9ff:	c9                   	leave  
c010aa00:	c3                   	ret    

c010aa01 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010aa01:	55                   	push   %ebp
c010aa02:	89 e5                	mov    %esp,%ebp
c010aa04:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010aa07:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010aa0b:	7e 61                	jle    c010aa6e <find_proc+0x6d>
c010aa0d:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010aa14:	7f 58                	jg     c010aa6e <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010aa16:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa19:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010aa20:	00 
c010aa21:	89 04 24             	mov    %eax,(%esp)
c010aa24:	e8 8b 1f 00 00       	call   c010c9b4 <hash32>
c010aa29:	c1 e0 03             	shl    $0x3,%eax
c010aa2c:	05 60 34 1c c0       	add    $0xc01c3460,%eax
c010aa31:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aa34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa37:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010aa3a:	eb 1b                	jmp    c010aa57 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010aa3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa3f:	2d 84 00 00 00       	sub    $0x84,%eax
c010aa44:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010aa47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa4a:	8b 40 04             	mov    0x4(%eax),%eax
c010aa4d:	3b 45 08             	cmp    0x8(%ebp),%eax
c010aa50:	75 05                	jne    c010aa57 <find_proc+0x56>
                return proc;
c010aa52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa55:	eb 1c                	jmp    c010aa73 <find_proc+0x72>
c010aa57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010aa5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa60:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010aa63:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa69:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010aa6c:	75 ce                	jne    c010aa3c <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010aa6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aa73:	c9                   	leave  
c010aa74:	c3                   	ret    

c010aa75 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010aa75:	55                   	push   %ebp
c010aa76:	89 e5                	mov    %esp,%ebp
c010aa78:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010aa7b:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010aa82:	00 
c010aa83:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aa8a:	00 
c010aa8b:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010aa8e:	89 04 24             	mov    %eax,(%esp)
c010aa91:	e8 cb 29 00 00       	call   c010d461 <memset>
    tf.tf_cs = KERNEL_CS;
c010aa96:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010aa9c:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010aaa2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010aaa6:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010aaaa:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010aaae:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010aab2:	8b 45 08             	mov    0x8(%ebp),%eax
c010aab5:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010aab8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aabb:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010aabe:	b8 4e a2 10 c0       	mov    $0xc010a24e,%eax
c010aac3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010aac6:	8b 45 10             	mov    0x10(%ebp),%eax
c010aac9:	80 cc 01             	or     $0x1,%ah
c010aacc:	89 c2                	mov    %eax,%edx
c010aace:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010aad1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aad5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aadc:	00 
c010aadd:	89 14 24             	mov    %edx,(%esp)
c010aae0:	e8 25 03 00 00       	call   c010ae0a <do_fork>
}
c010aae5:	c9                   	leave  
c010aae6:	c3                   	ret    

c010aae7 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010aae7:	55                   	push   %ebp
c010aae8:	89 e5                	mov    %esp,%ebp
c010aaea:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010aaed:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010aaf4:	e8 16 a5 ff ff       	call   c010500f <alloc_pages>
c010aaf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010aafc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab00:	74 1a                	je     c010ab1c <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010ab02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab05:	89 04 24             	mov    %eax,(%esp)
c010ab08:	e8 2f f8 ff ff       	call   c010a33c <page2kva>
c010ab0d:	89 c2                	mov    %eax,%edx
c010ab0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab12:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010ab15:	b8 00 00 00 00       	mov    $0x0,%eax
c010ab1a:	eb 05                	jmp    c010ab21 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010ab1c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010ab21:	c9                   	leave  
c010ab22:	c3                   	ret    

c010ab23 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010ab23:	55                   	push   %ebp
c010ab24:	89 e5                	mov    %esp,%ebp
c010ab26:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010ab29:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab2c:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab2f:	89 04 24             	mov    %eax,(%esp)
c010ab32:	e8 59 f8 ff ff       	call   c010a390 <kva2page>
c010ab37:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010ab3e:	00 
c010ab3f:	89 04 24             	mov    %eax,(%esp)
c010ab42:	e8 33 a5 ff ff       	call   c010507a <free_pages>
}
c010ab47:	c9                   	leave  
c010ab48:	c3                   	ret    

c010ab49 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010ab49:	55                   	push   %ebp
c010ab4a:	89 e5                	mov    %esp,%ebp
c010ab4c:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010ab4f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ab56:	e8 b4 a4 ff ff       	call   c010500f <alloc_pages>
c010ab5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab62:	75 0a                	jne    c010ab6e <setup_pgdir+0x25>
        return -E_NO_MEM;
c010ab64:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010ab69:	e9 80 00 00 00       	jmp    c010abee <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010ab6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab71:	89 04 24             	mov    %eax,(%esp)
c010ab74:	e8 c3 f7 ff ff       	call   c010a33c <page2kva>
c010ab79:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010ab7c:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010ab81:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010ab88:	00 
c010ab89:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab90:	89 04 24             	mov    %eax,(%esp)
c010ab93:	e8 ab 29 00 00       	call   c010d543 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010ab98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab9b:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010aba1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aba4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aba7:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010abae:	77 23                	ja     c010abd3 <setup_pgdir+0x8a>
c010abb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010abb7:	c7 44 24 08 44 fa 10 	movl   $0xc010fa44,0x8(%esp)
c010abbe:	c0 
c010abbf:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c010abc6:	00 
c010abc7:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010abce:	e8 07 62 ff ff       	call   c0100dda <__panic>
c010abd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abd6:	05 00 00 00 40       	add    $0x40000000,%eax
c010abdb:	83 c8 03             	or     $0x3,%eax
c010abde:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010abe0:	8b 45 08             	mov    0x8(%ebp),%eax
c010abe3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010abe6:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010abe9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010abee:	c9                   	leave  
c010abef:	c3                   	ret    

c010abf0 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010abf0:	55                   	push   %ebp
c010abf1:	89 e5                	mov    %esp,%ebp
c010abf3:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010abf6:	8b 45 08             	mov    0x8(%ebp),%eax
c010abf9:	8b 40 0c             	mov    0xc(%eax),%eax
c010abfc:	89 04 24             	mov    %eax,(%esp)
c010abff:	e8 8c f7 ff ff       	call   c010a390 <kva2page>
c010ac04:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ac0b:	00 
c010ac0c:	89 04 24             	mov    %eax,(%esp)
c010ac0f:	e8 66 a4 ff ff       	call   c010507a <free_pages>
}
c010ac14:	c9                   	leave  
c010ac15:	c3                   	ret    

c010ac16 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010ac16:	55                   	push   %ebp
c010ac17:	89 e5                	mov    %esp,%ebp
c010ac19:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010ac1c:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010ac21:	8b 40 18             	mov    0x18(%eax),%eax
c010ac24:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010ac27:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ac2b:	75 0a                	jne    c010ac37 <copy_mm+0x21>
        return 0;
c010ac2d:	b8 00 00 00 00       	mov    $0x0,%eax
c010ac32:	e9 f9 00 00 00       	jmp    c010ad30 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010ac37:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac3a:	25 00 01 00 00       	and    $0x100,%eax
c010ac3f:	85 c0                	test   %eax,%eax
c010ac41:	74 08                	je     c010ac4b <copy_mm+0x35>
        mm = oldmm;
c010ac43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac46:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010ac49:	eb 78                	jmp    c010acc3 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010ac4b:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010ac52:	e8 07 d1 ff ff       	call   c0107d5e <mm_create>
c010ac57:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac5e:	75 05                	jne    c010ac65 <copy_mm+0x4f>
        goto bad_mm;
c010ac60:	e9 c8 00 00 00       	jmp    c010ad2d <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010ac65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac68:	89 04 24             	mov    %eax,(%esp)
c010ac6b:	e8 d9 fe ff ff       	call   c010ab49 <setup_pgdir>
c010ac70:	85 c0                	test   %eax,%eax
c010ac72:	74 05                	je     c010ac79 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010ac74:	e9 a9 00 00 00       	jmp    c010ad22 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010ac79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac7c:	89 04 24             	mov    %eax,(%esp)
c010ac7f:	e8 8a f7 ff ff       	call   c010a40e <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010ac84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac87:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ac8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac8e:	89 04 24             	mov    %eax,(%esp)
c010ac91:	e8 eb d5 ff ff       	call   c0108281 <dup_mmap>
c010ac96:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010ac99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac9c:	89 04 24             	mov    %eax,(%esp)
c010ac9f:	e8 9d f7 ff ff       	call   c010a441 <unlock_mm>

    if (ret != 0) {
c010aca4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aca8:	74 19                	je     c010acc3 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010acaa:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010acab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acae:	89 04 24             	mov    %eax,(%esp)
c010acb1:	e8 cc d6 ff ff       	call   c0108382 <exit_mmap>
    put_pgdir(mm);
c010acb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acb9:	89 04 24             	mov    %eax,(%esp)
c010acbc:	e8 2f ff ff ff       	call   c010abf0 <put_pgdir>
c010acc1:	eb 5f                	jmp    c010ad22 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010acc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acc6:	89 04 24             	mov    %eax,(%esp)
c010acc9:	e8 0c f7 ff ff       	call   c010a3da <mm_count_inc>
    proc->mm = mm;
c010acce:	8b 45 0c             	mov    0xc(%ebp),%eax
c010acd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010acd4:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010acd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acda:	8b 40 0c             	mov    0xc(%eax),%eax
c010acdd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ace0:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010ace7:	77 23                	ja     c010ad0c <copy_mm+0xf6>
c010ace9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010acec:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010acf0:	c7 44 24 08 44 fa 10 	movl   $0xc010fa44,0x8(%esp)
c010acf7:	c0 
c010acf8:	c7 44 24 04 93 01 00 	movl   $0x193,0x4(%esp)
c010acff:	00 
c010ad00:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010ad07:	e8 ce 60 ff ff       	call   c0100dda <__panic>
c010ad0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad0f:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010ad15:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad18:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010ad1b:	b8 00 00 00 00       	mov    $0x0,%eax
c010ad20:	eb 0e                	jmp    c010ad30 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010ad22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad25:	89 04 24             	mov    %eax,(%esp)
c010ad28:	e8 96 d3 ff ff       	call   c01080c3 <mm_destroy>
bad_mm:
    return ret;
c010ad2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010ad30:	c9                   	leave  
c010ad31:	c3                   	ret    

c010ad32 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010ad32:	55                   	push   %ebp
c010ad33:	89 e5                	mov    %esp,%ebp
c010ad35:	57                   	push   %edi
c010ad36:	56                   	push   %esi
c010ad37:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010ad38:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad3b:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad3e:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010ad43:	89 c2                	mov    %eax,%edx
c010ad45:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad48:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010ad4b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad4e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad51:	8b 55 10             	mov    0x10(%ebp),%edx
c010ad54:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010ad59:	89 c1                	mov    %eax,%ecx
c010ad5b:	83 e1 01             	and    $0x1,%ecx
c010ad5e:	85 c9                	test   %ecx,%ecx
c010ad60:	74 0e                	je     c010ad70 <copy_thread+0x3e>
c010ad62:	0f b6 0a             	movzbl (%edx),%ecx
c010ad65:	88 08                	mov    %cl,(%eax)
c010ad67:	83 c0 01             	add    $0x1,%eax
c010ad6a:	83 c2 01             	add    $0x1,%edx
c010ad6d:	83 eb 01             	sub    $0x1,%ebx
c010ad70:	89 c1                	mov    %eax,%ecx
c010ad72:	83 e1 02             	and    $0x2,%ecx
c010ad75:	85 c9                	test   %ecx,%ecx
c010ad77:	74 0f                	je     c010ad88 <copy_thread+0x56>
c010ad79:	0f b7 0a             	movzwl (%edx),%ecx
c010ad7c:	66 89 08             	mov    %cx,(%eax)
c010ad7f:	83 c0 02             	add    $0x2,%eax
c010ad82:	83 c2 02             	add    $0x2,%edx
c010ad85:	83 eb 02             	sub    $0x2,%ebx
c010ad88:	89 d9                	mov    %ebx,%ecx
c010ad8a:	c1 e9 02             	shr    $0x2,%ecx
c010ad8d:	89 c7                	mov    %eax,%edi
c010ad8f:	89 d6                	mov    %edx,%esi
c010ad91:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010ad93:	89 f2                	mov    %esi,%edx
c010ad95:	89 f8                	mov    %edi,%eax
c010ad97:	b9 00 00 00 00       	mov    $0x0,%ecx
c010ad9c:	89 de                	mov    %ebx,%esi
c010ad9e:	83 e6 02             	and    $0x2,%esi
c010ada1:	85 f6                	test   %esi,%esi
c010ada3:	74 0b                	je     c010adb0 <copy_thread+0x7e>
c010ada5:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010ada9:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010adad:	83 c1 02             	add    $0x2,%ecx
c010adb0:	83 e3 01             	and    $0x1,%ebx
c010adb3:	85 db                	test   %ebx,%ebx
c010adb5:	74 07                	je     c010adbe <copy_thread+0x8c>
c010adb7:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010adbb:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010adbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010adc1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010adc4:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010adcb:	8b 45 08             	mov    0x8(%ebp),%eax
c010adce:	8b 40 3c             	mov    0x3c(%eax),%eax
c010add1:	8b 55 0c             	mov    0xc(%ebp),%edx
c010add4:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010add7:	8b 45 08             	mov    0x8(%ebp),%eax
c010adda:	8b 40 3c             	mov    0x3c(%eax),%eax
c010addd:	8b 55 08             	mov    0x8(%ebp),%edx
c010ade0:	8b 52 3c             	mov    0x3c(%edx),%edx
c010ade3:	8b 52 40             	mov    0x40(%edx),%edx
c010ade6:	80 ce 02             	or     $0x2,%dh
c010ade9:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010adec:	ba 35 a9 10 c0       	mov    $0xc010a935,%edx
c010adf1:	8b 45 08             	mov    0x8(%ebp),%eax
c010adf4:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010adf7:	8b 45 08             	mov    0x8(%ebp),%eax
c010adfa:	8b 40 3c             	mov    0x3c(%eax),%eax
c010adfd:	89 c2                	mov    %eax,%edx
c010adff:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae02:	89 50 20             	mov    %edx,0x20(%eax)
}
c010ae05:	5b                   	pop    %ebx
c010ae06:	5e                   	pop    %esi
c010ae07:	5f                   	pop    %edi
c010ae08:	5d                   	pop    %ebp
c010ae09:	c3                   	ret    

c010ae0a <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010ae0a:	55                   	push   %ebp
c010ae0b:	89 e5                	mov    %esp,%ebp
c010ae0d:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010ae10:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010ae17:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010ae1c:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010ae21:	7e 05                	jle    c010ae28 <do_fork+0x1e>
        goto fork_out;
c010ae23:	e9 d5 00 00 00       	jmp    c010aefd <do_fork+0xf3>
    }
    ret = -E_NO_MEM;
c010ae28:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    /*
	 * 想干的事：创建当前内核线程的一个副本，它们的执行上下文、代码、数据都一样，但是存储位置不同，PID不同。
	 */
	// 调用alloc_proc() 为要创建的线程分配空间
	// 如果第一步 alloc 都失败的话，应该来说是比较严重的错误。直接退出。
	if ((proc = alloc_proc()) == NULL) {
c010ae2f:	e8 33 f6 ff ff       	call   c010a467 <alloc_proc>
c010ae34:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ae37:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae3b:	75 05                	jne    c010ae42 <do_fork+0x38>
		goto fork_out;
c010ae3d:	e9 bb 00 00 00       	jmp    c010aefd <do_fork+0xf3>
	}


	proc->parent = current;
c010ae42:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c010ae48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae4b:	89 50 14             	mov    %edx,0x14(%eax)
	assert(proc->wait_state == 0);
c010ae4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae51:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ae57:	85 c0                	test   %eax,%eax
c010ae59:	74 24                	je     c010ae7f <do_fork+0x75>
c010ae5b:	c7 44 24 0c 7c fa 10 	movl   $0xc010fa7c,0xc(%esp)
c010ae62:	c0 
c010ae63:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010ae6a:	c0 
c010ae6b:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c010ae72:	00 
c010ae73:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010ae7a:	e8 5b 5f ff ff       	call   c0100dda <__panic>

	// 获取被拷贝的进程的pid号 即父进程的pid
	//proc->parent = current;
	// 分配大小为 KSTACKPAGE 的页面作为进程内核堆栈
	setup_kstack(proc);
c010ae7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae82:	89 04 24             	mov    %eax,(%esp)
c010ae85:	e8 5d fc ff ff       	call   c010aae7 <setup_kstack>
	// 为新进程创建新的虚存空间
	// 注意！copy还调用了copy_range函数。
	// copy_range函数：拷贝父进程的内存到新进程（LAB5 练习2）
	copy_mm(clone_flags, proc);
c010ae8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae91:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae94:	89 04 24             	mov    %eax,(%esp)
c010ae97:	e8 7a fd ff ff       	call   c010ac16 <copy_mm>
	// 拷贝原进程上下文到新进程
	copy_thread(proc, stack, tf);
c010ae9c:	8b 45 10             	mov    0x10(%ebp),%eax
c010ae9f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aea3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aea6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aeaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aead:	89 04 24             	mov    %eax,(%esp)
c010aeb0:	e8 7d fe ff ff       	call   c010ad32 <copy_thread>


	bool intr_flag;
	// 停止中断
	local_intr_save(intr_flag);
c010aeb5:	e8 d6 f3 ff ff       	call   c010a290 <__intr_save>
c010aeba:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// {} 用来限定花括号中变量的作用域，使其不影响外面。
	{
		proc->pid = get_pid();
c010aebd:	e8 06 f9 ff ff       	call   c010a7c8 <get_pid>
c010aec2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aec5:	89 42 04             	mov    %eax,0x4(%edx)
		// 新进程添加到 hash方式组织的的进程链表，以便于以后对某个指定的线程的查找（速度更快）
		hash_proc(proc);
c010aec8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aecb:	89 04 24             	mov    %eax,(%esp)
c010aece:	e8 7a fa ff ff       	call   c010a94d <hash_proc>
		// 将线程加入到所有线程的链表中，以便于调度
		//list_add(&proc_list, &(proc->list_link));
		// 将全局线程的数目加1
		//nr_process ++;
		set_links(proc);
c010aed3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aed6:	89 04 24             	mov    %eax,(%esp)
c010aed9:	e8 8f f7 ff ff       	call   c010a66d <set_links>
	}
	// 允许中断
	local_intr_restore(intr_flag);
c010aede:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aee1:	89 04 24             	mov    %eax,(%esp)
c010aee4:	e8 d1 f3 ff ff       	call   c010a2ba <__intr_restore>


	// 唤醒新进程
	wakeup_proc(proc);
c010aee9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeec:	89 04 24             	mov    %eax,(%esp)
c010aeef:	e8 18 14 00 00       	call   c010c30c <wakeup_proc>
	// 新进程号
	ret = proc->pid;
c010aef4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aef7:	8b 40 04             	mov    0x4(%eax),%eax
c010aefa:	89 45 f4             	mov    %eax,-0xc(%ebp)

	
fork_out:
    return ret;
c010aefd:	8b 45 f4             	mov    -0xc(%ebp),%eax
bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
    goto fork_out;
}
c010af00:	c9                   	leave  
c010af01:	c3                   	ret    

c010af02 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010af02:	55                   	push   %ebp
c010af03:	89 e5                	mov    %esp,%ebp
c010af05:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010af08:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c010af0e:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010af13:	39 c2                	cmp    %eax,%edx
c010af15:	75 1c                	jne    c010af33 <do_exit+0x31>
        panic("idleproc exit.\n");
c010af17:	c7 44 24 08 a7 fa 10 	movl   $0xc010faa7,0x8(%esp)
c010af1e:	c0 
c010af1f:	c7 44 24 04 1d 02 00 	movl   $0x21d,0x4(%esp)
c010af26:	00 
c010af27:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010af2e:	e8 a7 5e ff ff       	call   c0100dda <__panic>
    }
    if (current == initproc) {
c010af33:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c010af39:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010af3e:	39 c2                	cmp    %eax,%edx
c010af40:	75 1c                	jne    c010af5e <do_exit+0x5c>
        panic("initproc exit.\n");
c010af42:	c7 44 24 08 b7 fa 10 	movl   $0xc010fab7,0x8(%esp)
c010af49:	c0 
c010af4a:	c7 44 24 04 20 02 00 	movl   $0x220,0x4(%esp)
c010af51:	00 
c010af52:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010af59:	e8 7c 5e ff ff       	call   c0100dda <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010af5e:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010af63:	8b 40 18             	mov    0x18(%eax),%eax
c010af66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010af69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af6d:	74 4a                	je     c010afb9 <do_exit+0xb7>
        lcr3(boot_cr3);
c010af6f:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
c010af74:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010af77:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af7a:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010af7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af80:	89 04 24             	mov    %eax,(%esp)
c010af83:	e8 6c f4 ff ff       	call   c010a3f4 <mm_count_dec>
c010af88:	85 c0                	test   %eax,%eax
c010af8a:	75 21                	jne    c010afad <do_exit+0xab>
            exit_mmap(mm);
c010af8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af8f:	89 04 24             	mov    %eax,(%esp)
c010af92:	e8 eb d3 ff ff       	call   c0108382 <exit_mmap>
            put_pgdir(mm);
c010af97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af9a:	89 04 24             	mov    %eax,(%esp)
c010af9d:	e8 4e fc ff ff       	call   c010abf0 <put_pgdir>
            mm_destroy(mm);
c010afa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afa5:	89 04 24             	mov    %eax,(%esp)
c010afa8:	e8 16 d1 ff ff       	call   c01080c3 <mm_destroy>
        }
        current->mm = NULL;
c010afad:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010afb2:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010afb9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010afbe:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010afc4:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010afc9:	8b 55 08             	mov    0x8(%ebp),%edx
c010afcc:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010afd2:	e8 b9 f2 ff ff       	call   c010a290 <__intr_save>
c010afd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010afda:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010afdf:	8b 40 14             	mov    0x14(%eax),%eax
c010afe2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010afe5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afe8:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010afee:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010aff3:	75 10                	jne    c010b005 <do_exit+0x103>
            wakeup_proc(proc);
c010aff5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aff8:	89 04 24             	mov    %eax,(%esp)
c010affb:	e8 0c 13 00 00       	call   c010c30c <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010b000:	e9 ac 00 00 00       	jmp    c010b0b1 <do_exit+0x1af>
c010b005:	e9 a7 00 00 00       	jmp    c010b0b1 <do_exit+0x1af>
            proc = current->cptr;
c010b00a:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b00f:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b015:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010b018:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b01d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b020:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010b026:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010b02c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b02f:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b036:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010b039:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b03e:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010b044:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b047:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b04d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b050:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b056:	85 c0                	test   %eax,%eax
c010b058:	74 14                	je     c010b06e <do_exit+0x16c>
                initproc->cptr->yptr = proc;
c010b05a:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b05f:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b065:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b068:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010b06e:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
c010b074:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b077:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010b07a:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b07f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b082:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010b088:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b08b:	8b 00                	mov    (%eax),%eax
c010b08d:	83 f8 03             	cmp    $0x3,%eax
c010b090:	75 1f                	jne    c010b0b1 <do_exit+0x1af>
                if (initproc->wait_state == WT_CHILD) {
c010b092:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b097:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b09d:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b0a2:	75 0d                	jne    c010b0b1 <do_exit+0x1af>
                    wakeup_proc(initproc);
c010b0a4:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b0a9:	89 04 24             	mov    %eax,(%esp)
c010b0ac:	e8 5b 12 00 00       	call   c010c30c <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010b0b1:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b0b6:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b0bc:	85 c0                	test   %eax,%eax
c010b0be:	0f 85 46 ff ff ff    	jne    c010b00a <do_exit+0x108>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b0c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0c7:	89 04 24             	mov    %eax,(%esp)
c010b0ca:	e8 eb f1 ff ff       	call   c010a2ba <__intr_restore>
    
    schedule();
c010b0cf:	e8 d4 12 00 00       	call   c010c3a8 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b0d4:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b0d9:	8b 40 04             	mov    0x4(%eax),%eax
c010b0dc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b0e0:	c7 44 24 08 c8 fa 10 	movl   $0xc010fac8,0x8(%esp)
c010b0e7:	c0 
c010b0e8:	c7 44 24 04 4c 02 00 	movl   $0x24c,0x4(%esp)
c010b0ef:	00 
c010b0f0:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b0f7:	e8 de 5c ff ff       	call   c0100dda <__panic>

c010b0fc <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010b0fc:	55                   	push   %ebp
c010b0fd:	89 e5                	mov    %esp,%ebp
c010b0ff:	83 ec 78             	sub    $0x78,%esp
    // 检查寄居蟹本身有没有肉，没肉才正常。后面可以分配新的内存结构体，新的页表等。
	if (current->mm != NULL) {
c010b102:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b107:	8b 40 18             	mov    0x18(%eax),%eax
c010b10a:	85 c0                	test   %eax,%eax
c010b10c:	74 1c                	je     c010b12a <load_icode+0x2e>
    	// 如果当前进程的内存不为空，debug的时候会将其打印输出
        panic("load_icode: current->mm must be empty.\n");
c010b10e:	c7 44 24 08 e8 fa 10 	movl   $0xc010fae8,0x8(%esp)
c010b115:	c0 
c010b116:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c010b11d:	00 
c010b11e:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b125:	e8 b0 5c ff ff       	call   c0100dda <__panic>
    }

    int ret = -E_NO_MEM;
c010b12a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) 为当前进程建立新的内存管理结构体
    if ((mm = mm_create()) == NULL) {
c010b131:	e8 28 cc ff ff       	call   c0107d5e <mm_create>
c010b136:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b139:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b13d:	75 06                	jne    c010b145 <load_icode+0x49>
        goto bad_mm;
c010b13f:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010b140:	e9 ef 05 00 00       	jmp    c010b734 <load_icode+0x638>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT；
    // 创建新的页表
    if (setup_pgdir(mm) != 0) {
c010b145:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b148:	89 04 24             	mov    %eax,(%esp)
c010b14b:	e8 f9 f9 ff ff       	call   c010ab49 <setup_pgdir>
c010b150:	85 c0                	test   %eax,%eax
c010b152:	74 05                	je     c010b159 <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010b154:	e9 f6 05 00 00       	jmp    c010b74f <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    // 通过解析elf格式的文件得到代码段，数据段等格式在哪。
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010b159:	8b 45 08             	mov    0x8(%ebp),%eax
c010b15c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010b15f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b162:	8b 50 1c             	mov    0x1c(%eax),%edx
c010b165:	8b 45 08             	mov    0x8(%ebp),%eax
c010b168:	01 d0                	add    %edx,%eax
c010b16a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010b16d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b170:	8b 00                	mov    (%eax),%eax
c010b172:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010b177:	74 0c                	je     c010b185 <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010b179:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010b180:	e9 bf 05 00 00       	jmp    c010b744 <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010b185:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b188:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010b18c:	0f b7 c0             	movzwl %ax,%eax
c010b18f:	c1 e0 05             	shl    $0x5,%eax
c010b192:	89 c2                	mov    %eax,%edx
c010b194:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b197:	01 d0                	add    %edx,%eax
c010b199:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010b19c:	e9 13 03 00 00       	jmp    c010b4b4 <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010b1a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1a4:	8b 00                	mov    (%eax),%eax
c010b1a6:	83 f8 01             	cmp    $0x1,%eax
c010b1a9:	74 05                	je     c010b1b0 <load_icode+0xb4>
            continue ;
c010b1ab:	e9 00 03 00 00       	jmp    c010b4b0 <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010b1b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1b3:	8b 50 10             	mov    0x10(%eax),%edx
c010b1b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1b9:	8b 40 14             	mov    0x14(%eax),%eax
c010b1bc:	39 c2                	cmp    %eax,%edx
c010b1be:	76 0c                	jbe    c010b1cc <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010b1c0:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010b1c7:	e9 6d 05 00 00       	jmp    c010b739 <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010b1cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1cf:	8b 40 10             	mov    0x10(%eax),%eax
c010b1d2:	85 c0                	test   %eax,%eax
c010b1d4:	75 05                	jne    c010b1db <load_icode+0xdf>
            continue ;
c010b1d6:	e9 d5 02 00 00       	jmp    c010b4b0 <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
    // 建立VMA
        vm_flags = 0, perm = PTE_U;
c010b1db:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010b1e2:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;			// 如果是代码段，拥有可执行属性
c010b1e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1ec:	8b 40 18             	mov    0x18(%eax),%eax
c010b1ef:	83 e0 01             	and    $0x1,%eax
c010b1f2:	85 c0                	test   %eax,%eax
c010b1f4:	74 04                	je     c010b1fa <load_icode+0xfe>
c010b1f6:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;			// 如果是数据段，拥有可写属性
c010b1fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1fd:	8b 40 18             	mov    0x18(%eax),%eax
c010b200:	83 e0 02             	and    $0x2,%eax
c010b203:	85 c0                	test   %eax,%eax
c010b205:	74 04                	je     c010b20b <load_icode+0x10f>
c010b207:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;			// 如果是数据段，拥有可读属性
c010b20b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b20e:	8b 40 18             	mov    0x18(%eax),%eax
c010b211:	83 e0 04             	and    $0x4,%eax
c010b214:	85 c0                	test   %eax,%eax
c010b216:	74 04                	je     c010b21c <load_icode+0x120>
c010b218:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010b21c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b21f:	83 e0 02             	and    $0x2,%eax
c010b222:	85 c0                	test   %eax,%eax
c010b224:	74 04                	je     c010b22a <load_icode+0x12e>
c010b226:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        // 通过 mm_map 函数完成对合法空间的建立，但还没有建立页表。
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010b22a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b22d:	8b 50 14             	mov    0x14(%eax),%edx
c010b230:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b233:	8b 40 08             	mov    0x8(%eax),%eax
c010b236:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b23d:	00 
c010b23e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b241:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b245:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b249:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b24d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b250:	89 04 24             	mov    %eax,(%esp)
c010b253:	e8 0d cf ff ff       	call   c0108165 <mm_map>
c010b258:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b25b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b25f:	74 05                	je     c010b266 <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010b261:	e9 d3 04 00 00       	jmp    c010b739 <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010b266:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b269:	8b 50 04             	mov    0x4(%eax),%edx
c010b26c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b26f:	01 d0                	add    %edx,%eax
c010b271:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010b274:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b277:	8b 40 08             	mov    0x8(%eax),%eax
c010b27a:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b27d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b280:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010b283:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b286:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010b28b:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010b28e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010b295:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b298:	8b 50 08             	mov    0x8(%eax),%edx
c010b29b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b29e:	8b 40 10             	mov    0x10(%eax),%eax
c010b2a1:	01 d0                	add    %edx,%eax
c010b2a3:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
     // 拷贝，建立虚地址和物理地址的映射关系
        while (start < end) {
c010b2a6:	e9 90 00 00 00       	jmp    c010b33b <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b2ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b2ae:	8b 40 0c             	mov    0xc(%eax),%eax
c010b2b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b2b4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b2b8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b2bb:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b2bf:	89 04 24             	mov    %eax,(%esp)
c010b2c2:	e8 20 ac ff ff       	call   c0105ee7 <pgdir_alloc_page>
c010b2c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b2ca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b2ce:	75 05                	jne    c010b2d5 <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010b2d0:	e9 64 04 00 00       	jmp    c010b739 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b2d5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b2d8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b2db:	29 c2                	sub    %eax,%edx
c010b2dd:	89 d0                	mov    %edx,%eax
c010b2df:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b2e2:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b2e7:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b2ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b2ed:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b2f4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b2f7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b2fa:	73 0d                	jae    c010b309 <load_icode+0x20d>
                size -= la - end;
c010b2fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b2ff:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b302:	29 c2                	sub    %eax,%edx
c010b304:	89 d0                	mov    %edx,%eax
c010b306:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010b309:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b30c:	89 04 24             	mov    %eax,(%esp)
c010b30f:	e8 28 f0 ff ff       	call   c010a33c <page2kva>
c010b314:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b317:	01 c2                	add    %eax,%edx
c010b319:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b31c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b320:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b323:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b327:	89 14 24             	mov    %edx,(%esp)
c010b32a:	e8 14 22 00 00       	call   c010d543 <memcpy>
            start += size, from += size;
c010b32f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b332:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b335:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b338:	01 45 e0             	add    %eax,-0x20(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
     // 拷贝，建立虚地址和物理地址的映射关系
        while (start < end) {
c010b33b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b33e:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b341:	0f 82 64 ff ff ff    	jb     c010b2ab <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010b347:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b34a:	8b 50 08             	mov    0x8(%eax),%edx
c010b34d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b350:	8b 40 14             	mov    0x14(%eax),%eax
c010b353:	01 d0                	add    %edx,%eax
c010b355:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010b358:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b35b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b35e:	0f 83 b0 00 00 00    	jae    c010b414 <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010b364:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b367:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b36a:	75 05                	jne    c010b371 <load_icode+0x275>
                continue ;
c010b36c:	e9 3f 01 00 00       	jmp    c010b4b0 <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b371:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b374:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b377:	29 c2                	sub    %eax,%edx
c010b379:	89 d0                	mov    %edx,%eax
c010b37b:	05 00 10 00 00       	add    $0x1000,%eax
c010b380:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b383:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b388:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b38b:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b38e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b391:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b394:	73 0d                	jae    c010b3a3 <load_icode+0x2a7>
                size -= la - end;
c010b396:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b399:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b39c:	29 c2                	sub    %eax,%edx
c010b39e:	89 d0                	mov    %edx,%eax
c010b3a0:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b3a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3a6:	89 04 24             	mov    %eax,(%esp)
c010b3a9:	e8 8e ef ff ff       	call   c010a33c <page2kva>
c010b3ae:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b3b1:	01 c2                	add    %eax,%edx
c010b3b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b3b6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b3ba:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b3c1:	00 
c010b3c2:	89 14 24             	mov    %edx,(%esp)
c010b3c5:	e8 97 20 00 00       	call   c010d461 <memset>
            start += size;
c010b3ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b3cd:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b3d0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b3d3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b3d6:	73 08                	jae    c010b3e0 <load_icode+0x2e4>
c010b3d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b3db:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b3de:	74 34                	je     c010b414 <load_icode+0x318>
c010b3e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b3e3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b3e6:	72 08                	jb     c010b3f0 <load_icode+0x2f4>
c010b3e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b3eb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b3ee:	74 24                	je     c010b414 <load_icode+0x318>
c010b3f0:	c7 44 24 0c 10 fb 10 	movl   $0xc010fb10,0xc(%esp)
c010b3f7:	c0 
c010b3f8:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010b3ff:	c0 
c010b400:	c7 44 24 04 af 02 00 	movl   $0x2af,0x4(%esp)
c010b407:	00 
c010b408:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b40f:	e8 c6 59 ff ff       	call   c0100dda <__panic>
        }
        while (start < end) {
c010b414:	e9 8b 00 00 00       	jmp    c010b4a4 <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b419:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b41c:	8b 40 0c             	mov    0xc(%eax),%eax
c010b41f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b422:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b426:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b429:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b42d:	89 04 24             	mov    %eax,(%esp)
c010b430:	e8 b2 aa ff ff       	call   c0105ee7 <pgdir_alloc_page>
c010b435:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b438:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b43c:	75 05                	jne    c010b443 <load_icode+0x347>
                goto bad_cleanup_mmap;
c010b43e:	e9 f6 02 00 00       	jmp    c010b739 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b443:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b446:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b449:	29 c2                	sub    %eax,%edx
c010b44b:	89 d0                	mov    %edx,%eax
c010b44d:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b450:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b455:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b458:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b45b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b462:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b465:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b468:	73 0d                	jae    c010b477 <load_icode+0x37b>
                size -= la - end;
c010b46a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b46d:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b470:	29 c2                	sub    %eax,%edx
c010b472:	89 d0                	mov    %edx,%eax
c010b474:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b477:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b47a:	89 04 24             	mov    %eax,(%esp)
c010b47d:	e8 ba ee ff ff       	call   c010a33c <page2kva>
c010b482:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b485:	01 c2                	add    %eax,%edx
c010b487:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b48a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b48e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b495:	00 
c010b496:	89 14 24             	mov    %edx,(%esp)
c010b499:	e8 c3 1f 00 00       	call   c010d461 <memset>
            start += size;
c010b49e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b4a1:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010b4a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b4a7:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b4aa:	0f 82 69 ff ff ff    	jb     c010b419 <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010b4b0:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b4b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4b7:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b4ba:	0f 82 e1 fc ff ff    	jb     c010b1a1 <load_icode+0xa5>
            start += size;
        }
    }
    //(4) build user stack memory
    // 建立用户栈
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b4c0:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b4c7:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b4ce:	00 
c010b4cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b4d2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b4d6:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b4dd:	00 
c010b4de:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b4e5:	af 
c010b4e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b4e9:	89 04 24             	mov    %eax,(%esp)
c010b4ec:	e8 74 cc ff ff       	call   c0108165 <mm_map>
c010b4f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b4f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b4f8:	74 05                	je     c010b4ff <load_icode+0x403>
        goto bad_cleanup_mmap;
c010b4fa:	e9 3a 02 00 00       	jmp    c010b739 <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b4ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b502:	8b 40 0c             	mov    0xc(%eax),%eax
c010b505:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b50c:	00 
c010b50d:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b514:	af 
c010b515:	89 04 24             	mov    %eax,(%esp)
c010b518:	e8 ca a9 ff ff       	call   c0105ee7 <pgdir_alloc_page>
c010b51d:	85 c0                	test   %eax,%eax
c010b51f:	75 24                	jne    c010b545 <load_icode+0x449>
c010b521:	c7 44 24 0c 4c fb 10 	movl   $0xc010fb4c,0xc(%esp)
c010b528:	c0 
c010b529:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010b530:	c0 
c010b531:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c010b538:	00 
c010b539:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b540:	e8 95 58 ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b545:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b548:	8b 40 0c             	mov    0xc(%eax),%eax
c010b54b:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b552:	00 
c010b553:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010b55a:	af 
c010b55b:	89 04 24             	mov    %eax,(%esp)
c010b55e:	e8 84 a9 ff ff       	call   c0105ee7 <pgdir_alloc_page>
c010b563:	85 c0                	test   %eax,%eax
c010b565:	75 24                	jne    c010b58b <load_icode+0x48f>
c010b567:	c7 44 24 0c 90 fb 10 	movl   $0xc010fb90,0xc(%esp)
c010b56e:	c0 
c010b56f:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010b576:	c0 
c010b577:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c010b57e:	00 
c010b57f:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b586:	e8 4f 58 ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010b58b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b58e:	8b 40 0c             	mov    0xc(%eax),%eax
c010b591:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b598:	00 
c010b599:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010b5a0:	af 
c010b5a1:	89 04 24             	mov    %eax,(%esp)
c010b5a4:	e8 3e a9 ff ff       	call   c0105ee7 <pgdir_alloc_page>
c010b5a9:	85 c0                	test   %eax,%eax
c010b5ab:	75 24                	jne    c010b5d1 <load_icode+0x4d5>
c010b5ad:	c7 44 24 0c d4 fb 10 	movl   $0xc010fbd4,0xc(%esp)
c010b5b4:	c0 
c010b5b5:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010b5bc:	c0 
c010b5bd:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
c010b5c4:	00 
c010b5c5:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b5cc:	e8 09 58 ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010b5d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b5d4:	8b 40 0c             	mov    0xc(%eax),%eax
c010b5d7:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b5de:	00 
c010b5df:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010b5e6:	af 
c010b5e7:	89 04 24             	mov    %eax,(%esp)
c010b5ea:	e8 f8 a8 ff ff       	call   c0105ee7 <pgdir_alloc_page>
c010b5ef:	85 c0                	test   %eax,%eax
c010b5f1:	75 24                	jne    c010b617 <load_icode+0x51b>
c010b5f3:	c7 44 24 0c 18 fc 10 	movl   $0xc010fc18,0xc(%esp)
c010b5fa:	c0 
c010b5fb:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010b602:	c0 
c010b603:	c7 44 24 04 c6 02 00 	movl   $0x2c6,0x4(%esp)
c010b60a:	00 
c010b60b:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b612:	e8 c3 57 ff ff       	call   c0100dda <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010b617:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b61a:	89 04 24             	mov    %eax,(%esp)
c010b61d:	e8 b8 ed ff ff       	call   c010a3da <mm_count_inc>
    current->mm = mm;
c010b622:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b627:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b62a:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010b62d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b632:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b635:	8b 52 0c             	mov    0xc(%edx),%edx
c010b638:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010b63b:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010b642:	77 23                	ja     c010b667 <load_icode+0x56b>
c010b644:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b647:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b64b:	c7 44 24 08 44 fa 10 	movl   $0xc010fa44,0x8(%esp)
c010b652:	c0 
c010b653:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c010b65a:	00 
c010b65b:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b662:	e8 73 57 ff ff       	call   c0100dda <__panic>
c010b667:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010b66a:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010b670:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010b673:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b676:	8b 40 0c             	mov    0xc(%eax),%eax
c010b679:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010b67c:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010b683:	77 23                	ja     c010b6a8 <load_icode+0x5ac>
c010b685:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b688:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b68c:	c7 44 24 08 44 fa 10 	movl   $0xc010fa44,0x8(%esp)
c010b693:	c0 
c010b694:	c7 44 24 04 cc 02 00 	movl   $0x2cc,0x4(%esp)
c010b69b:	00 
c010b69c:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b6a3:	e8 32 57 ff ff       	call   c0100dda <__panic>
c010b6a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b6ab:	05 00 00 00 40       	add    $0x40000000,%eax
c010b6b0:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010b6b3:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b6b6:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    // 这里是很大的一部分，涉及到特权级转换。同时也时lab1 challenge部分内容。
    // 我们知道特权级转换是通过中断完成的。
    struct trapframe *tf = current->tf;
c010b6b9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b6be:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b6c1:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010b6c4:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010b6cb:	00 
c010b6cc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b6d3:	00 
c010b6d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b6d7:	89 04 24             	mov    %eax,(%esp)
c010b6da:	e8 82 1d 00 00       	call   c010d461 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010b6df:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b6e2:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010b6e8:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b6eb:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010b6f1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b6f4:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010b6f8:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b6fb:	66 89 50 28          	mov    %dx,0x28(%eax)
c010b6ff:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b702:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010b706:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b709:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010b70d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b710:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;			// 中断返回现场。可以执行elf文件的开始部分。即第6部分的作用就是伪造中断返回现场。
c010b717:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b71a:	8b 50 18             	mov    0x18(%eax),%edx
c010b71d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b720:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;				// 允许中断
c010b723:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b726:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)


    ret = 0;
c010b72d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010b734:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b737:	eb 23                	jmp    c010b75c <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010b739:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b73c:	89 04 24             	mov    %eax,(%esp)
c010b73f:	e8 3e cc ff ff       	call   c0108382 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010b744:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b747:	89 04 24             	mov    %eax,(%esp)
c010b74a:	e8 a1 f4 ff ff       	call   c010abf0 <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b74f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b752:	89 04 24             	mov    %eax,(%esp)
c010b755:	e8 69 c9 ff ff       	call   c01080c3 <mm_destroy>
bad_mm:
    goto out;
c010b75a:	eb d8                	jmp    c010b734 <load_icode+0x638>
}
c010b75c:	c9                   	leave  
c010b75d:	c3                   	ret    

c010b75e <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010b75e:	55                   	push   %ebp
c010b75f:	89 e5                	mov    %esp,%ebp
c010b761:	83 ec 58             	sub    $0x58,%esp
	// 本函数所干的事跟寄居蟹差不多

    struct mm_struct *mm = current->mm;
c010b764:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b769:	8b 40 18             	mov    0x18(%eax),%eax
c010b76c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010b76f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b772:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b779:	00 
c010b77a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b77d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b781:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b785:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b788:	89 04 24             	mov    %eax,(%esp)
c010b78b:	e8 89 d6 ff ff       	call   c0108e19 <user_mem_check>
c010b790:	85 c0                	test   %eax,%eax
c010b792:	75 0a                	jne    c010b79e <do_execve+0x40>
        return -E_INVAL;
c010b794:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b799:	e9 f4 00 00 00       	jmp    c010b892 <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010b79e:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010b7a2:	76 07                	jbe    c010b7ab <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010b7a4:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010b7ab:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010b7b2:	00 
c010b7b3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b7ba:	00 
c010b7bb:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b7be:	89 04 24             	mov    %eax,(%esp)
c010b7c1:	e8 9b 1c 00 00       	call   c010d461 <memset>
    memcpy(local_name, name, len);
c010b7c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b7c9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b7cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7d4:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b7d7:	89 04 24             	mov    %eax,(%esp)
c010b7da:	e8 64 1d 00 00       	call   c010d543 <memcpy>

    // 寄居蟹首先把之前海螺的肉去掉
    if (mm != NULL) {
c010b7df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b7e3:	74 4a                	je     c010b82f <do_execve+0xd1>
        lcr3(boot_cr3);
c010b7e5:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
c010b7ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b7ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7f0:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b7f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7f6:	89 04 24             	mov    %eax,(%esp)
c010b7f9:	e8 f6 eb ff ff       	call   c010a3f4 <mm_count_dec>
c010b7fe:	85 c0                	test   %eax,%eax
c010b800:	75 21                	jne    c010b823 <do_execve+0xc5>
        	// 清除原来进程内存管理部分
            exit_mmap(mm);
c010b802:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b805:	89 04 24             	mov    %eax,(%esp)
c010b808:	e8 75 cb ff ff       	call   c0108382 <exit_mmap>
            // 页表清空
            put_pgdir(mm);
c010b80d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b810:	89 04 24             	mov    %eax,(%esp)
c010b813:	e8 d8 f3 ff ff       	call   c010abf0 <put_pgdir>
            mm_destroy(mm);
c010b818:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b81b:	89 04 24             	mov    %eax,(%esp)
c010b81e:	e8 a0 c8 ff ff       	call   c01080c3 <mm_destroy>
        }
        current->mm = NULL;
c010b823:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b828:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;

    // 然后寄居蟹自己住进去
    // load_icode 函数的功能则在于为执行新的程序初始化好内存空间（一系列的准备工作，内存初始化啊，伪造中断返回现场以便于跳转到elf文件开始处去执行啊）。
    if ((ret = load_icode(binary, size)) != 0) {
c010b82f:	8b 45 14             	mov    0x14(%ebp),%eax
c010b832:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b836:	8b 45 10             	mov    0x10(%ebp),%eax
c010b839:	89 04 24             	mov    %eax,(%esp)
c010b83c:	e8 bb f8 ff ff       	call   c010b0fc <load_icode>
c010b841:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b844:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b848:	74 2f                	je     c010b879 <do_execve+0x11b>
        goto execve_exit;
c010b84a:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010b84b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b84e:	89 04 24             	mov    %eax,(%esp)
c010b851:	e8 ac f6 ff ff       	call   c010af02 <do_exit>
    panic("already exit: %e.\n", ret);
c010b856:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b859:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b85d:	c7 44 24 08 5b fc 10 	movl   $0xc010fc5b,0x8(%esp)
c010b864:	c0 
c010b865:	c7 44 24 04 1a 03 00 	movl   $0x31a,0x4(%esp)
c010b86c:	00 
c010b86d:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b874:	e8 61 55 ff ff       	call   c0100dda <__panic>
    // 然后寄居蟹自己住进去
    // load_icode 函数的功能则在于为执行新的程序初始化好内存空间（一系列的准备工作，内存初始化啊，伪造中断返回现场以便于跳转到elf文件开始处去执行啊）。
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010b879:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b87e:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010b881:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b885:	89 04 24             	mov    %eax,(%esp)
c010b888:	e8 5b ed ff ff       	call   c010a5e8 <set_proc_name>
    return 0;
c010b88d:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010b892:	c9                   	leave  
c010b893:	c3                   	ret    

c010b894 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010b894:	55                   	push   %ebp
c010b895:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010b897:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b89c:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010b8a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b8a8:	5d                   	pop    %ebp
c010b8a9:	c3                   	ret    

c010b8aa <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010b8aa:	55                   	push   %ebp
c010b8ab:	89 e5                	mov    %esp,%ebp
c010b8ad:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b8b0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b8b5:	8b 40 18             	mov    0x18(%eax),%eax
c010b8b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010b8bb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b8bf:	74 30                	je     c010b8f1 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010b8c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b8c4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010b8cb:	00 
c010b8cc:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010b8d3:	00 
c010b8d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8db:	89 04 24             	mov    %eax,(%esp)
c010b8de:	e8 36 d5 ff ff       	call   c0108e19 <user_mem_check>
c010b8e3:	85 c0                	test   %eax,%eax
c010b8e5:	75 0a                	jne    c010b8f1 <do_wait+0x47>
            return -E_INVAL;
c010b8e7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b8ec:	e9 57 01 00 00       	jmp    c010ba48 <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010b8f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010b8f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b8fc:	74 39                	je     c010b937 <do_wait+0x8d>
        proc = find_proc(pid);
c010b8fe:	8b 45 08             	mov    0x8(%ebp),%eax
c010b901:	89 04 24             	mov    %eax,(%esp)
c010b904:	e8 f8 f0 ff ff       	call   c010aa01 <find_proc>
c010b909:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010b90c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b910:	74 5a                	je     c010b96c <do_wait+0xc2>
c010b912:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b915:	8b 50 14             	mov    0x14(%eax),%edx
c010b918:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b91d:	39 c2                	cmp    %eax,%edx
c010b91f:	75 4b                	jne    c010b96c <do_wait+0xc2>
            haskid = 1;
c010b921:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b928:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b92b:	8b 00                	mov    (%eax),%eax
c010b92d:	83 f8 03             	cmp    $0x3,%eax
c010b930:	75 3a                	jne    c010b96c <do_wait+0xc2>
                goto found;
c010b932:	e9 89 00 00 00       	jmp    c010b9c0 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010b937:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b93c:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b942:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010b945:	eb 1f                	jmp    c010b966 <do_wait+0xbc>
            haskid = 1;
c010b947:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b94e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b951:	8b 00                	mov    (%eax),%eax
c010b953:	83 f8 03             	cmp    $0x3,%eax
c010b956:	75 02                	jne    c010b95a <do_wait+0xb0>
                goto found;
c010b958:	eb 66                	jmp    c010b9c0 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010b95a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b95d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b963:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b966:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b96a:	75 db                	jne    c010b947 <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010b96c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b970:	74 44                	je     c010b9b6 <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010b972:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b977:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010b97d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b982:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010b989:	00 00 80 
        schedule();
c010b98c:	e8 17 0a 00 00       	call   c010c3a8 <schedule>
        if (current->flags & PF_EXITING) {
c010b991:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b996:	8b 40 44             	mov    0x44(%eax),%eax
c010b999:	83 e0 01             	and    $0x1,%eax
c010b99c:	85 c0                	test   %eax,%eax
c010b99e:	74 11                	je     c010b9b1 <do_wait+0x107>
            do_exit(-E_KILLED);
c010b9a0:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010b9a7:	e8 56 f5 ff ff       	call   c010af02 <do_exit>
        }
        goto repeat;
c010b9ac:	e9 40 ff ff ff       	jmp    c010b8f1 <do_wait+0x47>
c010b9b1:	e9 3b ff ff ff       	jmp    c010b8f1 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010b9b6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010b9bb:	e9 88 00 00 00       	jmp    c010ba48 <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010b9c0:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010b9c5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b9c8:	74 0a                	je     c010b9d4 <do_wait+0x12a>
c010b9ca:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b9cf:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b9d2:	75 1c                	jne    c010b9f0 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010b9d4:	c7 44 24 08 6e fc 10 	movl   $0xc010fc6e,0x8(%esp)
c010b9db:	c0 
c010b9dc:	c7 44 24 04 53 03 00 	movl   $0x353,0x4(%esp)
c010b9e3:	00 
c010b9e4:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010b9eb:	e8 ea 53 ff ff       	call   c0100dda <__panic>
    }
    if (code_store != NULL) {
c010b9f0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b9f4:	74 0e                	je     c010ba04 <do_wait+0x15a>
        *code_store = proc->exit_code;
c010b9f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9f9:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010b9ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba02:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010ba04:	e8 87 e8 ff ff       	call   c010a290 <__intr_save>
c010ba09:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010ba0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba0f:	89 04 24             	mov    %eax,(%esp)
c010ba12:	e8 b5 ef ff ff       	call   c010a9cc <unhash_proc>
        remove_links(proc);
c010ba17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba1a:	89 04 24             	mov    %eax,(%esp)
c010ba1d:	e8 05 ed ff ff       	call   c010a727 <remove_links>
    }
    local_intr_restore(intr_flag);
c010ba22:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba25:	89 04 24             	mov    %eax,(%esp)
c010ba28:	e8 8d e8 ff ff       	call   c010a2ba <__intr_restore>
    put_kstack(proc);
c010ba2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba30:	89 04 24             	mov    %eax,(%esp)
c010ba33:	e8 eb f0 ff ff       	call   c010ab23 <put_kstack>
    kfree(proc);
c010ba38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba3b:	89 04 24             	mov    %eax,(%esp)
c010ba3e:	e8 72 91 ff ff       	call   c0104bb5 <kfree>
    return 0;
c010ba43:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ba48:	c9                   	leave  
c010ba49:	c3                   	ret    

c010ba4a <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010ba4a:	55                   	push   %ebp
c010ba4b:	89 e5                	mov    %esp,%ebp
c010ba4d:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010ba50:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba53:	89 04 24             	mov    %eax,(%esp)
c010ba56:	e8 a6 ef ff ff       	call   c010aa01 <find_proc>
c010ba5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba62:	74 44                	je     c010baa8 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010ba64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba67:	8b 40 44             	mov    0x44(%eax),%eax
c010ba6a:	83 e0 01             	and    $0x1,%eax
c010ba6d:	85 c0                	test   %eax,%eax
c010ba6f:	75 30                	jne    c010baa1 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010ba71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba74:	8b 40 44             	mov    0x44(%eax),%eax
c010ba77:	83 c8 01             	or     $0x1,%eax
c010ba7a:	89 c2                	mov    %eax,%edx
c010ba7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba7f:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010ba82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba85:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ba8b:	85 c0                	test   %eax,%eax
c010ba8d:	79 0b                	jns    c010ba9a <do_kill+0x50>
                wakeup_proc(proc);
c010ba8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba92:	89 04 24             	mov    %eax,(%esp)
c010ba95:	e8 72 08 00 00       	call   c010c30c <wakeup_proc>
            }
            return 0;
c010ba9a:	b8 00 00 00 00       	mov    $0x0,%eax
c010ba9f:	eb 0c                	jmp    c010baad <do_kill+0x63>
        }
        return -E_KILLED;
c010baa1:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010baa6:	eb 05                	jmp    c010baad <do_kill+0x63>
    }
    return -E_INVAL;
c010baa8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010baad:	c9                   	leave  
c010baae:	c3                   	ret    

c010baaf <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010baaf:	55                   	push   %ebp
c010bab0:	89 e5                	mov    %esp,%ebp
c010bab2:	57                   	push   %edi
c010bab3:	56                   	push   %esi
c010bab4:	53                   	push   %ebx
c010bab5:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010bab8:	8b 45 08             	mov    0x8(%ebp),%eax
c010babb:	89 04 24             	mov    %eax,(%esp)
c010babe:	e8 6f 16 00 00       	call   c010d132 <strlen>
c010bac3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010bac6:	b8 04 00 00 00       	mov    $0x4,%eax
c010bacb:	8b 55 08             	mov    0x8(%ebp),%edx
c010bace:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010bad1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010bad4:	8b 75 10             	mov    0x10(%ebp),%esi
c010bad7:	89 f7                	mov    %esi,%edi
c010bad9:	cd 80                	int    $0x80
c010badb:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010bade:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010bae1:	83 c4 2c             	add    $0x2c,%esp
c010bae4:	5b                   	pop    %ebx
c010bae5:	5e                   	pop    %esi
c010bae6:	5f                   	pop    %edi
c010bae7:	5d                   	pop    %ebp
c010bae8:	c3                   	ret    

c010bae9 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010bae9:	55                   	push   %ebp
c010baea:	89 e5                	mov    %esp,%ebp
c010baec:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
#else
    KERNEL_EXECVE(exit);
c010baef:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010baf4:	8b 40 04             	mov    0x4(%eax),%eax
c010baf7:	c7 44 24 08 8a fc 10 	movl   $0xc010fc8a,0x8(%esp)
c010bafe:	c0 
c010baff:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb03:	c7 04 24 90 fc 10 c0 	movl   $0xc010fc90,(%esp)
c010bb0a:	e8 49 48 ff ff       	call   c0100358 <cprintf>
c010bb0f:	b8 76 79 00 00       	mov    $0x7976,%eax
c010bb14:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bb18:	c7 44 24 04 38 8b 14 	movl   $0xc0148b38,0x4(%esp)
c010bb1f:	c0 
c010bb20:	c7 04 24 8a fc 10 c0 	movl   $0xc010fc8a,(%esp)
c010bb27:	e8 83 ff ff ff       	call   c010baaf <kernel_execve>
#endif
    panic("user_main execve failed.\n");
c010bb2c:	c7 44 24 08 b7 fc 10 	movl   $0xc010fcb7,0x8(%esp)
c010bb33:	c0 
c010bb34:	c7 44 24 04 9c 03 00 	movl   $0x39c,0x4(%esp)
c010bb3b:	00 
c010bb3c:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010bb43:	e8 92 52 ff ff       	call   c0100dda <__panic>

c010bb48 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010bb48:	55                   	push   %ebp
c010bb49:	89 e5                	mov    %esp,%ebp
c010bb4b:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010bb4e:	e8 59 95 ff ff       	call   c01050ac <nr_free_pages>
c010bb53:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010bb56:	e8 22 8f ff ff       	call   c0104a7d <kallocated>
c010bb5b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010bb5e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bb65:	00 
c010bb66:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bb6d:	00 
c010bb6e:	c7 04 24 e9 ba 10 c0 	movl   $0xc010bae9,(%esp)
c010bb75:	e8 fb ee ff ff       	call   c010aa75 <kernel_thread>
c010bb7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010bb7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bb81:	7f 1c                	jg     c010bb9f <init_main+0x57>
        panic("create user_main failed.\n");
c010bb83:	c7 44 24 08 d1 fc 10 	movl   $0xc010fcd1,0x8(%esp)
c010bb8a:	c0 
c010bb8b:	c7 44 24 04 a7 03 00 	movl   $0x3a7,0x4(%esp)
c010bb92:	00 
c010bb93:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010bb9a:	e8 3b 52 ff ff       	call   c0100dda <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010bb9f:	e8 0e da ff ff       	call   c01095b2 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010bba4:	eb 05                	jmp    c010bbab <init_main+0x63>
        schedule();
c010bba6:	e8 fd 07 00 00       	call   c010c3a8 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010bbab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bbb2:	00 
c010bbb3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bbba:	e8 eb fc ff ff       	call   c010b8aa <do_wait>
c010bbbf:	85 c0                	test   %eax,%eax
c010bbc1:	74 e3                	je     c010bba6 <init_main+0x5e>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010bbc3:	c7 04 24 ec fc 10 c0 	movl   $0xc010fcec,(%esp)
c010bbca:	e8 89 47 ff ff       	call   c0100358 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010bbcf:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bbd4:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bbda:	85 c0                	test   %eax,%eax
c010bbdc:	75 1e                	jne    c010bbfc <init_main+0xb4>
c010bbde:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bbe3:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bbe9:	85 c0                	test   %eax,%eax
c010bbeb:	75 0f                	jne    c010bbfc <init_main+0xb4>
c010bbed:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bbf2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bbf8:	85 c0                	test   %eax,%eax
c010bbfa:	74 24                	je     c010bc20 <init_main+0xd8>
c010bbfc:	c7 44 24 0c 10 fd 10 	movl   $0xc010fd10,0xc(%esp)
c010bc03:	c0 
c010bc04:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010bc0b:	c0 
c010bc0c:	c7 44 24 04 b1 03 00 	movl   $0x3b1,0x4(%esp)
c010bc13:	00 
c010bc14:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010bc1b:	e8 ba 51 ff ff       	call   c0100dda <__panic>
    assert(nr_process == 2);
c010bc20:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010bc25:	83 f8 02             	cmp    $0x2,%eax
c010bc28:	74 24                	je     c010bc4e <init_main+0x106>
c010bc2a:	c7 44 24 0c 5b fd 10 	movl   $0xc010fd5b,0xc(%esp)
c010bc31:	c0 
c010bc32:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010bc39:	c0 
c010bc3a:	c7 44 24 04 b2 03 00 	movl   $0x3b2,0x4(%esp)
c010bc41:	00 
c010bc42:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010bc49:	e8 8c 51 ff ff       	call   c0100dda <__panic>
c010bc4e:	c7 45 e8 bc 56 1c c0 	movl   $0xc01c56bc,-0x18(%ebp)
c010bc55:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc58:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010bc5b:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
c010bc61:	83 c2 7c             	add    $0x7c,%edx
c010bc64:	39 d0                	cmp    %edx,%eax
c010bc66:	74 24                	je     c010bc8c <init_main+0x144>
c010bc68:	c7 44 24 0c 6c fd 10 	movl   $0xc010fd6c,0xc(%esp)
c010bc6f:	c0 
c010bc70:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010bc77:	c0 
c010bc78:	c7 44 24 04 b3 03 00 	movl   $0x3b3,0x4(%esp)
c010bc7f:	00 
c010bc80:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010bc87:	e8 4e 51 ff ff       	call   c0100dda <__panic>
c010bc8c:	c7 45 e4 bc 56 1c c0 	movl   $0xc01c56bc,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010bc93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bc96:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010bc98:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
c010bc9e:	83 c2 7c             	add    $0x7c,%edx
c010bca1:	39 d0                	cmp    %edx,%eax
c010bca3:	74 24                	je     c010bcc9 <init_main+0x181>
c010bca5:	c7 44 24 0c 9c fd 10 	movl   $0xc010fd9c,0xc(%esp)
c010bcac:	c0 
c010bcad:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010bcb4:	c0 
c010bcb5:	c7 44 24 04 b4 03 00 	movl   $0x3b4,0x4(%esp)
c010bcbc:	00 
c010bcbd:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010bcc4:	e8 11 51 ff ff       	call   c0100dda <__panic>

    cprintf("init check memory pass.\n");
c010bcc9:	c7 04 24 cc fd 10 c0 	movl   $0xc010fdcc,(%esp)
c010bcd0:	e8 83 46 ff ff       	call   c0100358 <cprintf>
    return 0;
c010bcd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bcda:	c9                   	leave  
c010bcdb:	c3                   	ret    

c010bcdc <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010bcdc:	55                   	push   %ebp
c010bcdd:	89 e5                	mov    %esp,%ebp
c010bcdf:	83 ec 28             	sub    $0x28,%esp
c010bce2:	c7 45 ec bc 56 1c c0 	movl   $0xc01c56bc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bce9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bcec:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bcef:	89 50 04             	mov    %edx,0x4(%eax)
c010bcf2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bcf5:	8b 50 04             	mov    0x4(%eax),%edx
c010bcf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bcfb:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010bcfd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010bd04:	eb 26                	jmp    c010bd2c <proc_init+0x50>
        list_init(hash_list + i);
c010bd06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd09:	c1 e0 03             	shl    $0x3,%eax
c010bd0c:	05 60 34 1c c0       	add    $0xc01c3460,%eax
c010bd11:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bd14:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd17:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bd1a:	89 50 04             	mov    %edx,0x4(%eax)
c010bd1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd20:	8b 50 04             	mov    0x4(%eax),%edx
c010bd23:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd26:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010bd28:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010bd2c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010bd33:	7e d1                	jle    c010bd06 <proc_init+0x2a>
    /*
     * 第0个内核线程 -- idleproc
     * 把proc进行初步初始化（即把proc_struct中的各个成员变量清零）。但有些成员变量设置了特殊的值（这里是第一步初始化，后面还需要进一步初始化）
     * 第一步初始化可参考alloc_proc函数
     */
    if ((idleproc = alloc_proc()) == NULL) {
c010bd35:	e8 2d e7 ff ff       	call   c010a467 <alloc_proc>
c010bd3a:	a3 40 34 1c c0       	mov    %eax,0xc01c3440
c010bd3f:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd44:	85 c0                	test   %eax,%eax
c010bd46:	75 1c                	jne    c010bd64 <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010bd48:	c7 44 24 08 e5 fd 10 	movl   $0xc010fde5,0x8(%esp)
c010bd4f:	c0 
c010bd50:	c7 44 24 04 cb 03 00 	movl   $0x3cb,0x4(%esp)
c010bd57:	00 
c010bd58:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010bd5f:	e8 76 50 ff ff       	call   c0100dda <__panic>
    }

    // 进行进一步初始化
    idleproc->pid = 0;								// 给了idleproc合法的身份证号--0
c010bd64:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd69:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;				// 第二条语句改变了idleproc的状态，使得它从“出生”转到了“准备工作”，就差uCore调度它执行了。
c010bd70:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd75:	c7 00 02 00 00 00    	movl   $0x2,(%eax)

    idleproc->kstack = (uintptr_t)bootstack;		// 第三条语句设置了idleproc所使用的内核栈的起始地址。
c010bd7b:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd80:	ba 00 f0 12 c0       	mov    $0xc012f000,%edx
c010bd85:	89 50 0c             	mov    %edx,0xc(%eax)
    												// 需要注意以后的其他线程的内核栈都需要通过分配获得，因为uCore启动时设置的内核栈直接分配给idleproc使用了。
    idleproc->need_resched = 1;						// 设置为1表示允许CPU对其调度（调走），执行完这个进程后，该干嘛干嘛。Ucore不希望它一直霸占CPU
c010bd88:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd8d:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010bd94:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd99:	c7 44 24 04 fd fd 10 	movl   $0xc010fdfd,0x4(%esp)
c010bda0:	c0 
c010bda1:	89 04 24             	mov    %eax,(%esp)
c010bda4:	e8 3f e8 ff ff       	call   c010a5e8 <set_proc_name>
    nr_process ++;
c010bda9:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010bdae:	83 c0 01             	add    $0x1,%eax
c010bdb1:	a3 60 54 1c c0       	mov    %eax,0xc01c5460

    current = idleproc;
c010bdb6:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bdbb:	a3 48 34 1c c0       	mov    %eax,0xc01c3448

    int pid = kernel_thread(init_main, NULL, 0);
c010bdc0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bdc7:	00 
c010bdc8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bdcf:	00 
c010bdd0:	c7 04 24 48 bb 10 c0 	movl   $0xc010bb48,(%esp)
c010bdd7:	e8 99 ec ff ff       	call   c010aa75 <kernel_thread>
c010bddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010bddf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bde3:	7f 1c                	jg     c010be01 <proc_init+0x125>
        panic("create init_main failed.\n");
c010bde5:	c7 44 24 08 02 fe 10 	movl   $0xc010fe02,0x8(%esp)
c010bdec:	c0 
c010bded:	c7 44 24 04 dc 03 00 	movl   $0x3dc,0x4(%esp)
c010bdf4:	00 
c010bdf5:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010bdfc:	e8 d9 4f ff ff       	call   c0100dda <__panic>
    }

    initproc = find_proc(pid);
c010be01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be04:	89 04 24             	mov    %eax,(%esp)
c010be07:	e8 f5 eb ff ff       	call   c010aa01 <find_proc>
c010be0c:	a3 44 34 1c c0       	mov    %eax,0xc01c3444
    set_proc_name(initproc, "init");
c010be11:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010be16:	c7 44 24 04 1c fe 10 	movl   $0xc010fe1c,0x4(%esp)
c010be1d:	c0 
c010be1e:	89 04 24             	mov    %eax,(%esp)
c010be21:	e8 c2 e7 ff ff       	call   c010a5e8 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010be26:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010be2b:	85 c0                	test   %eax,%eax
c010be2d:	74 0c                	je     c010be3b <proc_init+0x15f>
c010be2f:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010be34:	8b 40 04             	mov    0x4(%eax),%eax
c010be37:	85 c0                	test   %eax,%eax
c010be39:	74 24                	je     c010be5f <proc_init+0x183>
c010be3b:	c7 44 24 0c 24 fe 10 	movl   $0xc010fe24,0xc(%esp)
c010be42:	c0 
c010be43:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010be4a:	c0 
c010be4b:	c7 44 24 04 e2 03 00 	movl   $0x3e2,0x4(%esp)
c010be52:	00 
c010be53:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010be5a:	e8 7b 4f ff ff       	call   c0100dda <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010be5f:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010be64:	85 c0                	test   %eax,%eax
c010be66:	74 0d                	je     c010be75 <proc_init+0x199>
c010be68:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010be6d:	8b 40 04             	mov    0x4(%eax),%eax
c010be70:	83 f8 01             	cmp    $0x1,%eax
c010be73:	74 24                	je     c010be99 <proc_init+0x1bd>
c010be75:	c7 44 24 0c 4c fe 10 	movl   $0xc010fe4c,0xc(%esp)
c010be7c:	c0 
c010be7d:	c7 44 24 08 92 fa 10 	movl   $0xc010fa92,0x8(%esp)
c010be84:	c0 
c010be85:	c7 44 24 04 e3 03 00 	movl   $0x3e3,0x4(%esp)
c010be8c:	00 
c010be8d:	c7 04 24 68 fa 10 c0 	movl   $0xc010fa68,(%esp)
c010be94:	e8 41 4f ff ff       	call   c0100dda <__panic>
}
c010be99:	c9                   	leave  
c010be9a:	c3                   	ret    

c010be9b <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010be9b:	55                   	push   %ebp
c010be9c:	89 e5                	mov    %esp,%ebp
c010be9e:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010bea1:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bea6:	8b 40 10             	mov    0x10(%eax),%eax
c010bea9:	85 c0                	test   %eax,%eax
c010beab:	74 07                	je     c010beb4 <cpu_idle+0x19>
            schedule();
c010bead:	e8 f6 04 00 00       	call   c010c3a8 <schedule>
        }
    }
c010beb2:	eb ed                	jmp    c010bea1 <cpu_idle+0x6>
c010beb4:	eb eb                	jmp    c010bea1 <cpu_idle+0x6>

c010beb6 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010beb6:	55                   	push   %ebp
c010beb7:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010beb9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bebd:	75 11                	jne    c010bed0 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010bebf:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bec4:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010becb:	00 00 00 
c010bece:	eb 0e                	jmp    c010bede <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010bed0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bed5:	8b 55 08             	mov    0x8(%ebp),%edx
c010bed8:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010bede:	5d                   	pop    %ebp
c010bedf:	c3                   	ret    

c010bee0 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010bee0:	55                   	push   %ebp
c010bee1:	89 e5                	mov    %esp,%ebp
c010bee3:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010bee6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010beea:	75 07                	jne    c010bef3 <do_sleep+0x13>
        return 0;
c010beec:	b8 00 00 00 00       	mov    $0x0,%eax
c010bef1:	eb 6b                	jmp    c010bf5e <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010bef3:	e8 98 e3 ff ff       	call   c010a290 <__intr_save>
c010bef8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010befb:	8b 55 08             	mov    0x8(%ebp),%edx
c010befe:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bf03:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bf07:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf0b:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010bf0e:	89 04 24             	mov    %eax,(%esp)
c010bf11:	e8 41 e3 ff ff       	call   c010a257 <timer_init>
c010bf16:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010bf19:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bf1e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010bf24:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bf29:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010bf30:	00 00 80 
    add_timer(timer);
c010bf33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf36:	89 04 24             	mov    %eax,(%esp)
c010bf39:	e8 f5 04 00 00       	call   c010c433 <add_timer>
    local_intr_restore(intr_flag);
c010bf3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf41:	89 04 24             	mov    %eax,(%esp)
c010bf44:	e8 71 e3 ff ff       	call   c010a2ba <__intr_restore>

    schedule();
c010bf49:	e8 5a 04 00 00       	call   c010c3a8 <schedule>

    del_timer(timer);
c010bf4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf51:	89 04 24             	mov    %eax,(%esp)
c010bf54:	e8 18 06 00 00       	call   c010c571 <del_timer>
    return 0;
c010bf59:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bf5e:	c9                   	leave  
c010bf5f:	c3                   	ret    

c010bf60 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010bf60:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010bf64:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010bf66:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010bf69:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010bf6c:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010bf6f:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010bf72:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010bf75:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010bf78:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010bf7b:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010bf7f:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010bf82:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010bf85:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010bf88:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010bf8b:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010bf8e:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010bf91:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010bf94:	ff 30                	pushl  (%eax)

    ret
c010bf96:	c3                   	ret    

c010bf97 <RR_init>:
#include <proc.h>
#include <assert.h>
#include <default_sched.h>

static void
RR_init(struct run_queue *rq) {
c010bf97:	55                   	push   %ebp
c010bf98:	89 e5                	mov    %esp,%ebp
c010bf9a:	83 ec 10             	sub    $0x10,%esp
    list_init(&(rq->run_list));
c010bf9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfa0:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010bfa3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bfa6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bfa9:	89 50 04             	mov    %edx,0x4(%eax)
c010bfac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bfaf:	8b 50 04             	mov    0x4(%eax),%edx
c010bfb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bfb5:	89 10                	mov    %edx,(%eax)
    rq->proc_num = 0;
c010bfb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfba:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010bfc1:	c9                   	leave  
c010bfc2:	c3                   	ret    

c010bfc3 <RR_enqueue>:

static void
RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010bfc3:	55                   	push   %ebp
c010bfc4:	89 e5                	mov    %esp,%ebp
c010bfc6:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(proc->run_link)));
c010bfc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfcc:	05 a4 00 00 00       	add    $0xa4,%eax
c010bfd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010bfd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfd7:	8b 40 04             	mov    0x4(%eax),%eax
c010bfda:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bfdd:	0f 94 c0             	sete   %al
c010bfe0:	0f b6 c0             	movzbl %al,%eax
c010bfe3:	85 c0                	test   %eax,%eax
c010bfe5:	75 24                	jne    c010c00b <RR_enqueue+0x48>
c010bfe7:	c7 44 24 0c 74 fe 10 	movl   $0xc010fe74,0xc(%esp)
c010bfee:	c0 
c010bfef:	c7 44 24 08 92 fe 10 	movl   $0xc010fe92,0x8(%esp)
c010bff6:	c0 
c010bff7:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
c010bffe:	00 
c010bfff:	c7 04 24 a7 fe 10 c0 	movl   $0xc010fea7,(%esp)
c010c006:	e8 cf 4d ff ff       	call   c0100dda <__panic>
    list_add_before(&(rq->run_list), &(proc->run_link));
c010c00b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c00e:	8d 90 a4 00 00 00    	lea    0xa4(%eax),%edx
c010c014:	8b 45 08             	mov    0x8(%ebp),%eax
c010c017:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c01a:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010c01d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c020:	8b 00                	mov    (%eax),%eax
c010c022:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c025:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c028:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c02b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c02e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c031:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c034:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c037:	89 10                	mov    %edx,(%eax)
c010c039:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c03c:	8b 10                	mov    (%eax),%edx
c010c03e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c041:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c044:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c047:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c04a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c04d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c050:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c053:	89 10                	mov    %edx,(%eax)
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010c055:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c058:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c05e:	85 c0                	test   %eax,%eax
c010c060:	74 13                	je     c010c075 <RR_enqueue+0xb2>
c010c062:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c065:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010c06b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c06e:	8b 40 0c             	mov    0xc(%eax),%eax
c010c071:	39 c2                	cmp    %eax,%edx
c010c073:	7e 0f                	jle    c010c084 <RR_enqueue+0xc1>
        proc->time_slice = rq->max_time_slice;
c010c075:	8b 45 08             	mov    0x8(%ebp),%eax
c010c078:	8b 50 0c             	mov    0xc(%eax),%edx
c010c07b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c07e:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    proc->rq = rq;
c010c084:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c087:	8b 55 08             	mov    0x8(%ebp),%edx
c010c08a:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    rq->proc_num ++;
c010c090:	8b 45 08             	mov    0x8(%ebp),%eax
c010c093:	8b 40 08             	mov    0x8(%eax),%eax
c010c096:	8d 50 01             	lea    0x1(%eax),%edx
c010c099:	8b 45 08             	mov    0x8(%ebp),%eax
c010c09c:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c09f:	c9                   	leave  
c010c0a0:	c3                   	ret    

c010c0a1 <RR_dequeue>:

static void
RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010c0a1:	55                   	push   %ebp
c010c0a2:	89 e5                	mov    %esp,%ebp
c010c0a4:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
c010c0a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0aa:	05 a4 00 00 00       	add    $0xa4,%eax
c010c0af:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c0b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0b5:	8b 40 04             	mov    0x4(%eax),%eax
c010c0b8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c0bb:	0f 94 c0             	sete   %al
c010c0be:	0f b6 c0             	movzbl %al,%eax
c010c0c1:	85 c0                	test   %eax,%eax
c010c0c3:	75 0e                	jne    c010c0d3 <RR_dequeue+0x32>
c010c0c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0c8:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
c010c0ce:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c0d1:	74 24                	je     c010c0f7 <RR_dequeue+0x56>
c010c0d3:	c7 44 24 0c c8 fe 10 	movl   $0xc010fec8,0xc(%esp)
c010c0da:	c0 
c010c0db:	c7 44 24 08 92 fe 10 	movl   $0xc010fe92,0x8(%esp)
c010c0e2:	c0 
c010c0e3:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c010c0ea:	00 
c010c0eb:	c7 04 24 a7 fe 10 c0 	movl   $0xc010fea7,(%esp)
c010c0f2:	e8 e3 4c ff ff       	call   c0100dda <__panic>
    list_del_init(&(proc->run_link));
c010c0f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0fa:	05 a4 00 00 00       	add    $0xa4,%eax
c010c0ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c102:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c105:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c108:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c10b:	8b 40 04             	mov    0x4(%eax),%eax
c010c10e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c111:	8b 12                	mov    (%edx),%edx
c010c113:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c116:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c119:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c11c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c11f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c122:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c125:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c128:	89 10                	mov    %edx,(%eax)
c010c12a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c12d:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c130:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c133:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c136:	89 50 04             	mov    %edx,0x4(%eax)
c010c139:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c13c:	8b 50 04             	mov    0x4(%eax),%edx
c010c13f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c142:	89 10                	mov    %edx,(%eax)
    rq->proc_num --;
c010c144:	8b 45 08             	mov    0x8(%ebp),%eax
c010c147:	8b 40 08             	mov    0x8(%eax),%eax
c010c14a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c14d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c150:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c153:	c9                   	leave  
c010c154:	c3                   	ret    

c010c155 <RR_pick_next>:

static struct proc_struct *
RR_pick_next(struct run_queue *rq) {
c010c155:	55                   	push   %ebp
c010c156:	89 e5                	mov    %esp,%ebp
c010c158:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(rq->run_list));
c010c15b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c15e:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c161:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c164:	8b 40 04             	mov    0x4(%eax),%eax
c010c167:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(rq->run_list)) {
c010c16a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c16d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010c170:	74 0a                	je     c010c17c <RR_pick_next+0x27>
        return le2proc(le, run_link);
c010c172:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c175:	2d a4 00 00 00       	sub    $0xa4,%eax
c010c17a:	eb 05                	jmp    c010c181 <RR_pick_next+0x2c>
    }
    return NULL;
c010c17c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c181:	c9                   	leave  
c010c182:	c3                   	ret    

c010c183 <RR_proc_tick>:

static void
RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010c183:	55                   	push   %ebp
c010c184:	89 e5                	mov    %esp,%ebp
    if (proc->time_slice > 0) {
c010c186:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c189:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c18f:	85 c0                	test   %eax,%eax
c010c191:	7e 15                	jle    c010c1a8 <RR_proc_tick+0x25>
        proc->time_slice --;
c010c193:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c196:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c19c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c19f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1a2:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    if (proc->time_slice == 0) {
c010c1a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1ab:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c1b1:	85 c0                	test   %eax,%eax
c010c1b3:	75 0a                	jne    c010c1bf <RR_proc_tick+0x3c>
        proc->need_resched = 1;
c010c1b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1b8:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010c1bf:	5d                   	pop    %ebp
c010c1c0:	c3                   	ret    

c010c1c1 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010c1c1:	55                   	push   %ebp
c010c1c2:	89 e5                	mov    %esp,%ebp
c010c1c4:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c1c7:	9c                   	pushf  
c010c1c8:	58                   	pop    %eax
c010c1c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010c1cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c1cf:	25 00 02 00 00       	and    $0x200,%eax
c010c1d4:	85 c0                	test   %eax,%eax
c010c1d6:	74 0c                	je     c010c1e4 <__intr_save+0x23>
        intr_disable();
c010c1d8:	e8 55 5e ff ff       	call   c0102032 <intr_disable>
        return 1;
c010c1dd:	b8 01 00 00 00       	mov    $0x1,%eax
c010c1e2:	eb 05                	jmp    c010c1e9 <__intr_save+0x28>
    }
    return 0;
c010c1e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c1e9:	c9                   	leave  
c010c1ea:	c3                   	ret    

c010c1eb <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010c1eb:	55                   	push   %ebp
c010c1ec:	89 e5                	mov    %esp,%ebp
c010c1ee:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c1f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c1f5:	74 05                	je     c010c1fc <__intr_restore+0x11>
        intr_enable();
c010c1f7:	e8 30 5e ff ff       	call   c010202c <intr_enable>
    }
}
c010c1fc:	c9                   	leave  
c010c1fd:	c3                   	ret    

c010c1fe <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010c1fe:	55                   	push   %ebp
c010c1ff:	89 e5                	mov    %esp,%ebp
c010c201:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c204:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c209:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c20c:	74 1a                	je     c010c228 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010c20e:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c213:	8b 40 08             	mov    0x8(%eax),%eax
c010c216:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c21c:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c21f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c223:	89 14 24             	mov    %edx,(%esp)
c010c226:	ff d0                	call   *%eax
    }
}
c010c228:	c9                   	leave  
c010c229:	c3                   	ret    

c010c22a <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010c22a:	55                   	push   %ebp
c010c22b:	89 e5                	mov    %esp,%ebp
c010c22d:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010c230:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c235:	8b 40 0c             	mov    0xc(%eax),%eax
c010c238:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c23e:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c241:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c245:	89 14 24             	mov    %edx,(%esp)
c010c248:	ff d0                	call   *%eax
}
c010c24a:	c9                   	leave  
c010c24b:	c3                   	ret    

c010c24c <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010c24c:	55                   	push   %ebp
c010c24d:	89 e5                	mov    %esp,%ebp
c010c24f:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010c252:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c257:	8b 40 10             	mov    0x10(%eax),%eax
c010c25a:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c260:	89 14 24             	mov    %edx,(%esp)
c010c263:	ff d0                	call   *%eax
}
c010c265:	c9                   	leave  
c010c266:	c3                   	ret    

c010c267 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010c267:	55                   	push   %ebp
c010c268:	89 e5                	mov    %esp,%ebp
c010c26a:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c26d:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c272:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c275:	74 1c                	je     c010c293 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010c277:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c27c:	8b 40 14             	mov    0x14(%eax),%eax
c010c27f:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c285:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c288:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c28c:	89 14 24             	mov    %edx,(%esp)
c010c28f:	ff d0                	call   *%eax
c010c291:	eb 0a                	jmp    c010c29d <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010c293:	8b 45 08             	mov    0x8(%ebp),%eax
c010c296:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010c29d:	c9                   	leave  
c010c29e:	c3                   	ret    

c010c29f <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010c29f:	55                   	push   %ebp
c010c2a0:	89 e5                	mov    %esp,%ebp
c010c2a2:	83 ec 28             	sub    $0x28,%esp
c010c2a5:	c7 45 f4 b4 54 1c c0 	movl   $0xc01c54b4,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c2ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c2b2:	89 50 04             	mov    %edx,0x4(%eax)
c010c2b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2b8:	8b 50 04             	mov    0x4(%eax),%edx
c010c2bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2be:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010c2c0:	c7 05 bc 54 1c c0 8c 	movl   $0xc0131a8c,0xc01c54bc
c010c2c7:	1a 13 c0 

    rq = &__rq;
c010c2ca:	c7 05 c0 54 1c c0 c4 	movl   $0xc01c54c4,0xc01c54c0
c010c2d1:	54 1c c0 
    rq->max_time_slice = 20;
c010c2d4:	a1 c0 54 1c c0       	mov    0xc01c54c0,%eax
c010c2d9:	c7 40 0c 14 00 00 00 	movl   $0x14,0xc(%eax)
    sched_class->init(rq);
c010c2e0:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c2e5:	8b 40 04             	mov    0x4(%eax),%eax
c010c2e8:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c2ee:	89 14 24             	mov    %edx,(%esp)
c010c2f1:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010c2f3:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c2f8:	8b 00                	mov    (%eax),%eax
c010c2fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c2fe:	c7 04 24 08 ff 10 c0 	movl   $0xc010ff08,(%esp)
c010c305:	e8 4e 40 ff ff       	call   c0100358 <cprintf>
}
c010c30a:	c9                   	leave  
c010c30b:	c3                   	ret    

c010c30c <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010c30c:	55                   	push   %ebp
c010c30d:	89 e5                	mov    %esp,%ebp
c010c30f:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010c312:	8b 45 08             	mov    0x8(%ebp),%eax
c010c315:	8b 00                	mov    (%eax),%eax
c010c317:	83 f8 03             	cmp    $0x3,%eax
c010c31a:	75 24                	jne    c010c340 <wakeup_proc+0x34>
c010c31c:	c7 44 24 0c 19 ff 10 	movl   $0xc010ff19,0xc(%esp)
c010c323:	c0 
c010c324:	c7 44 24 08 34 ff 10 	movl   $0xc010ff34,0x8(%esp)
c010c32b:	c0 
c010c32c:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010c333:	00 
c010c334:	c7 04 24 49 ff 10 c0 	movl   $0xc010ff49,(%esp)
c010c33b:	e8 9a 4a ff ff       	call   c0100dda <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c340:	e8 7c fe ff ff       	call   c010c1c1 <__intr_save>
c010c345:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010c348:	8b 45 08             	mov    0x8(%ebp),%eax
c010c34b:	8b 00                	mov    (%eax),%eax
c010c34d:	83 f8 02             	cmp    $0x2,%eax
c010c350:	74 2d                	je     c010c37f <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010c352:	8b 45 08             	mov    0x8(%ebp),%eax
c010c355:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010c35b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c35e:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c365:	00 00 00 
            if (proc != current) {
c010c368:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c36d:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c370:	74 29                	je     c010c39b <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010c372:	8b 45 08             	mov    0x8(%ebp),%eax
c010c375:	89 04 24             	mov    %eax,(%esp)
c010c378:	e8 81 fe ff ff       	call   c010c1fe <sched_class_enqueue>
c010c37d:	eb 1c                	jmp    c010c39b <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010c37f:	c7 44 24 08 5f ff 10 	movl   $0xc010ff5f,0x8(%esp)
c010c386:	c0 
c010c387:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010c38e:	00 
c010c38f:	c7 04 24 49 ff 10 c0 	movl   $0xc010ff49,(%esp)
c010c396:	e8 ab 4a ff ff       	call   c0100e46 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010c39b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c39e:	89 04 24             	mov    %eax,(%esp)
c010c3a1:	e8 45 fe ff ff       	call   c010c1eb <__intr_restore>
}
c010c3a6:	c9                   	leave  
c010c3a7:	c3                   	ret    

c010c3a8 <schedule>:

void
schedule(void) {
c010c3a8:	55                   	push   %ebp
c010c3a9:	89 e5                	mov    %esp,%ebp
c010c3ab:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010c3ae:	e8 0e fe ff ff       	call   c010c1c1 <__intr_save>
c010c3b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010c3b6:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c3bb:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010c3c2:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c3c7:	8b 00                	mov    (%eax),%eax
c010c3c9:	83 f8 02             	cmp    $0x2,%eax
c010c3cc:	75 0d                	jne    c010c3db <schedule+0x33>
            sched_class_enqueue(current);
c010c3ce:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c3d3:	89 04 24             	mov    %eax,(%esp)
c010c3d6:	e8 23 fe ff ff       	call   c010c1fe <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010c3db:	e8 6c fe ff ff       	call   c010c24c <sched_class_pick_next>
c010c3e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c3e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c3e7:	74 0b                	je     c010c3f4 <schedule+0x4c>
            sched_class_dequeue(next);
c010c3e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3ec:	89 04 24             	mov    %eax,(%esp)
c010c3ef:	e8 36 fe ff ff       	call   c010c22a <sched_class_dequeue>
        }
        if (next == NULL) {
c010c3f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c3f8:	75 08                	jne    c010c402 <schedule+0x5a>
            next = idleproc;
c010c3fa:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c3ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010c402:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c405:	8b 40 08             	mov    0x8(%eax),%eax
c010c408:	8d 50 01             	lea    0x1(%eax),%edx
c010c40b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c40e:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c411:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c416:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c419:	74 0b                	je     c010c426 <schedule+0x7e>
            proc_run(next);
c010c41b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c41e:	89 04 24             	mov    %eax,(%esp)
c010c421:	e8 9a e4 ff ff       	call   c010a8c0 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010c426:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c429:	89 04 24             	mov    %eax,(%esp)
c010c42c:	e8 ba fd ff ff       	call   c010c1eb <__intr_restore>
}
c010c431:	c9                   	leave  
c010c432:	c3                   	ret    

c010c433 <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010c433:	55                   	push   %ebp
c010c434:	89 e5                	mov    %esp,%ebp
c010c436:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c439:	e8 83 fd ff ff       	call   c010c1c1 <__intr_save>
c010c43e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010c441:	8b 45 08             	mov    0x8(%ebp),%eax
c010c444:	8b 00                	mov    (%eax),%eax
c010c446:	85 c0                	test   %eax,%eax
c010c448:	74 0a                	je     c010c454 <add_timer+0x21>
c010c44a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c44d:	8b 40 04             	mov    0x4(%eax),%eax
c010c450:	85 c0                	test   %eax,%eax
c010c452:	75 24                	jne    c010c478 <add_timer+0x45>
c010c454:	c7 44 24 0c 7c ff 10 	movl   $0xc010ff7c,0xc(%esp)
c010c45b:	c0 
c010c45c:	c7 44 24 08 34 ff 10 	movl   $0xc010ff34,0x8(%esp)
c010c463:	c0 
c010c464:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010c46b:	00 
c010c46c:	c7 04 24 49 ff 10 c0 	movl   $0xc010ff49,(%esp)
c010c473:	e8 62 49 ff ff       	call   c0100dda <__panic>
        assert(list_empty(&(timer->timer_link)));
c010c478:	8b 45 08             	mov    0x8(%ebp),%eax
c010c47b:	83 c0 08             	add    $0x8,%eax
c010c47e:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c481:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c484:	8b 40 04             	mov    0x4(%eax),%eax
c010c487:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c48a:	0f 94 c0             	sete   %al
c010c48d:	0f b6 c0             	movzbl %al,%eax
c010c490:	85 c0                	test   %eax,%eax
c010c492:	75 24                	jne    c010c4b8 <add_timer+0x85>
c010c494:	c7 44 24 0c a8 ff 10 	movl   $0xc010ffa8,0xc(%esp)
c010c49b:	c0 
c010c49c:	c7 44 24 08 34 ff 10 	movl   $0xc010ff34,0x8(%esp)
c010c4a3:	c0 
c010c4a4:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010c4ab:	00 
c010c4ac:	c7 04 24 49 ff 10 c0 	movl   $0xc010ff49,(%esp)
c010c4b3:	e8 22 49 ff ff       	call   c0100dda <__panic>
c010c4b8:	c7 45 e4 b4 54 1c c0 	movl   $0xc01c54b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c4bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c4c2:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010c4c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010c4c8:	eb 4a                	jmp    c010c514 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010c4ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4cd:	83 e8 08             	sub    $0x8,%eax
c010c4d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010c4d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4d6:	8b 10                	mov    (%eax),%edx
c010c4d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4db:	8b 00                	mov    (%eax),%eax
c010c4dd:	39 c2                	cmp    %eax,%edx
c010c4df:	73 13                	jae    c010c4f4 <add_timer+0xc1>
                next->expires -= timer->expires;
c010c4e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4e4:	8b 10                	mov    (%eax),%edx
c010c4e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4e9:	8b 00                	mov    (%eax),%eax
c010c4eb:	29 c2                	sub    %eax,%edx
c010c4ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4f0:	89 10                	mov    %edx,(%eax)
                break;
c010c4f2:	eb 29                	jmp    c010c51d <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010c4f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4f7:	8b 10                	mov    (%eax),%edx
c010c4f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4fc:	8b 00                	mov    (%eax),%eax
c010c4fe:	29 c2                	sub    %eax,%edx
c010c500:	8b 45 08             	mov    0x8(%ebp),%eax
c010c503:	89 10                	mov    %edx,(%eax)
c010c505:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c508:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c50b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c50e:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010c511:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010c514:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
c010c51b:	75 ad                	jne    c010c4ca <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010c51d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c520:	8d 50 08             	lea    0x8(%eax),%edx
c010c523:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c526:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c529:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010c52c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c52f:	8b 00                	mov    (%eax),%eax
c010c531:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c534:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c537:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c53a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c53d:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c540:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c543:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c546:	89 10                	mov    %edx,(%eax)
c010c548:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c54b:	8b 10                	mov    (%eax),%edx
c010c54d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c550:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c553:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c556:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010c559:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c55c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c55f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c562:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010c564:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c567:	89 04 24             	mov    %eax,(%esp)
c010c56a:	e8 7c fc ff ff       	call   c010c1eb <__intr_restore>
}
c010c56f:	c9                   	leave  
c010c570:	c3                   	ret    

c010c571 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010c571:	55                   	push   %ebp
c010c572:	89 e5                	mov    %esp,%ebp
c010c574:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c577:	e8 45 fc ff ff       	call   c010c1c1 <__intr_save>
c010c57c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010c57f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c582:	83 c0 08             	add    $0x8,%eax
c010c585:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c588:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c58b:	8b 40 04             	mov    0x4(%eax),%eax
c010c58e:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c591:	0f 94 c0             	sete   %al
c010c594:	0f b6 c0             	movzbl %al,%eax
c010c597:	85 c0                	test   %eax,%eax
c010c599:	0f 85 89 00 00 00    	jne    c010c628 <del_timer+0xb7>
            if (timer->expires != 0) {
c010c59f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5a2:	8b 00                	mov    (%eax),%eax
c010c5a4:	85 c0                	test   %eax,%eax
c010c5a6:	74 35                	je     c010c5dd <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010c5a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5ab:	83 c0 08             	add    $0x8,%eax
c010c5ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c5b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5b4:	8b 40 04             	mov    0x4(%eax),%eax
c010c5b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010c5ba:	81 7d f0 b4 54 1c c0 	cmpl   $0xc01c54b4,-0x10(%ebp)
c010c5c1:	74 1a                	je     c010c5dd <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010c5c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5c6:	83 e8 08             	sub    $0x8,%eax
c010c5c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010c5cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5cf:	8b 10                	mov    (%eax),%edx
c010c5d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5d4:	8b 00                	mov    (%eax),%eax
c010c5d6:	01 c2                	add    %eax,%edx
c010c5d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5db:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010c5dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5e0:	83 c0 08             	add    $0x8,%eax
c010c5e3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c5e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c5e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c5ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c5ef:	8b 40 04             	mov    0x4(%eax),%eax
c010c5f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c5f5:	8b 12                	mov    (%edx),%edx
c010c5f7:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010c5fa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c5fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c600:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c603:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c606:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c609:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c60c:	89 10                	mov    %edx,(%eax)
c010c60e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c611:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c614:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c617:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c61a:	89 50 04             	mov    %edx,0x4(%eax)
c010c61d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c620:	8b 50 04             	mov    0x4(%eax),%edx
c010c623:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c626:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010c628:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c62b:	89 04 24             	mov    %eax,(%esp)
c010c62e:	e8 b8 fb ff ff       	call   c010c1eb <__intr_restore>
}
c010c633:	c9                   	leave  
c010c634:	c3                   	ret    

c010c635 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010c635:	55                   	push   %ebp
c010c636:	89 e5                	mov    %esp,%ebp
c010c638:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c63b:	e8 81 fb ff ff       	call   c010c1c1 <__intr_save>
c010c640:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c643:	c7 45 e4 b4 54 1c c0 	movl   $0xc01c54b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c64a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c64d:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010c650:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010c653:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
c010c65a:	0f 84 fb 00 00 00    	je     c010c75b <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010c660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c663:	83 e8 08             	sub    $0x8,%eax
c010c666:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010c669:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c66c:	8b 00                	mov    (%eax),%eax
c010c66e:	85 c0                	test   %eax,%eax
c010c670:	75 24                	jne    c010c696 <run_timer_list+0x61>
c010c672:	c7 44 24 0c c9 ff 10 	movl   $0xc010ffc9,0xc(%esp)
c010c679:	c0 
c010c67a:	c7 44 24 08 34 ff 10 	movl   $0xc010ff34,0x8(%esp)
c010c681:	c0 
c010c682:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010c689:	00 
c010c68a:	c7 04 24 49 ff 10 c0 	movl   $0xc010ff49,(%esp)
c010c691:	e8 44 47 ff ff       	call   c0100dda <__panic>
            timer->expires --;
c010c696:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c699:	8b 00                	mov    (%eax),%eax
c010c69b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c69e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6a1:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010c6a3:	e9 a6 00 00 00       	jmp    c010c74e <run_timer_list+0x119>
c010c6a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c6ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c6b1:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010c6b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010c6b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6ba:	8b 40 04             	mov    0x4(%eax),%eax
c010c6bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010c6c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c6c3:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c6c9:	85 c0                	test   %eax,%eax
c010c6cb:	74 31                	je     c010c6fe <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010c6cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c6d0:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c6d6:	85 c0                	test   %eax,%eax
c010c6d8:	78 4a                	js     c010c724 <run_timer_list+0xef>
c010c6da:	c7 44 24 0c e0 ff 10 	movl   $0xc010ffe0,0xc(%esp)
c010c6e1:	c0 
c010c6e2:	c7 44 24 08 34 ff 10 	movl   $0xc010ff34,0x8(%esp)
c010c6e9:	c0 
c010c6ea:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010c6f1:	00 
c010c6f2:	c7 04 24 49 ff 10 c0 	movl   $0xc010ff49,(%esp)
c010c6f9:	e8 dc 46 ff ff       	call   c0100dda <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010c6fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c701:	8b 40 04             	mov    0x4(%eax),%eax
c010c704:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c708:	c7 44 24 08 04 00 11 	movl   $0xc0110004,0x8(%esp)
c010c70f:	c0 
c010c710:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010c717:	00 
c010c718:	c7 04 24 49 ff 10 c0 	movl   $0xc010ff49,(%esp)
c010c71f:	e8 22 47 ff ff       	call   c0100e46 <__warn>
                }
                wakeup_proc(proc);
c010c724:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c727:	89 04 24             	mov    %eax,(%esp)
c010c72a:	e8 dd fb ff ff       	call   c010c30c <wakeup_proc>
                del_timer(timer);
c010c72f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c732:	89 04 24             	mov    %eax,(%esp)
c010c735:	e8 37 fe ff ff       	call   c010c571 <del_timer>
                if (le == &timer_list) {
c010c73a:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
c010c741:	75 02                	jne    c010c745 <run_timer_list+0x110>
                    break;
c010c743:	eb 16                	jmp    c010c75b <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010c745:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c748:	83 e8 08             	sub    $0x8,%eax
c010c74b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010c74e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c751:	8b 00                	mov    (%eax),%eax
c010c753:	85 c0                	test   %eax,%eax
c010c755:	0f 84 4d ff ff ff    	je     c010c6a8 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010c75b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c760:	89 04 24             	mov    %eax,(%esp)
c010c763:	e8 ff fa ff ff       	call   c010c267 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010c768:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c76b:	89 04 24             	mov    %eax,(%esp)
c010c76e:	e8 78 fa ff ff       	call   c010c1eb <__intr_restore>
}
c010c773:	c9                   	leave  
c010c774:	c3                   	ret    

c010c775 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010c775:	55                   	push   %ebp
c010c776:	89 e5                	mov    %esp,%ebp
c010c778:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010c77b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c77e:	8b 00                	mov    (%eax),%eax
c010c780:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010c783:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c786:	89 04 24             	mov    %eax,(%esp)
c010c789:	e8 74 e7 ff ff       	call   c010af02 <do_exit>
}
c010c78e:	c9                   	leave  
c010c78f:	c3                   	ret    

c010c790 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010c790:	55                   	push   %ebp
c010c791:	89 e5                	mov    %esp,%ebp
c010c793:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010c796:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c79b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c79e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010c7a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7a4:	8b 40 44             	mov    0x44(%eax),%eax
c010c7a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010c7aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7ad:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c7b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c7b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c7b8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c7bf:	e8 46 e6 ff ff       	call   c010ae0a <do_fork>
}
c010c7c4:	c9                   	leave  
c010c7c5:	c3                   	ret    

c010c7c6 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010c7c6:	55                   	push   %ebp
c010c7c7:	89 e5                	mov    %esp,%ebp
c010c7c9:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c7cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7cf:	8b 00                	mov    (%eax),%eax
c010c7d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010c7d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7d7:	83 c0 04             	add    $0x4,%eax
c010c7da:	8b 00                	mov    (%eax),%eax
c010c7dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010c7df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c7e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c7e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7e9:	89 04 24             	mov    %eax,(%esp)
c010c7ec:	e8 b9 f0 ff ff       	call   c010b8aa <do_wait>
}
c010c7f1:	c9                   	leave  
c010c7f2:	c3                   	ret    

c010c7f3 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010c7f3:	55                   	push   %ebp
c010c7f4:	89 e5                	mov    %esp,%ebp
c010c7f6:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010c7f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7fc:	8b 00                	mov    (%eax),%eax
c010c7fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010c801:	8b 45 08             	mov    0x8(%ebp),%eax
c010c804:	8b 40 04             	mov    0x4(%eax),%eax
c010c807:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010c80a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c80d:	83 c0 08             	add    $0x8,%eax
c010c810:	8b 00                	mov    (%eax),%eax
c010c812:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010c815:	8b 45 08             	mov    0x8(%ebp),%eax
c010c818:	8b 40 0c             	mov    0xc(%eax),%eax
c010c81b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010c81e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c821:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c825:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c828:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c82c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c82f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c836:	89 04 24             	mov    %eax,(%esp)
c010c839:	e8 20 ef ff ff       	call   c010b75e <do_execve>
}
c010c83e:	c9                   	leave  
c010c83f:	c3                   	ret    

c010c840 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010c840:	55                   	push   %ebp
c010c841:	89 e5                	mov    %esp,%ebp
c010c843:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010c846:	e8 49 f0 ff ff       	call   c010b894 <do_yield>
}
c010c84b:	c9                   	leave  
c010c84c:	c3                   	ret    

c010c84d <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010c84d:	55                   	push   %ebp
c010c84e:	89 e5                	mov    %esp,%ebp
c010c850:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c853:	8b 45 08             	mov    0x8(%ebp),%eax
c010c856:	8b 00                	mov    (%eax),%eax
c010c858:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010c85b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c85e:	89 04 24             	mov    %eax,(%esp)
c010c861:	e8 e4 f1 ff ff       	call   c010ba4a <do_kill>
}
c010c866:	c9                   	leave  
c010c867:	c3                   	ret    

c010c868 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010c868:	55                   	push   %ebp
c010c869:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010c86b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c870:	8b 40 04             	mov    0x4(%eax),%eax
}
c010c873:	5d                   	pop    %ebp
c010c874:	c3                   	ret    

c010c875 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010c875:	55                   	push   %ebp
c010c876:	89 e5                	mov    %esp,%ebp
c010c878:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010c87b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c87e:	8b 00                	mov    (%eax),%eax
c010c880:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010c883:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c886:	89 04 24             	mov    %eax,(%esp)
c010c889:	e8 f0 3a ff ff       	call   c010037e <cputchar>
    return 0;
c010c88e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c893:	c9                   	leave  
c010c894:	c3                   	ret    

c010c895 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010c895:	55                   	push   %ebp
c010c896:	89 e5                	mov    %esp,%ebp
c010c898:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010c89b:	e8 66 a2 ff ff       	call   c0106b06 <print_pgdir>
    return 0;
c010c8a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c8a5:	c9                   	leave  
c010c8a6:	c3                   	ret    

c010c8a7 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010c8a7:	55                   	push   %ebp
c010c8a8:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010c8aa:	a1 d8 54 1c c0       	mov    0xc01c54d8,%eax
}
c010c8af:	5d                   	pop    %ebp
c010c8b0:	c3                   	ret    

c010c8b1 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010c8b1:	55                   	push   %ebp
c010c8b2:	89 e5                	mov    %esp,%ebp
c010c8b4:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010c8b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8ba:	8b 00                	mov    (%eax),%eax
c010c8bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010c8bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8c2:	89 04 24             	mov    %eax,(%esp)
c010c8c5:	e8 ec f5 ff ff       	call   c010beb6 <lab6_set_priority>
    return 0;
c010c8ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c8cf:	c9                   	leave  
c010c8d0:	c3                   	ret    

c010c8d1 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010c8d1:	55                   	push   %ebp
c010c8d2:	89 e5                	mov    %esp,%ebp
c010c8d4:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010c8d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8da:	8b 00                	mov    (%eax),%eax
c010c8dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010c8df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8e2:	89 04 24             	mov    %eax,(%esp)
c010c8e5:	e8 f6 f5 ff ff       	call   c010bee0 <do_sleep>
}
c010c8ea:	c9                   	leave  
c010c8eb:	c3                   	ret    

c010c8ec <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010c8ec:	55                   	push   %ebp
c010c8ed:	89 e5                	mov    %esp,%ebp
c010c8ef:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010c8f2:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c8f7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c8fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010c8fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c900:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c903:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010c906:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c90a:	78 60                	js     c010c96c <syscall+0x80>
c010c90c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c90f:	3d ff 00 00 00       	cmp    $0xff,%eax
c010c914:	77 56                	ja     c010c96c <syscall+0x80>
        if (syscalls[num] != NULL) {
c010c916:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c919:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
c010c920:	85 c0                	test   %eax,%eax
c010c922:	74 48                	je     c010c96c <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010c924:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c927:	8b 40 14             	mov    0x14(%eax),%eax
c010c92a:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010c92d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c930:	8b 40 18             	mov    0x18(%eax),%eax
c010c933:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010c936:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c939:	8b 40 10             	mov    0x10(%eax),%eax
c010c93c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010c93f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c942:	8b 00                	mov    (%eax),%eax
c010c944:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010c947:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c94a:	8b 40 04             	mov    0x4(%eax),%eax
c010c94d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010c950:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c953:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
c010c95a:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010c95d:	89 14 24             	mov    %edx,(%esp)
c010c960:	ff d0                	call   *%eax
c010c962:	89 c2                	mov    %eax,%edx
c010c964:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c967:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010c96a:	eb 46                	jmp    c010c9b2 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010c96c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c96f:	89 04 24             	mov    %eax,(%esp)
c010c972:	e8 53 5a ff ff       	call   c01023ca <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010c977:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c97c:	8d 50 48             	lea    0x48(%eax),%edx
c010c97f:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c984:	8b 40 04             	mov    0x4(%eax),%eax
c010c987:	89 54 24 14          	mov    %edx,0x14(%esp)
c010c98b:	89 44 24 10          	mov    %eax,0x10(%esp)
c010c98f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c992:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c996:	c7 44 24 08 24 00 11 	movl   $0xc0110024,0x8(%esp)
c010c99d:	c0 
c010c99e:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010c9a5:	00 
c010c9a6:	c7 04 24 50 00 11 c0 	movl   $0xc0110050,(%esp)
c010c9ad:	e8 28 44 ff ff       	call   c0100dda <__panic>
            num, current->pid, current->name);
}
c010c9b2:	c9                   	leave  
c010c9b3:	c3                   	ret    

c010c9b4 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010c9b4:	55                   	push   %ebp
c010c9b5:	89 e5                	mov    %esp,%ebp
c010c9b7:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010c9ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9bd:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010c9c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010c9c6:	b8 20 00 00 00       	mov    $0x20,%eax
c010c9cb:	2b 45 0c             	sub    0xc(%ebp),%eax
c010c9ce:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c9d1:	89 c1                	mov    %eax,%ecx
c010c9d3:	d3 ea                	shr    %cl,%edx
c010c9d5:	89 d0                	mov    %edx,%eax
}
c010c9d7:	c9                   	leave  
c010c9d8:	c3                   	ret    

c010c9d9 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010c9d9:	55                   	push   %ebp
c010c9da:	89 e5                	mov    %esp,%ebp
c010c9dc:	83 ec 58             	sub    $0x58,%esp
c010c9df:	8b 45 10             	mov    0x10(%ebp),%eax
c010c9e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c9e5:	8b 45 14             	mov    0x14(%ebp),%eax
c010c9e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010c9eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c9ee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c9f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c9f4:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010c9f7:	8b 45 18             	mov    0x18(%ebp),%eax
c010c9fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c9fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ca00:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ca03:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ca06:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010ca09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ca0f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ca13:	74 1c                	je     c010ca31 <printnum+0x58>
c010ca15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca18:	ba 00 00 00 00       	mov    $0x0,%edx
c010ca1d:	f7 75 e4             	divl   -0x1c(%ebp)
c010ca20:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ca23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca26:	ba 00 00 00 00       	mov    $0x0,%edx
c010ca2b:	f7 75 e4             	divl   -0x1c(%ebp)
c010ca2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ca31:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ca34:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ca37:	f7 75 e4             	divl   -0x1c(%ebp)
c010ca3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ca3d:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010ca40:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ca43:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ca46:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ca49:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010ca4c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ca4f:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010ca52:	8b 45 18             	mov    0x18(%ebp),%eax
c010ca55:	ba 00 00 00 00       	mov    $0x0,%edx
c010ca5a:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010ca5d:	77 56                	ja     c010cab5 <printnum+0xdc>
c010ca5f:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010ca62:	72 05                	jb     c010ca69 <printnum+0x90>
c010ca64:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010ca67:	77 4c                	ja     c010cab5 <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010ca69:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010ca6c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ca6f:	8b 45 20             	mov    0x20(%ebp),%eax
c010ca72:	89 44 24 18          	mov    %eax,0x18(%esp)
c010ca76:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ca7a:	8b 45 18             	mov    0x18(%ebp),%eax
c010ca7d:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ca81:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ca84:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ca87:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ca8b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010ca8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca92:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca96:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca99:	89 04 24             	mov    %eax,(%esp)
c010ca9c:	e8 38 ff ff ff       	call   c010c9d9 <printnum>
c010caa1:	eb 1c                	jmp    c010cabf <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010caa3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010caa6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010caaa:	8b 45 20             	mov    0x20(%ebp),%eax
c010caad:	89 04 24             	mov    %eax,(%esp)
c010cab0:	8b 45 08             	mov    0x8(%ebp),%eax
c010cab3:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010cab5:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010cab9:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010cabd:	7f e4                	jg     c010caa3 <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010cabf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cac2:	05 84 01 11 c0       	add    $0xc0110184,%eax
c010cac7:	0f b6 00             	movzbl (%eax),%eax
c010caca:	0f be c0             	movsbl %al,%eax
c010cacd:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cad0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cad4:	89 04 24             	mov    %eax,(%esp)
c010cad7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cada:	ff d0                	call   *%eax
}
c010cadc:	c9                   	leave  
c010cadd:	c3                   	ret    

c010cade <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010cade:	55                   	push   %ebp
c010cadf:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010cae1:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010cae5:	7e 14                	jle    c010cafb <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010cae7:	8b 45 08             	mov    0x8(%ebp),%eax
c010caea:	8b 00                	mov    (%eax),%eax
c010caec:	8d 48 08             	lea    0x8(%eax),%ecx
c010caef:	8b 55 08             	mov    0x8(%ebp),%edx
c010caf2:	89 0a                	mov    %ecx,(%edx)
c010caf4:	8b 50 04             	mov    0x4(%eax),%edx
c010caf7:	8b 00                	mov    (%eax),%eax
c010caf9:	eb 30                	jmp    c010cb2b <getuint+0x4d>
    }
    else if (lflag) {
c010cafb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010caff:	74 16                	je     c010cb17 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010cb01:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb04:	8b 00                	mov    (%eax),%eax
c010cb06:	8d 48 04             	lea    0x4(%eax),%ecx
c010cb09:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb0c:	89 0a                	mov    %ecx,(%edx)
c010cb0e:	8b 00                	mov    (%eax),%eax
c010cb10:	ba 00 00 00 00       	mov    $0x0,%edx
c010cb15:	eb 14                	jmp    c010cb2b <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010cb17:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb1a:	8b 00                	mov    (%eax),%eax
c010cb1c:	8d 48 04             	lea    0x4(%eax),%ecx
c010cb1f:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb22:	89 0a                	mov    %ecx,(%edx)
c010cb24:	8b 00                	mov    (%eax),%eax
c010cb26:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010cb2b:	5d                   	pop    %ebp
c010cb2c:	c3                   	ret    

c010cb2d <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010cb2d:	55                   	push   %ebp
c010cb2e:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010cb30:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010cb34:	7e 14                	jle    c010cb4a <getint+0x1d>
        return va_arg(*ap, long long);
c010cb36:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb39:	8b 00                	mov    (%eax),%eax
c010cb3b:	8d 48 08             	lea    0x8(%eax),%ecx
c010cb3e:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb41:	89 0a                	mov    %ecx,(%edx)
c010cb43:	8b 50 04             	mov    0x4(%eax),%edx
c010cb46:	8b 00                	mov    (%eax),%eax
c010cb48:	eb 28                	jmp    c010cb72 <getint+0x45>
    }
    else if (lflag) {
c010cb4a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cb4e:	74 12                	je     c010cb62 <getint+0x35>
        return va_arg(*ap, long);
c010cb50:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb53:	8b 00                	mov    (%eax),%eax
c010cb55:	8d 48 04             	lea    0x4(%eax),%ecx
c010cb58:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb5b:	89 0a                	mov    %ecx,(%edx)
c010cb5d:	8b 00                	mov    (%eax),%eax
c010cb5f:	99                   	cltd   
c010cb60:	eb 10                	jmp    c010cb72 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010cb62:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb65:	8b 00                	mov    (%eax),%eax
c010cb67:	8d 48 04             	lea    0x4(%eax),%ecx
c010cb6a:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb6d:	89 0a                	mov    %ecx,(%edx)
c010cb6f:	8b 00                	mov    (%eax),%eax
c010cb71:	99                   	cltd   
    }
}
c010cb72:	5d                   	pop    %ebp
c010cb73:	c3                   	ret    

c010cb74 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010cb74:	55                   	push   %ebp
c010cb75:	89 e5                	mov    %esp,%ebp
c010cb77:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010cb7a:	8d 45 14             	lea    0x14(%ebp),%eax
c010cb7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010cb80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb83:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cb87:	8b 45 10             	mov    0x10(%ebp),%eax
c010cb8a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cb8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb91:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb95:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb98:	89 04 24             	mov    %eax,(%esp)
c010cb9b:	e8 02 00 00 00       	call   c010cba2 <vprintfmt>
    va_end(ap);
}
c010cba0:	c9                   	leave  
c010cba1:	c3                   	ret    

c010cba2 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010cba2:	55                   	push   %ebp
c010cba3:	89 e5                	mov    %esp,%ebp
c010cba5:	56                   	push   %esi
c010cba6:	53                   	push   %ebx
c010cba7:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010cbaa:	eb 18                	jmp    c010cbc4 <vprintfmt+0x22>
            if (ch == '\0') {
c010cbac:	85 db                	test   %ebx,%ebx
c010cbae:	75 05                	jne    c010cbb5 <vprintfmt+0x13>
                return;
c010cbb0:	e9 d1 03 00 00       	jmp    c010cf86 <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010cbb5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbb8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbbc:	89 1c 24             	mov    %ebx,(%esp)
c010cbbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbc2:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010cbc4:	8b 45 10             	mov    0x10(%ebp),%eax
c010cbc7:	8d 50 01             	lea    0x1(%eax),%edx
c010cbca:	89 55 10             	mov    %edx,0x10(%ebp)
c010cbcd:	0f b6 00             	movzbl (%eax),%eax
c010cbd0:	0f b6 d8             	movzbl %al,%ebx
c010cbd3:	83 fb 25             	cmp    $0x25,%ebx
c010cbd6:	75 d4                	jne    c010cbac <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010cbd8:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010cbdc:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010cbe3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cbe6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010cbe9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010cbf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cbf3:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010cbf6:	8b 45 10             	mov    0x10(%ebp),%eax
c010cbf9:	8d 50 01             	lea    0x1(%eax),%edx
c010cbfc:	89 55 10             	mov    %edx,0x10(%ebp)
c010cbff:	0f b6 00             	movzbl (%eax),%eax
c010cc02:	0f b6 d8             	movzbl %al,%ebx
c010cc05:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010cc08:	83 f8 55             	cmp    $0x55,%eax
c010cc0b:	0f 87 44 03 00 00    	ja     c010cf55 <vprintfmt+0x3b3>
c010cc11:	8b 04 85 a8 01 11 c0 	mov    -0x3feefe58(,%eax,4),%eax
c010cc18:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010cc1a:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010cc1e:	eb d6                	jmp    c010cbf6 <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010cc20:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010cc24:	eb d0                	jmp    c010cbf6 <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010cc26:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010cc2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cc30:	89 d0                	mov    %edx,%eax
c010cc32:	c1 e0 02             	shl    $0x2,%eax
c010cc35:	01 d0                	add    %edx,%eax
c010cc37:	01 c0                	add    %eax,%eax
c010cc39:	01 d8                	add    %ebx,%eax
c010cc3b:	83 e8 30             	sub    $0x30,%eax
c010cc3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010cc41:	8b 45 10             	mov    0x10(%ebp),%eax
c010cc44:	0f b6 00             	movzbl (%eax),%eax
c010cc47:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010cc4a:	83 fb 2f             	cmp    $0x2f,%ebx
c010cc4d:	7e 0b                	jle    c010cc5a <vprintfmt+0xb8>
c010cc4f:	83 fb 39             	cmp    $0x39,%ebx
c010cc52:	7f 06                	jg     c010cc5a <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010cc54:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010cc58:	eb d3                	jmp    c010cc2d <vprintfmt+0x8b>
            goto process_precision;
c010cc5a:	eb 33                	jmp    c010cc8f <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010cc5c:	8b 45 14             	mov    0x14(%ebp),%eax
c010cc5f:	8d 50 04             	lea    0x4(%eax),%edx
c010cc62:	89 55 14             	mov    %edx,0x14(%ebp)
c010cc65:	8b 00                	mov    (%eax),%eax
c010cc67:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010cc6a:	eb 23                	jmp    c010cc8f <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010cc6c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cc70:	79 0c                	jns    c010cc7e <vprintfmt+0xdc>
                width = 0;
c010cc72:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010cc79:	e9 78 ff ff ff       	jmp    c010cbf6 <vprintfmt+0x54>
c010cc7e:	e9 73 ff ff ff       	jmp    c010cbf6 <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010cc83:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010cc8a:	e9 67 ff ff ff       	jmp    c010cbf6 <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010cc8f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cc93:	79 12                	jns    c010cca7 <vprintfmt+0x105>
                width = precision, precision = -1;
c010cc95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cc98:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cc9b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010cca2:	e9 4f ff ff ff       	jmp    c010cbf6 <vprintfmt+0x54>
c010cca7:	e9 4a ff ff ff       	jmp    c010cbf6 <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010ccac:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010ccb0:	e9 41 ff ff ff       	jmp    c010cbf6 <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010ccb5:	8b 45 14             	mov    0x14(%ebp),%eax
c010ccb8:	8d 50 04             	lea    0x4(%eax),%edx
c010ccbb:	89 55 14             	mov    %edx,0x14(%ebp)
c010ccbe:	8b 00                	mov    (%eax),%eax
c010ccc0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ccc3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ccc7:	89 04 24             	mov    %eax,(%esp)
c010ccca:	8b 45 08             	mov    0x8(%ebp),%eax
c010cccd:	ff d0                	call   *%eax
            break;
c010cccf:	e9 ac 02 00 00       	jmp    c010cf80 <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010ccd4:	8b 45 14             	mov    0x14(%ebp),%eax
c010ccd7:	8d 50 04             	lea    0x4(%eax),%edx
c010ccda:	89 55 14             	mov    %edx,0x14(%ebp)
c010ccdd:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010ccdf:	85 db                	test   %ebx,%ebx
c010cce1:	79 02                	jns    c010cce5 <vprintfmt+0x143>
                err = -err;
c010cce3:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010cce5:	83 fb 18             	cmp    $0x18,%ebx
c010cce8:	7f 0b                	jg     c010ccf5 <vprintfmt+0x153>
c010ccea:	8b 34 9d 20 01 11 c0 	mov    -0x3feefee0(,%ebx,4),%esi
c010ccf1:	85 f6                	test   %esi,%esi
c010ccf3:	75 23                	jne    c010cd18 <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010ccf5:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010ccf9:	c7 44 24 08 95 01 11 	movl   $0xc0110195,0x8(%esp)
c010cd00:	c0 
c010cd01:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd04:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd08:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd0b:	89 04 24             	mov    %eax,(%esp)
c010cd0e:	e8 61 fe ff ff       	call   c010cb74 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010cd13:	e9 68 02 00 00       	jmp    c010cf80 <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010cd18:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010cd1c:	c7 44 24 08 9e 01 11 	movl   $0xc011019e,0x8(%esp)
c010cd23:	c0 
c010cd24:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd27:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd2b:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd2e:	89 04 24             	mov    %eax,(%esp)
c010cd31:	e8 3e fe ff ff       	call   c010cb74 <printfmt>
            }
            break;
c010cd36:	e9 45 02 00 00       	jmp    c010cf80 <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010cd3b:	8b 45 14             	mov    0x14(%ebp),%eax
c010cd3e:	8d 50 04             	lea    0x4(%eax),%edx
c010cd41:	89 55 14             	mov    %edx,0x14(%ebp)
c010cd44:	8b 30                	mov    (%eax),%esi
c010cd46:	85 f6                	test   %esi,%esi
c010cd48:	75 05                	jne    c010cd4f <vprintfmt+0x1ad>
                p = "(null)";
c010cd4a:	be a1 01 11 c0       	mov    $0xc01101a1,%esi
            }
            if (width > 0 && padc != '-') {
c010cd4f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cd53:	7e 3e                	jle    c010cd93 <vprintfmt+0x1f1>
c010cd55:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010cd59:	74 38                	je     c010cd93 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010cd5b:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010cd5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cd61:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd65:	89 34 24             	mov    %esi,(%esp)
c010cd68:	e8 ed 03 00 00       	call   c010d15a <strnlen>
c010cd6d:	29 c3                	sub    %eax,%ebx
c010cd6f:	89 d8                	mov    %ebx,%eax
c010cd71:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cd74:	eb 17                	jmp    c010cd8d <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010cd76:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010cd7a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cd7d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cd81:	89 04 24             	mov    %eax,(%esp)
c010cd84:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd87:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010cd89:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010cd8d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cd91:	7f e3                	jg     c010cd76 <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010cd93:	eb 38                	jmp    c010cdcd <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010cd95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010cd99:	74 1f                	je     c010cdba <vprintfmt+0x218>
c010cd9b:	83 fb 1f             	cmp    $0x1f,%ebx
c010cd9e:	7e 05                	jle    c010cda5 <vprintfmt+0x203>
c010cda0:	83 fb 7e             	cmp    $0x7e,%ebx
c010cda3:	7e 15                	jle    c010cdba <vprintfmt+0x218>
                    putch('?', putdat);
c010cda5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cda8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cdac:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010cdb3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdb6:	ff d0                	call   *%eax
c010cdb8:	eb 0f                	jmp    c010cdc9 <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010cdba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cdbd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cdc1:	89 1c 24             	mov    %ebx,(%esp)
c010cdc4:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdc7:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010cdc9:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010cdcd:	89 f0                	mov    %esi,%eax
c010cdcf:	8d 70 01             	lea    0x1(%eax),%esi
c010cdd2:	0f b6 00             	movzbl (%eax),%eax
c010cdd5:	0f be d8             	movsbl %al,%ebx
c010cdd8:	85 db                	test   %ebx,%ebx
c010cdda:	74 10                	je     c010cdec <vprintfmt+0x24a>
c010cddc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010cde0:	78 b3                	js     c010cd95 <vprintfmt+0x1f3>
c010cde2:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010cde6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010cdea:	79 a9                	jns    c010cd95 <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010cdec:	eb 17                	jmp    c010ce05 <vprintfmt+0x263>
                putch(' ', putdat);
c010cdee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cdf1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cdf5:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010cdfc:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdff:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010ce01:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010ce05:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ce09:	7f e3                	jg     c010cdee <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010ce0b:	e9 70 01 00 00       	jmp    c010cf80 <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010ce10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ce13:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce17:	8d 45 14             	lea    0x14(%ebp),%eax
c010ce1a:	89 04 24             	mov    %eax,(%esp)
c010ce1d:	e8 0b fd ff ff       	call   c010cb2d <getint>
c010ce22:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ce25:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010ce28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ce2e:	85 d2                	test   %edx,%edx
c010ce30:	79 26                	jns    c010ce58 <vprintfmt+0x2b6>
                putch('-', putdat);
c010ce32:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce35:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce39:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010ce40:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce43:	ff d0                	call   *%eax
                num = -(long long)num;
c010ce45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce48:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ce4b:	f7 d8                	neg    %eax
c010ce4d:	83 d2 00             	adc    $0x0,%edx
c010ce50:	f7 da                	neg    %edx
c010ce52:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ce55:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010ce58:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010ce5f:	e9 a8 00 00 00       	jmp    c010cf0c <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010ce64:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ce67:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce6b:	8d 45 14             	lea    0x14(%ebp),%eax
c010ce6e:	89 04 24             	mov    %eax,(%esp)
c010ce71:	e8 68 fc ff ff       	call   c010cade <getuint>
c010ce76:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ce79:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010ce7c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010ce83:	e9 84 00 00 00       	jmp    c010cf0c <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010ce88:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ce8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce8f:	8d 45 14             	lea    0x14(%ebp),%eax
c010ce92:	89 04 24             	mov    %eax,(%esp)
c010ce95:	e8 44 fc ff ff       	call   c010cade <getuint>
c010ce9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ce9d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010cea0:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010cea7:	eb 63                	jmp    c010cf0c <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010cea9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ceac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ceb0:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010ceb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ceba:	ff d0                	call   *%eax
            putch('x', putdat);
c010cebc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cebf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cec3:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010ceca:	8b 45 08             	mov    0x8(%ebp),%eax
c010cecd:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010cecf:	8b 45 14             	mov    0x14(%ebp),%eax
c010ced2:	8d 50 04             	lea    0x4(%eax),%edx
c010ced5:	89 55 14             	mov    %edx,0x14(%ebp)
c010ced8:	8b 00                	mov    (%eax),%eax
c010ceda:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cedd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010cee4:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010ceeb:	eb 1f                	jmp    c010cf0c <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010ceed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cef0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cef4:	8d 45 14             	lea    0x14(%ebp),%eax
c010cef7:	89 04 24             	mov    %eax,(%esp)
c010cefa:	e8 df fb ff ff       	call   c010cade <getuint>
c010ceff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf02:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010cf05:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010cf0c:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010cf10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cf13:	89 54 24 18          	mov    %edx,0x18(%esp)
c010cf17:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cf1a:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cf1e:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cf22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf25:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cf28:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cf2c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cf30:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf33:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf37:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf3a:	89 04 24             	mov    %eax,(%esp)
c010cf3d:	e8 97 fa ff ff       	call   c010c9d9 <printnum>
            break;
c010cf42:	eb 3c                	jmp    c010cf80 <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010cf44:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf47:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf4b:	89 1c 24             	mov    %ebx,(%esp)
c010cf4e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf51:	ff d0                	call   *%eax
            break;
c010cf53:	eb 2b                	jmp    c010cf80 <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010cf55:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf58:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf5c:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010cf63:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf66:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010cf68:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cf6c:	eb 04                	jmp    c010cf72 <vprintfmt+0x3d0>
c010cf6e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cf72:	8b 45 10             	mov    0x10(%ebp),%eax
c010cf75:	83 e8 01             	sub    $0x1,%eax
c010cf78:	0f b6 00             	movzbl (%eax),%eax
c010cf7b:	3c 25                	cmp    $0x25,%al
c010cf7d:	75 ef                	jne    c010cf6e <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010cf7f:	90                   	nop
        }
    }
c010cf80:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010cf81:	e9 3e fc ff ff       	jmp    c010cbc4 <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010cf86:	83 c4 40             	add    $0x40,%esp
c010cf89:	5b                   	pop    %ebx
c010cf8a:	5e                   	pop    %esi
c010cf8b:	5d                   	pop    %ebp
c010cf8c:	c3                   	ret    

c010cf8d <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010cf8d:	55                   	push   %ebp
c010cf8e:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010cf90:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf93:	8b 40 08             	mov    0x8(%eax),%eax
c010cf96:	8d 50 01             	lea    0x1(%eax),%edx
c010cf99:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf9c:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010cf9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfa2:	8b 10                	mov    (%eax),%edx
c010cfa4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfa7:	8b 40 04             	mov    0x4(%eax),%eax
c010cfaa:	39 c2                	cmp    %eax,%edx
c010cfac:	73 12                	jae    c010cfc0 <sprintputch+0x33>
        *b->buf ++ = ch;
c010cfae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfb1:	8b 00                	mov    (%eax),%eax
c010cfb3:	8d 48 01             	lea    0x1(%eax),%ecx
c010cfb6:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cfb9:	89 0a                	mov    %ecx,(%edx)
c010cfbb:	8b 55 08             	mov    0x8(%ebp),%edx
c010cfbe:	88 10                	mov    %dl,(%eax)
    }
}
c010cfc0:	5d                   	pop    %ebp
c010cfc1:	c3                   	ret    

c010cfc2 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010cfc2:	55                   	push   %ebp
c010cfc3:	89 e5                	mov    %esp,%ebp
c010cfc5:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010cfc8:	8d 45 14             	lea    0x14(%ebp),%eax
c010cfcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010cfce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cfd1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cfd5:	8b 45 10             	mov    0x10(%ebp),%eax
c010cfd8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cfdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfdf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfe3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfe6:	89 04 24             	mov    %eax,(%esp)
c010cfe9:	e8 08 00 00 00       	call   c010cff6 <vsnprintf>
c010cfee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010cff1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cff4:	c9                   	leave  
c010cff5:	c3                   	ret    

c010cff6 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010cff6:	55                   	push   %ebp
c010cff7:	89 e5                	mov    %esp,%ebp
c010cff9:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010cffc:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfff:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d002:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d005:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d008:	8b 45 08             	mov    0x8(%ebp),%eax
c010d00b:	01 d0                	add    %edx,%eax
c010d00d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d010:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010d017:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d01b:	74 0a                	je     c010d027 <vsnprintf+0x31>
c010d01d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d020:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d023:	39 c2                	cmp    %eax,%edx
c010d025:	76 07                	jbe    c010d02e <vsnprintf+0x38>
        return -E_INVAL;
c010d027:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d02c:	eb 2a                	jmp    c010d058 <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010d02e:	8b 45 14             	mov    0x14(%ebp),%eax
c010d031:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d035:	8b 45 10             	mov    0x10(%ebp),%eax
c010d038:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d03c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010d03f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d043:	c7 04 24 8d cf 10 c0 	movl   $0xc010cf8d,(%esp)
c010d04a:	e8 53 fb ff ff       	call   c010cba2 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010d04f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d052:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010d055:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d058:	c9                   	leave  
c010d059:	c3                   	ret    

c010d05a <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010d05a:	55                   	push   %ebp
c010d05b:	89 e5                	mov    %esp,%ebp
c010d05d:	57                   	push   %edi
c010d05e:	56                   	push   %esi
c010d05f:	53                   	push   %ebx
c010d060:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010d063:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
c010d068:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
c010d06e:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010d074:	6b f0 05             	imul   $0x5,%eax,%esi
c010d077:	01 f7                	add    %esi,%edi
c010d079:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010d07e:	f7 e6                	mul    %esi
c010d080:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010d083:	89 f2                	mov    %esi,%edx
c010d085:	83 c0 0b             	add    $0xb,%eax
c010d088:	83 d2 00             	adc    $0x0,%edx
c010d08b:	89 c7                	mov    %eax,%edi
c010d08d:	83 e7 ff             	and    $0xffffffff,%edi
c010d090:	89 f9                	mov    %edi,%ecx
c010d092:	0f b7 da             	movzwl %dx,%ebx
c010d095:	89 0d c0 1e 13 c0    	mov    %ecx,0xc0131ec0
c010d09b:	89 1d c4 1e 13 c0    	mov    %ebx,0xc0131ec4
    unsigned long long result = (next >> 12);
c010d0a1:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
c010d0a6:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
c010d0ac:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010d0b0:	c1 ea 0c             	shr    $0xc,%edx
c010d0b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d0b6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010d0b9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010d0c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d0c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d0c6:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d0c9:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d0cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d0cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d0d2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d0d6:	74 1c                	je     c010d0f4 <rand+0x9a>
c010d0d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d0db:	ba 00 00 00 00       	mov    $0x0,%edx
c010d0e0:	f7 75 dc             	divl   -0x24(%ebp)
c010d0e3:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010d0e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d0e9:	ba 00 00 00 00       	mov    $0x0,%edx
c010d0ee:	f7 75 dc             	divl   -0x24(%ebp)
c010d0f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d0f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d0f7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d0fa:	f7 75 dc             	divl   -0x24(%ebp)
c010d0fd:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d100:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d103:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d106:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d109:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d10c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d10f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010d112:	83 c4 24             	add    $0x24,%esp
c010d115:	5b                   	pop    %ebx
c010d116:	5e                   	pop    %esi
c010d117:	5f                   	pop    %edi
c010d118:	5d                   	pop    %ebp
c010d119:	c3                   	ret    

c010d11a <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010d11a:	55                   	push   %ebp
c010d11b:	89 e5                	mov    %esp,%ebp
    next = seed;
c010d11d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d120:	ba 00 00 00 00       	mov    $0x0,%edx
c010d125:	a3 c0 1e 13 c0       	mov    %eax,0xc0131ec0
c010d12a:	89 15 c4 1e 13 c0    	mov    %edx,0xc0131ec4
}
c010d130:	5d                   	pop    %ebp
c010d131:	c3                   	ret    

c010d132 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010d132:	55                   	push   %ebp
c010d133:	89 e5                	mov    %esp,%ebp
c010d135:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d138:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010d13f:	eb 04                	jmp    c010d145 <strlen+0x13>
        cnt ++;
c010d141:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010d145:	8b 45 08             	mov    0x8(%ebp),%eax
c010d148:	8d 50 01             	lea    0x1(%eax),%edx
c010d14b:	89 55 08             	mov    %edx,0x8(%ebp)
c010d14e:	0f b6 00             	movzbl (%eax),%eax
c010d151:	84 c0                	test   %al,%al
c010d153:	75 ec                	jne    c010d141 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010d155:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d158:	c9                   	leave  
c010d159:	c3                   	ret    

c010d15a <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010d15a:	55                   	push   %ebp
c010d15b:	89 e5                	mov    %esp,%ebp
c010d15d:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d160:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010d167:	eb 04                	jmp    c010d16d <strnlen+0x13>
        cnt ++;
c010d169:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010d16d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d170:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d173:	73 10                	jae    c010d185 <strnlen+0x2b>
c010d175:	8b 45 08             	mov    0x8(%ebp),%eax
c010d178:	8d 50 01             	lea    0x1(%eax),%edx
c010d17b:	89 55 08             	mov    %edx,0x8(%ebp)
c010d17e:	0f b6 00             	movzbl (%eax),%eax
c010d181:	84 c0                	test   %al,%al
c010d183:	75 e4                	jne    c010d169 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010d185:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d188:	c9                   	leave  
c010d189:	c3                   	ret    

c010d18a <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010d18a:	55                   	push   %ebp
c010d18b:	89 e5                	mov    %esp,%ebp
c010d18d:	57                   	push   %edi
c010d18e:	56                   	push   %esi
c010d18f:	83 ec 20             	sub    $0x20,%esp
c010d192:	8b 45 08             	mov    0x8(%ebp),%eax
c010d195:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d198:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d19b:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010d19e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d1a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d1a4:	89 d1                	mov    %edx,%ecx
c010d1a6:	89 c2                	mov    %eax,%edx
c010d1a8:	89 ce                	mov    %ecx,%esi
c010d1aa:	89 d7                	mov    %edx,%edi
c010d1ac:	ac                   	lods   %ds:(%esi),%al
c010d1ad:	aa                   	stos   %al,%es:(%edi)
c010d1ae:	84 c0                	test   %al,%al
c010d1b0:	75 fa                	jne    c010d1ac <strcpy+0x22>
c010d1b2:	89 fa                	mov    %edi,%edx
c010d1b4:	89 f1                	mov    %esi,%ecx
c010d1b6:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d1b9:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d1bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010d1bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010d1c2:	83 c4 20             	add    $0x20,%esp
c010d1c5:	5e                   	pop    %esi
c010d1c6:	5f                   	pop    %edi
c010d1c7:	5d                   	pop    %ebp
c010d1c8:	c3                   	ret    

c010d1c9 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010d1c9:	55                   	push   %ebp
c010d1ca:	89 e5                	mov    %esp,%ebp
c010d1cc:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010d1cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010d1d5:	eb 21                	jmp    c010d1f8 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010d1d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1da:	0f b6 10             	movzbl (%eax),%edx
c010d1dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d1e0:	88 10                	mov    %dl,(%eax)
c010d1e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d1e5:	0f b6 00             	movzbl (%eax),%eax
c010d1e8:	84 c0                	test   %al,%al
c010d1ea:	74 04                	je     c010d1f0 <strncpy+0x27>
            src ++;
c010d1ec:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010d1f0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d1f4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010d1f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d1fc:	75 d9                	jne    c010d1d7 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010d1fe:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d201:	c9                   	leave  
c010d202:	c3                   	ret    

c010d203 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010d203:	55                   	push   %ebp
c010d204:	89 e5                	mov    %esp,%ebp
c010d206:	57                   	push   %edi
c010d207:	56                   	push   %esi
c010d208:	83 ec 20             	sub    $0x20,%esp
c010d20b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d20e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d211:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d214:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010d217:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d21a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d21d:	89 d1                	mov    %edx,%ecx
c010d21f:	89 c2                	mov    %eax,%edx
c010d221:	89 ce                	mov    %ecx,%esi
c010d223:	89 d7                	mov    %edx,%edi
c010d225:	ac                   	lods   %ds:(%esi),%al
c010d226:	ae                   	scas   %es:(%edi),%al
c010d227:	75 08                	jne    c010d231 <strcmp+0x2e>
c010d229:	84 c0                	test   %al,%al
c010d22b:	75 f8                	jne    c010d225 <strcmp+0x22>
c010d22d:	31 c0                	xor    %eax,%eax
c010d22f:	eb 04                	jmp    c010d235 <strcmp+0x32>
c010d231:	19 c0                	sbb    %eax,%eax
c010d233:	0c 01                	or     $0x1,%al
c010d235:	89 fa                	mov    %edi,%edx
c010d237:	89 f1                	mov    %esi,%ecx
c010d239:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d23c:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d23f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010d242:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010d245:	83 c4 20             	add    $0x20,%esp
c010d248:	5e                   	pop    %esi
c010d249:	5f                   	pop    %edi
c010d24a:	5d                   	pop    %ebp
c010d24b:	c3                   	ret    

c010d24c <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010d24c:	55                   	push   %ebp
c010d24d:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d24f:	eb 0c                	jmp    c010d25d <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010d251:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d255:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d259:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d25d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d261:	74 1a                	je     c010d27d <strncmp+0x31>
c010d263:	8b 45 08             	mov    0x8(%ebp),%eax
c010d266:	0f b6 00             	movzbl (%eax),%eax
c010d269:	84 c0                	test   %al,%al
c010d26b:	74 10                	je     c010d27d <strncmp+0x31>
c010d26d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d270:	0f b6 10             	movzbl (%eax),%edx
c010d273:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d276:	0f b6 00             	movzbl (%eax),%eax
c010d279:	38 c2                	cmp    %al,%dl
c010d27b:	74 d4                	je     c010d251 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d27d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d281:	74 18                	je     c010d29b <strncmp+0x4f>
c010d283:	8b 45 08             	mov    0x8(%ebp),%eax
c010d286:	0f b6 00             	movzbl (%eax),%eax
c010d289:	0f b6 d0             	movzbl %al,%edx
c010d28c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d28f:	0f b6 00             	movzbl (%eax),%eax
c010d292:	0f b6 c0             	movzbl %al,%eax
c010d295:	29 c2                	sub    %eax,%edx
c010d297:	89 d0                	mov    %edx,%eax
c010d299:	eb 05                	jmp    c010d2a0 <strncmp+0x54>
c010d29b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d2a0:	5d                   	pop    %ebp
c010d2a1:	c3                   	ret    

c010d2a2 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010d2a2:	55                   	push   %ebp
c010d2a3:	89 e5                	mov    %esp,%ebp
c010d2a5:	83 ec 04             	sub    $0x4,%esp
c010d2a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2ab:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d2ae:	eb 14                	jmp    c010d2c4 <strchr+0x22>
        if (*s == c) {
c010d2b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2b3:	0f b6 00             	movzbl (%eax),%eax
c010d2b6:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d2b9:	75 05                	jne    c010d2c0 <strchr+0x1e>
            return (char *)s;
c010d2bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2be:	eb 13                	jmp    c010d2d3 <strchr+0x31>
        }
        s ++;
c010d2c0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010d2c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2c7:	0f b6 00             	movzbl (%eax),%eax
c010d2ca:	84 c0                	test   %al,%al
c010d2cc:	75 e2                	jne    c010d2b0 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010d2ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d2d3:	c9                   	leave  
c010d2d4:	c3                   	ret    

c010d2d5 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010d2d5:	55                   	push   %ebp
c010d2d6:	89 e5                	mov    %esp,%ebp
c010d2d8:	83 ec 04             	sub    $0x4,%esp
c010d2db:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2de:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d2e1:	eb 11                	jmp    c010d2f4 <strfind+0x1f>
        if (*s == c) {
c010d2e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2e6:	0f b6 00             	movzbl (%eax),%eax
c010d2e9:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d2ec:	75 02                	jne    c010d2f0 <strfind+0x1b>
            break;
c010d2ee:	eb 0e                	jmp    c010d2fe <strfind+0x29>
        }
        s ++;
c010d2f0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010d2f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2f7:	0f b6 00             	movzbl (%eax),%eax
c010d2fa:	84 c0                	test   %al,%al
c010d2fc:	75 e5                	jne    c010d2e3 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010d2fe:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d301:	c9                   	leave  
c010d302:	c3                   	ret    

c010d303 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010d303:	55                   	push   %ebp
c010d304:	89 e5                	mov    %esp,%ebp
c010d306:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010d309:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010d310:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d317:	eb 04                	jmp    c010d31d <strtol+0x1a>
        s ++;
c010d319:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d31d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d320:	0f b6 00             	movzbl (%eax),%eax
c010d323:	3c 20                	cmp    $0x20,%al
c010d325:	74 f2                	je     c010d319 <strtol+0x16>
c010d327:	8b 45 08             	mov    0x8(%ebp),%eax
c010d32a:	0f b6 00             	movzbl (%eax),%eax
c010d32d:	3c 09                	cmp    $0x9,%al
c010d32f:	74 e8                	je     c010d319 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010d331:	8b 45 08             	mov    0x8(%ebp),%eax
c010d334:	0f b6 00             	movzbl (%eax),%eax
c010d337:	3c 2b                	cmp    $0x2b,%al
c010d339:	75 06                	jne    c010d341 <strtol+0x3e>
        s ++;
c010d33b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d33f:	eb 15                	jmp    c010d356 <strtol+0x53>
    }
    else if (*s == '-') {
c010d341:	8b 45 08             	mov    0x8(%ebp),%eax
c010d344:	0f b6 00             	movzbl (%eax),%eax
c010d347:	3c 2d                	cmp    $0x2d,%al
c010d349:	75 0b                	jne    c010d356 <strtol+0x53>
        s ++, neg = 1;
c010d34b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d34f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010d356:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d35a:	74 06                	je     c010d362 <strtol+0x5f>
c010d35c:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010d360:	75 24                	jne    c010d386 <strtol+0x83>
c010d362:	8b 45 08             	mov    0x8(%ebp),%eax
c010d365:	0f b6 00             	movzbl (%eax),%eax
c010d368:	3c 30                	cmp    $0x30,%al
c010d36a:	75 1a                	jne    c010d386 <strtol+0x83>
c010d36c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d36f:	83 c0 01             	add    $0x1,%eax
c010d372:	0f b6 00             	movzbl (%eax),%eax
c010d375:	3c 78                	cmp    $0x78,%al
c010d377:	75 0d                	jne    c010d386 <strtol+0x83>
        s += 2, base = 16;
c010d379:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010d37d:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010d384:	eb 2a                	jmp    c010d3b0 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010d386:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d38a:	75 17                	jne    c010d3a3 <strtol+0xa0>
c010d38c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d38f:	0f b6 00             	movzbl (%eax),%eax
c010d392:	3c 30                	cmp    $0x30,%al
c010d394:	75 0d                	jne    c010d3a3 <strtol+0xa0>
        s ++, base = 8;
c010d396:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d39a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010d3a1:	eb 0d                	jmp    c010d3b0 <strtol+0xad>
    }
    else if (base == 0) {
c010d3a3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d3a7:	75 07                	jne    c010d3b0 <strtol+0xad>
        base = 10;
c010d3a9:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010d3b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3b3:	0f b6 00             	movzbl (%eax),%eax
c010d3b6:	3c 2f                	cmp    $0x2f,%al
c010d3b8:	7e 1b                	jle    c010d3d5 <strtol+0xd2>
c010d3ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3bd:	0f b6 00             	movzbl (%eax),%eax
c010d3c0:	3c 39                	cmp    $0x39,%al
c010d3c2:	7f 11                	jg     c010d3d5 <strtol+0xd2>
            dig = *s - '0';
c010d3c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3c7:	0f b6 00             	movzbl (%eax),%eax
c010d3ca:	0f be c0             	movsbl %al,%eax
c010d3cd:	83 e8 30             	sub    $0x30,%eax
c010d3d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d3d3:	eb 48                	jmp    c010d41d <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010d3d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3d8:	0f b6 00             	movzbl (%eax),%eax
c010d3db:	3c 60                	cmp    $0x60,%al
c010d3dd:	7e 1b                	jle    c010d3fa <strtol+0xf7>
c010d3df:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3e2:	0f b6 00             	movzbl (%eax),%eax
c010d3e5:	3c 7a                	cmp    $0x7a,%al
c010d3e7:	7f 11                	jg     c010d3fa <strtol+0xf7>
            dig = *s - 'a' + 10;
c010d3e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3ec:	0f b6 00             	movzbl (%eax),%eax
c010d3ef:	0f be c0             	movsbl %al,%eax
c010d3f2:	83 e8 57             	sub    $0x57,%eax
c010d3f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d3f8:	eb 23                	jmp    c010d41d <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010d3fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3fd:	0f b6 00             	movzbl (%eax),%eax
c010d400:	3c 40                	cmp    $0x40,%al
c010d402:	7e 3d                	jle    c010d441 <strtol+0x13e>
c010d404:	8b 45 08             	mov    0x8(%ebp),%eax
c010d407:	0f b6 00             	movzbl (%eax),%eax
c010d40a:	3c 5a                	cmp    $0x5a,%al
c010d40c:	7f 33                	jg     c010d441 <strtol+0x13e>
            dig = *s - 'A' + 10;
c010d40e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d411:	0f b6 00             	movzbl (%eax),%eax
c010d414:	0f be c0             	movsbl %al,%eax
c010d417:	83 e8 37             	sub    $0x37,%eax
c010d41a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010d41d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d420:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d423:	7c 02                	jl     c010d427 <strtol+0x124>
            break;
c010d425:	eb 1a                	jmp    c010d441 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010d427:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d42b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d42e:	0f af 45 10          	imul   0x10(%ebp),%eax
c010d432:	89 c2                	mov    %eax,%edx
c010d434:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d437:	01 d0                	add    %edx,%eax
c010d439:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010d43c:	e9 6f ff ff ff       	jmp    c010d3b0 <strtol+0xad>

    if (endptr) {
c010d441:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d445:	74 08                	je     c010d44f <strtol+0x14c>
        *endptr = (char *) s;
c010d447:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d44a:	8b 55 08             	mov    0x8(%ebp),%edx
c010d44d:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010d44f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010d453:	74 07                	je     c010d45c <strtol+0x159>
c010d455:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d458:	f7 d8                	neg    %eax
c010d45a:	eb 03                	jmp    c010d45f <strtol+0x15c>
c010d45c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010d45f:	c9                   	leave  
c010d460:	c3                   	ret    

c010d461 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010d461:	55                   	push   %ebp
c010d462:	89 e5                	mov    %esp,%ebp
c010d464:	57                   	push   %edi
c010d465:	83 ec 24             	sub    $0x24,%esp
c010d468:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d46b:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010d46e:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010d472:	8b 55 08             	mov    0x8(%ebp),%edx
c010d475:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010d478:	88 45 f7             	mov    %al,-0x9(%ebp)
c010d47b:	8b 45 10             	mov    0x10(%ebp),%eax
c010d47e:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010d481:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010d484:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010d488:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010d48b:	89 d7                	mov    %edx,%edi
c010d48d:	f3 aa                	rep stos %al,%es:(%edi)
c010d48f:	89 fa                	mov    %edi,%edx
c010d491:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d494:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010d497:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010d49a:	83 c4 24             	add    $0x24,%esp
c010d49d:	5f                   	pop    %edi
c010d49e:	5d                   	pop    %ebp
c010d49f:	c3                   	ret    

c010d4a0 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010d4a0:	55                   	push   %ebp
c010d4a1:	89 e5                	mov    %esp,%ebp
c010d4a3:	57                   	push   %edi
c010d4a4:	56                   	push   %esi
c010d4a5:	53                   	push   %ebx
c010d4a6:	83 ec 30             	sub    $0x30,%esp
c010d4a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d4af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d4b5:	8b 45 10             	mov    0x10(%ebp),%eax
c010d4b8:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010d4bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d4be:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d4c1:	73 42                	jae    c010d505 <memmove+0x65>
c010d4c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d4c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d4c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d4cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d4cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d4d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d4d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d4d8:	c1 e8 02             	shr    $0x2,%eax
c010d4db:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d4dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d4e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d4e3:	89 d7                	mov    %edx,%edi
c010d4e5:	89 c6                	mov    %eax,%esi
c010d4e7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d4e9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010d4ec:	83 e1 03             	and    $0x3,%ecx
c010d4ef:	74 02                	je     c010d4f3 <memmove+0x53>
c010d4f1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d4f3:	89 f0                	mov    %esi,%eax
c010d4f5:	89 fa                	mov    %edi,%edx
c010d4f7:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010d4fa:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d4fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d500:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d503:	eb 36                	jmp    c010d53b <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010d505:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d508:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d50b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d50e:	01 c2                	add    %eax,%edx
c010d510:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d513:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010d516:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d519:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010d51c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d51f:	89 c1                	mov    %eax,%ecx
c010d521:	89 d8                	mov    %ebx,%eax
c010d523:	89 d6                	mov    %edx,%esi
c010d525:	89 c7                	mov    %eax,%edi
c010d527:	fd                   	std    
c010d528:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d52a:	fc                   	cld    
c010d52b:	89 f8                	mov    %edi,%eax
c010d52d:	89 f2                	mov    %esi,%edx
c010d52f:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010d532:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010d535:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010d538:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010d53b:	83 c4 30             	add    $0x30,%esp
c010d53e:	5b                   	pop    %ebx
c010d53f:	5e                   	pop    %esi
c010d540:	5f                   	pop    %edi
c010d541:	5d                   	pop    %ebp
c010d542:	c3                   	ret    

c010d543 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010d543:	55                   	push   %ebp
c010d544:	89 e5                	mov    %esp,%ebp
c010d546:	57                   	push   %edi
c010d547:	56                   	push   %esi
c010d548:	83 ec 20             	sub    $0x20,%esp
c010d54b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d54e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d551:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d554:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d557:	8b 45 10             	mov    0x10(%ebp),%eax
c010d55a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d55d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d560:	c1 e8 02             	shr    $0x2,%eax
c010d563:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d565:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d568:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d56b:	89 d7                	mov    %edx,%edi
c010d56d:	89 c6                	mov    %eax,%esi
c010d56f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d571:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d574:	83 e1 03             	and    $0x3,%ecx
c010d577:	74 02                	je     c010d57b <memcpy+0x38>
c010d579:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d57b:	89 f0                	mov    %esi,%eax
c010d57d:	89 fa                	mov    %edi,%edx
c010d57f:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d582:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d585:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d588:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010d58b:	83 c4 20             	add    $0x20,%esp
c010d58e:	5e                   	pop    %esi
c010d58f:	5f                   	pop    %edi
c010d590:	5d                   	pop    %ebp
c010d591:	c3                   	ret    

c010d592 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010d592:	55                   	push   %ebp
c010d593:	89 e5                	mov    %esp,%ebp
c010d595:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010d598:	8b 45 08             	mov    0x8(%ebp),%eax
c010d59b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010d59e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d5a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010d5a4:	eb 30                	jmp    c010d5d6 <memcmp+0x44>
        if (*s1 != *s2) {
c010d5a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d5a9:	0f b6 10             	movzbl (%eax),%edx
c010d5ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d5af:	0f b6 00             	movzbl (%eax),%eax
c010d5b2:	38 c2                	cmp    %al,%dl
c010d5b4:	74 18                	je     c010d5ce <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d5b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d5b9:	0f b6 00             	movzbl (%eax),%eax
c010d5bc:	0f b6 d0             	movzbl %al,%edx
c010d5bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d5c2:	0f b6 00             	movzbl (%eax),%eax
c010d5c5:	0f b6 c0             	movzbl %al,%eax
c010d5c8:	29 c2                	sub    %eax,%edx
c010d5ca:	89 d0                	mov    %edx,%eax
c010d5cc:	eb 1a                	jmp    c010d5e8 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010d5ce:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d5d2:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010d5d6:	8b 45 10             	mov    0x10(%ebp),%eax
c010d5d9:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d5dc:	89 55 10             	mov    %edx,0x10(%ebp)
c010d5df:	85 c0                	test   %eax,%eax
c010d5e1:	75 c3                	jne    c010d5a6 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010d5e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d5e8:	c9                   	leave  
c010d5e9:	c3                   	ret    
