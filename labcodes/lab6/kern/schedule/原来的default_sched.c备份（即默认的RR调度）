#include <defs.h>
#include <list.h>
#include <proc.h>
#include <assert.h>
#include <default_sched.h>

// 1. 初始化
static void
RR_init(struct run_queue *rq) {
    list_init(&(rq->run_list));		// 初始化队列
    rq->proc_num = 0;				// 当前进程的个数
}

// 2. 进队
static void
RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
    assert(list_empty(&(proc->run_link)));
    // 插入到就绪队列的头部
    list_add_before(&(rq->run_list), &(proc->run_link));
    // 对该进程（proc）的其他参数做调整
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
        proc->time_slice = rq->max_time_slice;
    }
    proc->rq = rq;
    rq->proc_num ++;
}

// 4. 出队
static void
RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
    // 从就绪队列中取进程
    list_del_init(&(proc->run_link));
    rq->proc_num --;
}

// 3. 选择
static struct proc_struct *
RR_pick_next(struct run_queue *rq) {
	// 从就绪队列的尾部选进程
    list_entry_t *le = list_next(&(rq->run_list));				// list是一个双向链表
    // 代表选到了
    if (le != &(rq->run_list)) {
        return le2proc(le, run_link);
    }
    // 代表没选到，NULL？
    // 显然不是，会继续执行idle内核线程。
    return NULL;
}

// 产生一次时钟中断就会调用这个函数
static void
RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
    if (proc->time_slice > 0) {
    	// 产生一次时钟中断说明时间流失了一小段，我们就减去1
        proc->time_slice --;				// time_slice：时间片
    }
    // 直到减为0
    if (proc->time_slice == 0) {
    	// 减到0，就意味着可以被调度走了。
    	// 在接下来的（其他文件）中断中会探寻这个位是否为1，如果为1就可以执行schedule被调度走。
        proc->need_resched = 1;
    }
}

struct sched_class default_sched_class = {
    .name = "RR_scheduler",
    .init = RR_init,
    .enqueue = RR_enqueue,
    .dequeue = RR_dequeue,
    .pick_next = RR_pick_next,
    .proc_tick = RR_proc_tick,
};

